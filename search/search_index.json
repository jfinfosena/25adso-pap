{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Bienvenidos al Curso Avanzado de Backend en Python con FastAPI","text":"<p>\u00a1Bienvenidos a este apasionante viaje por el desarrollo de APIs modernas y escalables! Este Curso Avanzado de Backend en Python con FastAPI est\u00e1 dise\u00f1ado para llevar tus habilidades de programaci\u00f3n al siguiente nivel, enfoc\u00e1ndote en la creaci\u00f3n de aplicaciones backend robustas, seguras y de alto rendimiento utilizando FastAPI. Ya sea que tengas experiencia previa en Python o est\u00e9s buscando especializarte en el desarrollo de APIs, este programa te proporcionar\u00e1 las herramientas pr\u00e1cticas y te\u00f3ricas necesarias para destacar en entornos profesionales.</p>"},{"location":"#que-aprenderas-en-este-curso","title":"\u00bfQu\u00e9 aprender\u00e1s en este curso?","text":"<p>A lo largo de 16 clases (4 meses, 1 clase semanal de 2-3 horas), explorar\u00e1s los fundamentos y t\u00e9cnicas avanzadas del desarrollo backend, organizados en cuatro m\u00f3dulos te\u00f3rico-pr\u00e1cticos:</p>"},{"location":"#modulo-1-fundamentos-de-fastapi","title":"M\u00f3dulo 1: Fundamentos de FastAPI","text":"<ul> <li>Introducci\u00f3n a FastAPI: Comprender\u00e1s qu\u00e9 es FastAPI, sus ventajas frente a otros frameworks y c\u00f3mo crear APIs REST b\u00e1sicas.</li> <li>Rutas y validaci\u00f3n: Aprender\u00e1s a dise\u00f1ar rutas din\u00e1micas, manejar par\u00e1metros y validar datos con Pydantic.</li> <li>Documentaci\u00f3n autom\u00e1tica: Dominar\u00e1s el uso de herramientas como Swagger y ReDoc para documentar APIs de forma eficiente.</li> </ul>"},{"location":"#modulo-2-persistencia-y-bases-de-datos","title":"M\u00f3dulo 2: Persistencia y bases de datos","text":"<ul> <li>Integraci\u00f3n con bases de datos: Conectar\u00e1s FastAPI con bases de datos relacionales (PostgreSQL/MySQL) usando SQLAlchemy y explorar\u00e1s opciones NoSQL como MongoDB.</li> <li>Operaciones CRUD: Implementar\u00e1s operaciones completas de creaci\u00f3n, lectura, actualizaci\u00f3n y eliminaci\u00f3n de datos.</li> <li>Migraciones: Gestionar\u00e1s cambios en la estructura de bases de datos con Alembic.</li> </ul>"},{"location":"#modulo-3-autenticacion-y-seguridad","title":"M\u00f3dulo 3: Autenticaci\u00f3n y seguridad","text":"<ul> <li>Autenticaci\u00f3n con JWT: Configurar\u00e1s sistemas de autenticaci\u00f3n basados en tokens para proteger tus APIs.</li> <li>Autorizaci\u00f3n y seguridad: Implementar\u00e1s roles, permisos y medidas de seguridad como CORS y protecci\u00f3n contra ataques comunes.</li> <li>Testing: Escribir\u00e1s pruebas unitarias para garantizar la calidad de tus APIs con Pytest.</li> </ul>"},{"location":"#modulo-4-despliegue-y-escalabilidad","title":"M\u00f3dulo 4: Despliegue y escalabilidad","text":"<ul> <li>Optimizaci\u00f3n: Mejorar\u00e1s el rendimiento de tus APIs con t\u00e9cnicas como cacheo (Redis) y tareas as\u00edncronas.</li> <li>Despliegue: Aprender\u00e1s a desplegar tus APIs en la nube usando Docker y plataformas como Heroku, AWS o Render.</li> <li>Monitoreo: Configurar\u00e1s logging y herramientas como Prometheus para supervisar aplicaciones en producci\u00f3n.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del curso","text":"<p>El curso combina teor\u00eda y pr\u00e1ctica para garantizar un aprendizaje s\u00f3lido y aplicado:</p> <ul> <li>Clases te\u00f3rico-pr\u00e1cticas: Cada sesi\u00f3n incluye explicaciones claras de conceptos clave, seguidas de ejercicios pr\u00e1cticos para reforzar el aprendizaje.</li> <li>Proyectos incrementales: Desarrollar\u00e1s una API completa a lo largo del curso, aplicando los conocimientos de cada m\u00f3dulo en un proyecto final integrador (por ejemplo, una API para una tienda online).</li> <li>Ejercicios pr\u00e1cticos: Actividades guiadas para crear rutas, conectar bases de datos, implementar autenticaci\u00f3n y desplegar aplicaciones.</li> <li>Material complementario: Acceder\u00e1s a c\u00f3digo de ejemplo, lecturas recomendadas y repositorios en GitHub para apoyar tu aprendizaje.</li> </ul>"},{"location":"#compromiso-del-curso","title":"Compromiso del curso","text":"<p>Nuestro compromiso es impulsar tu desarrollo profesional como desarrollador backend. Este curso no solo te ense\u00f1ar\u00e1 a construir APIs modernas con FastAPI, sino que tambi\u00e9n te inspirar\u00e1 a dise\u00f1ar soluciones escalables, seguras y eficientes que respondan a las necesidades de proyectos reales. Al finalizar, tendr\u00e1s las competencias necesarias para:</p> <ul> <li>Dise\u00f1ar e implementar APIs RESTful robustas.</li> <li>Integrar bases de datos relacionales y NoSQL en aplicaciones backend.</li> <li>Aplicar buenas pr\u00e1cticas de seguridad, testing y despliegue.</li> <li>Contribuir a proyectos tecnol\u00f3gicos innovadores con confianza.</li> </ul>"},{"location":"#embarcate-en-esta-aventura-tecnologica","title":"\u00a1Emb\u00e1rcate en esta aventura tecnol\u00f3gica!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y pr\u00e1ctica, pronto estar\u00e1s creando APIs de alto rendimiento, gestionando datos de forma eficiente y desplegando aplicaciones en entornos reales. \u00a1Prep\u00e1rate para dominar el desarrollo backend con FastAPI!</p> <p>\u00a1Bienvenido al mundo del desarrollo backend moderno!</p>"},{"location":"activities/p1/","title":"Actividad: Ejemplo de FastAPI con Tres Entidades","text":"<p>Este documento describe una aplicaci\u00f3n FastAPI modular con tres entidades: User, Product y Order. La aplicaci\u00f3n utiliza FastAPI, SQLAlchemy para la gesti\u00f3n de bases de datos y Pydantic para la validaci\u00f3n de datos. Est\u00e1 estructurada de forma modular para facilitar la escalabilidad y el mantenimiento.</p>"},{"location":"activities/p1/#repositorio","title":"Repositorio","text":"<pre><code>git clone https://github.com/jfinfosena/act_pap_s4.git\n</code></pre>"},{"location":"activities/p1/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<p>La aplicaci\u00f3n sigue una estructura basada en tipo de archivo, adecuada para proyectos peque\u00f1os o medianos:</p> <pre><code>project/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py           # Inicializa la app FastAPI\n\u2502   \u251c\u2500\u2500 database.py       # Configuraci\u00f3n de la base de datos\n\u2502   \u251c\u2500\u2500 routers/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 users.py      # Rutas para usuarios\n\u2502   \u2502   \u251c\u2500\u2500 products.py   # Rutas para productos\n\u2502   \u2502   \u251c\u2500\u2500 orders.py     # Rutas para \u00f3rdenes\n\u2502   \u251c\u2500\u2500 schemas/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 user.py       # Esquemas Pydantic para usuarios\n\u2502   \u2502   \u251c\u2500\u2500 product.py    # Esquemas Pydantic para productos\n\u2502   \u2502   \u251c\u2500\u2500 order.py      # Esquemas Pydantic para \u00f3rdenes\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 user.py       # Modelos SQLAlchemy para usuarios\n\u2502   \u2502   \u251c\u2500\u2500 product.py    # Modelos SQLAlchemy para productos\n\u2502   \u2502   \u251c\u2500\u2500 order.py      # Modelos SQLAlchemy para \u00f3rdenes\n\u251c\u2500\u2500 requirements.txt      # Dependencias del proyecto\n</code></pre>"},{"location":"activities/p1/#requisitos","title":"Requisitos","text":"<p>El archivo <code>requirements.txt</code> lista las dependencias necesarias:</p> <pre><code>fastapi[standard]\nsqlalchemy\npydantic\n</code></pre> <p>Instala las dependencias con:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"activities/p1/#configuracion-de-la-base-de-datos","title":"Configuraci\u00f3n de la Base de Datos","text":"<p>El archivo <code>src/database.py</code> configura una base de datos SQLite y proporciona una funci\u00f3n para obtener sesiones de base de datos:</p> <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"activities/p1/#modelos-sqlalchemy","title":"Modelos SQLAlchemy","text":"<p>Los modelos definen las tablas de la base de datos usando SQLAlchemy.</p>"},{"location":"activities/p1/#modelo-user-srcmodelsuserpy","title":"Modelo User (<code>src/models/user.py</code>)","text":"<pre><code>from sqlalchemy import Column, Integer, String\nfrom src.database import Base\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, index=True)\n    email = Column(String, unique=True, index=True)\n</code></pre>"},{"location":"activities/p1/#modelo-product-srcmodelsproductpy","title":"Modelo Product (<code>src/models/product.py</code>)","text":"<pre><code>from sqlalchemy import Column, Integer, String, Float\nfrom src.database import Base\n\nclass Product(Base):\n    __tablename__ = \"products\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n    price = Column(Float)\n</code></pre>"},{"location":"activities/p1/#modelo-order-srcmodelsorderpy","title":"Modelo Order (<code>src/models/order.py</code>)","text":"<pre><code>from sqlalchemy import Column, Integer, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom src.database import Base\n\nclass Order(Base):\n    __tablename__ = \"orders\"\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    product_id = Column(Integer, ForeignKey(\"products.id\"))\n\n    user = relationship(\"User\")\n    product = relationship(\"Product\")\n</code></pre>"},{"location":"activities/p1/#esquemas-pydantic","title":"Esquemas Pydantic","text":"<p>Los esquemas Pydantic definen la validaci\u00f3n de datos para las solicitudes y respuestas de la API.</p>"},{"location":"activities/p1/#esquema-user-srcschemasuserpy","title":"Esquema User (<code>src/schemas/user.py</code>)","text":"<pre><code>from pydantic import BaseModel\n\nclass UserCreate(BaseModel):\n    username: str\n    email: str\n\nclass User(BaseModel):\n    id: int\n    username: str\n    email: str\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"activities/p1/#esquema-product-srcschemasproductpy","title":"Esquema Product (<code>src/schemas/product.py</code>)","text":"<pre><code>from pydantic import BaseModel\n\nclass ProductCreate(BaseModel):\n    name: str\n    price: float\n\nclass Product(BaseModel):\n    id: int\n    name: str\n    price: float\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"activities/p1/#esquema-order-srcschemasorderpy","title":"Esquema Order (<code>src/schemas/order.py</code>)","text":"<pre><code>from pydantic import BaseModel\n\nclass OrderCreate(BaseModel):\n    user_id: int\n    product_id: int\n\nclass Order(BaseModel):\n    id: int\n    user_id: int\n    product_id: int\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"activities/p1/#rutas-routers","title":"Rutas (Routers)","text":"<p>Las rutas definen los endpoints de la API usando <code>APIRouter</code> para cada entidad.</p>"},{"location":"activities/p1/#rutas-de-usuarios-srcroutersuserspy","title":"Rutas de Usuarios (<code>src/routers/users.py</code>)","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom src.database import get_db\nfrom src.models.user import User as UserModel\nfrom src.schemas.user import User, UserCreate\n\nrouter = APIRouter(tags=[\"users\"])\n\n@router.post(\"/users/\", response_model=User)\nasync def create_user(user: UserCreate, db: Session = Depends(get_db)):\n    db_user = UserModel(**user.dict())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n@router.get(\"/users/{user_id}\", response_model=User)\nasync def read_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = db.query(UserModel).filter(UserModel.id == user_id).first()\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n</code></pre>"},{"location":"activities/p1/#rutas-de-productos-srcroutersproductspy","title":"Rutas de Productos (<code>src/routers/products.py</code>)","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom src.database import get_db\nfrom src.models.product import Product as ProductModel\nfrom src.schemas.product import Product, ProductCreate\n\nrouter = APIRouter(tags=[\"products\"])\n\n@router.post(\"/products/\", response_model=Product)\nasync def create_product(product: ProductCreate, db: Session = Depends(get_db)):\n    db_product = ProductModel(**product.dict())\n    db.add(db_product)\n    db.commit()\n    db.refresh(db_product)\n    return db_product\n\n@router.get(\"/products/{product_id}\", response_model=Product)\nasync def read_product(product_id: int, db: Session = Depends(get_db)):\n    db_product = db.query(ProductModel).filter(ProductModel.id == product_id).first()\n    if db_product is None:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    return db_product\n</code></pre>"},{"location":"activities/p1/#rutas-de-ordenes-srcroutersorderspy","title":"Rutas de \u00d3rdenes (<code>src/routers/orders.py</code>)","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom src.database import get_db\nfrom src.models.order import Order as OrderModel\nfrom src.schemas.order import Order, OrderCreate\n\nrouter = APIRouter(tags=[\"orders\"])\n\n@router.post(\"/orders/\", response_model=Order)\nasync def create_order(order: OrderCreate, db: Session = Depends(get_db)):\n    db_order = OrderModel(**order.dict())\n    db.add(db_order)\n    db.commit()\n    db.refresh(db_order)\n    return db_order\n\n@router.get(\"/orders/{order_id}\", response_model=Order)\nasync def read_order(order_id: int, db: Session = Depends(get_db)):\n    db_order = db.query(OrderModel).filter(OrderModel.id == order_id).first()\n    if db_order is None:\n        raise HTTPException(status_code=404, detail=\"Order not found\")\n    return db_order\n</code></pre>"},{"location":"activities/p1/#aplicacion-principal-srcmainpy","title":"Aplicaci\u00f3n Principal (<code>src/main.py</code>)","text":"<p>El archivo principal inicializa la aplicaci\u00f3n FastAPI e incluye los routers:</p> <pre><code>from fastapi import FastAPI\nfrom src.database import Base, engine\nfrom src.routers import users, products, orders\n\napp = FastAPI()\n\n# Crear las tablas en la base de datos\nBase.metadata.create_all(bind=engine)\n\n# Incluir los routers\napp.include_router(users.router, prefix=\"/api\")\napp.include_router(products.router, prefix=\"/api\")\napp.include_router(orders.router, prefix=\"/api\")\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Welcome to FastAPI with 3 entities\"}\n</code></pre>"},{"location":"activities/p1/#ejecucion-de-la-aplicacion-fastapi","title":"Ejecuci\u00f3n de la Aplicaci\u00f3n FastAPI","text":"<ol> <li>Crear un entorno virtual:</li> </ol> <pre><code>python -m venv venv\nsource venv/bin/activate  # En Windows: venv\\Scripts\\activate\n</code></pre> <ol> <li>Instalar dependencias:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>Ejecutar la aplicaci\u00f3n:</li> </ol> <pre><code>fastapi dev src/main.py\n</code></pre> <ol> <li>Probar la API:</li> <li>Abre <code>http://127.0.0.1:8000/docs</code> para acceder a la interfaz de Swagger UI.</li> <li>Ejemplo de endpoints:<ul> <li>POST <code>/api/users/</code> con <code>{\"username\": \"john\", \"email\": \"john@example.com\"}</code></li> <li>POST <code>/api/products/</code> con <code>{\"name\": \"Laptop\", \"price\": 999.99}</code></li> <li>POST <code>/api/orders/</code> con <code>{\"user_id\": 1, \"product_id\": 1}</code></li> <li>GET <code>/api/users/1</code>, <code>/api/products/1</code>, <code>/api/orders/1</code></li> </ul> </li> </ol>"},{"location":"activities/p1/#notas","title":"Notas","text":"<ul> <li>Base de datos: Usa SQLite (<code>test.db</code>) para simplicidad. Cambia <code>DATABASE_URL</code> en <code>database.py</code> para usar PostgreSQL, MySQL, etc.</li> <li>Modularidad: Cada entidad tiene su propio m\u00f3dulo (modelos, esquemas, rutas), lo que facilita la escalabilidad.</li> <li>Validaci\u00f3n: Pydantic valida los datos de entrada.</li> <li>Relaciones: El modelo <code>Order</code> incluye claves for\u00e1neas para relacionar con <code>User</code> y <code>Product</code>.</li> </ul>"},{"location":"activities/p1/#actividad-de-consulta","title":"Actividad de consulta","text":""},{"location":"activities/p1/#pregunta-1-grupo-1","title":"Pregunta 1 (Grupo 1):","text":"<p>\u00bfPara qu\u00e9 sirven las siguientes dependencias: fastapi[standard], sqlalchemy y pydantic?</p>"},{"location":"activities/p1/#pregunta-2-grupo-2","title":"Pregunta 2 (Grupo 2):","text":"<p>Explica c\u00f3mo se definen las tablas de la base de datos usando modelos SQLAlchemy en el contexto de FastAPI.</p>"},{"location":"activities/p1/#pregunta-3-grupo-3","title":"Pregunta 3 (Grupo 3):","text":"<p>\u00bfC\u00f3mo definen los esquemas Pydantic la validaci\u00f3n de datos en las solicitudes y respuestas de una API?</p>"},{"location":"activities/p1/#pregunta-4-grupo-4","title":"Pregunta 4 (Grupo 4):","text":"<p>Explica qu\u00e9 es APIRouter en FastAPI y c\u00f3mo se utiliza para definir endpoints en una API.</p>"},{"location":"activities/p1/#pregunta-5-grupo-5","title":"Pregunta 5 (Grupo 5):","text":"<p>Explica qu\u00e9 son los m\u00f3dulos en FastAPI y cu\u00e1l es su prop\u00f3sito principal en la organizaci\u00f3n del c\u00f3digo. Describe c\u00f3mo el archivo init.py contribuye a la estructura modular de un proyecto FastAPI.</p>"},{"location":"activities/p1/#pregunta-6-grupo-6","title":"Pregunta 6 (Grupo 6):","text":"<p>\u00bfCu\u00e1les son las principales ventajas de implementar la modularizaci\u00f3n en un proyecto FastAPI?</p>"},{"location":"content/curso/","title":"Curso de FastAPI: Estructura de 16 Clases","text":"<p>Este curso de FastAPI de 16 clases est\u00e1 dise\u00f1ado para ense\u00f1ar desde los fundamentos hasta temas avanzados, con un enfoque pr\u00e1ctico centrado en el desarrollo de una API de gesti\u00f3n de proyectos. Cada clase combina teor\u00eda, pr\u00e1ctica y trabajo en un proyecto continuo, asumiendo un nivel inicial-intermedio en Python. Duraci\u00f3n aproximada por clase: 1.5-2 horas.</p>"},{"location":"content/curso/#modulo-1-fundamentos-y-primeros-pasos","title":"M\u00f3dulo 1: Fundamentos y Primeros Pasos","text":""},{"location":"content/curso/#clase-1-introduccion-a-fastapi-y-apis-rest","title":"Clase 1: Introducci\u00f3n a FastAPI y APIs REST","text":"<ul> <li>Objetivo: Comprender FastAPI y configurar el entorno.</li> <li>Contenido:</li> <li>\u00bfQu\u00e9 es FastAPI? Ventajas y comparaci\u00f3n con otros frameworks.</li> <li>Conceptos de APIs REST: m\u00e9todos HTTP, endpoints, JSON.</li> <li>Instalaci\u00f3n de FastAPI, Uvicorn y Python.</li> <li>Pr\u00e1ctica: Crear una API con un endpoint <code>/projects</code> que devuelva una lista de proyectos.</li> <li>Tarea: Configurar el entorno local y probar la API.</li> </ul>"},{"location":"content/curso/#clase-2-rutas-y-parametros","title":"Clase 2: Rutas y Par\u00e1metros","text":"<ul> <li>Objetivo: Crear endpoints din\u00e1micos con par\u00e1metros.</li> <li>Contenido:</li> <li>Endpoints con GET, POST, PUT, DELETE.</li> <li>Par\u00e1metros de ruta (<code>/projects/{id}</code>) y query parameters (<code>/projects?status=active</code>).</li> <li>Validaci\u00f3n b\u00e1sica de datos.</li> <li>Pr\u00e1ctica: Implementar endpoints para crear y obtener proyectos.</li> <li>Tarea: Crear un endpoint para eliminar un proyecto.</li> </ul>"},{"location":"content/curso/#clase-3-modelos-con-pydantic","title":"Clase 3: Modelos con Pydantic","text":"<ul> <li>Objetivo: Usar Pydantic para validar datos.</li> <li>Contenido:</li> <li>Definici\u00f3n de modelos Pydantic.</li> <li>Validaci\u00f3n de entradas y salidas.</li> <li>Uso de <code>response_model</code>.</li> <li>Pr\u00e1ctica: Crear un modelo para validar datos de proyectos (nombre, descripci\u00f3n, fecha).</li> <li>Tarea: Implementar un endpoint que valide la creaci\u00f3n de un proyecto.</li> </ul>"},{"location":"content/curso/#clase-4-documentacion-y-estructura-del-proyecto","title":"Clase 4: Documentaci\u00f3n y Estructura del Proyecto","text":"<ul> <li>Objetivo: Documentar la API y organizar el proyecto.</li> <li>Contenido:</li> <li>Swagger UI y ReDoc para documentaci\u00f3n autom\u00e1tica.</li> <li>Estructura de carpetas y buenas pr\u00e1cticas.</li> <li>Introducci\u00f3n al proyecto: API de gesti\u00f3n de proyectos.</li> <li>Pr\u00e1ctica: Documentar endpoints con tags y descripciones.</li> <li>Tarea: Dise\u00f1ar una estructura de carpetas para el proyecto.</li> </ul>"},{"location":"content/curso/#modulo-2-funcionalidades-intermedias-y-bases-de-datos","title":"M\u00f3dulo 2: Funcionalidades Intermedias y Bases de Datos","text":""},{"location":"content/curso/#clase-5-bases-de-datos-con-sqlalchemy","title":"Clase 5: Bases de Datos con SQLAlchemy","text":"<ul> <li>Objetivo: Conectar la API a una base de datos.</li> <li>Contenido:</li> <li>Configuraci\u00f3n de SQLAlchemy (SQLite/PostgreSQL).</li> <li>Modelos de base de datos para proyectos.</li> <li>Operaciones CRUD b\u00e1sicas.</li> <li>Pr\u00e1ctica: Almacenar y recuperar proyectos en una base de datos.</li> <li>Tarea: Crear un endpoint para actualizar proyectos.</li> </ul>"},{"location":"content/curso/#clase-6-relaciones-en-bases-de-datos","title":"Clase 6: Relaciones en Bases de Datos","text":"<ul> <li>Objetivo: Manejar relaciones en la base de datos.</li> <li>Contenido:</li> <li>Relaciones uno-a-muchos (proyectos y tareas).</li> <li>Configuraci\u00f3n en SQLAlchemy.</li> <li>Consultas para datos relacionados.</li> <li>Pr\u00e1ctica: Asociar tareas a un proyecto.</li> <li>Tarea: Listar tareas de un proyecto.</li> </ul>"},{"location":"content/curso/#clase-7-autenticacion-con-oauth2","title":"Clase 7: Autenticaci\u00f3n con OAuth2","text":"<ul> <li>Objetivo: Implementar autenticaci\u00f3n con JWT.</li> <li>Contenido:</li> <li>Autenticaci\u00f3n con OAuth2 y JWT.</li> <li>Endpoints protegidos con <code>OAuth2PasswordBearer</code>.</li> <li>Generaci\u00f3n y verificaci\u00f3n de tokens.</li> <li>Pr\u00e1ctica: Proteger endpoints de proyectos.</li> <li>Tarea: Crear un endpoint de login.</li> </ul>"},{"location":"content/curso/#clase-8-manejo-de-errores","title":"Clase 8: Manejo de Errores","text":"<ul> <li>Objetivo: Gestionar errores de forma robusta.</li> <li>Contenido:</li> <li>Uso de <code>HTTPException</code>.</li> <li>Respuestas de error estructuradas.</li> <li>Middleware para errores globales.</li> <li>Pr\u00e1ctica: Agregar manejo de errores a endpoints.</li> <li>Tarea: Crear un middleware para registrar errores.</li> </ul>"},{"location":"content/curso/#modulo-3-optimizacion-y-funcionalidades-avanzadas","title":"M\u00f3dulo 3: Optimizaci\u00f3n y Funcionalidades Avanzadas","text":""},{"location":"content/curso/#clase-9-paginacion-y-filtrado","title":"Clase 9: Paginaci\u00f3n y Filtrado","text":"<ul> <li>Objetivo: Optimizar listas de datos.</li> <li>Contenido:</li> <li>Paginaci\u00f3n para proyectos o tareas.</li> <li>Filtrado y ordenamiento con query parameters.</li> <li>Optimizaci\u00f3n de consultas.</li> <li>Pr\u00e1ctica: Crear un endpoint paginado para proyectos.</li> <li>Tarea: Implementar filtros por estado o fecha.</li> </ul>"},{"location":"content/curso/#clase-10-programacion-asincrona","title":"Clase 10: Programaci\u00f3n As\u00edncrona","text":"<ul> <li>Objetivo: Usar asincron\u00eda para mejorar el rendimiento.</li> <li>Contenido:</li> <li><code>def</code> vs. <code>async def</code>.</li> <li>Bases de datos as\u00edncronas (<code>asyncpg</code>).</li> <li>Beneficios de la asincron\u00eda.</li> <li>Pr\u00e1ctica: Convertir un endpoint a as\u00edncrono.</li> <li>Tarea: Comparar rendimiento s\u00edncrono vs. as\u00edncrono.</li> </ul>"},{"location":"content/curso/#clase-11-dependencias-avanzadas","title":"Clase 11: Dependencias Avanzadas","text":"<ul> <li>Objetivo: Crear dependencias reutilizables.</li> <li>Contenido:</li> <li>Uso de <code>Depends</code> para autenticaci\u00f3n y validaciones.</li> <li>Dependencias anidadas.</li> <li>Ejemplos de dependencias complejas.</li> <li>Pr\u00e1ctica: Verificar roles de usuario con una dependencia.</li> <li>Tarea: Limitar acceso por rol.</li> </ul>"},{"location":"content/curso/#clase-12-testing-automatizado","title":"Clase 12: Testing Automatizado","text":"<ul> <li>Objetivo: Escribir pruebas para la API.</li> <li>Contenido:</li> <li><code>pytest</code> y <code>TestClient</code>.</li> <li>Pruebas unitarias e integraci\u00f3n.</li> <li>Pruebas con base de datos.</li> <li>Pr\u00e1ctica: Escribir pruebas para endpoints.</li> <li>Tarea: Validar errores de autenticaci\u00f3n.</li> </ul>"},{"location":"content/curso/#modulo-4-produccion-y-caracteristicas-avanzadas","title":"M\u00f3dulo 4: Producci\u00f3n y Caracter\u00edsticas Avanzadas","text":""},{"location":"content/curso/#clase-13-websockets","title":"Clase 13: WebSockets","text":"<ul> <li>Objetivo: Implementar comunicaci\u00f3n en tiempo real.</li> <li>Contenido:</li> <li>WebSockets en FastAPI.</li> <li>Notificaciones para proyectos (ej. tarea asignada).</li> <li>Manejo de conexiones.</li> <li>Pr\u00e1ctica: Crear un WebSocket para notificaciones.</li> <li>Tarea: Notificar nuevos proyectos.</li> </ul>"},{"location":"content/curso/#clase-14-integracion-con-servicios-externos","title":"Clase 14: Integraci\u00f3n con Servicios Externos","text":"<ul> <li>Objetivo: Conectar con APIs externas.</li> <li>Contenido:</li> <li>Uso de <code>httpx</code> para consumir APIs.</li> <li>Respuestas as\u00edncronas.</li> <li>Ejemplo: notificaciones por correo.</li> <li>Pr\u00e1ctica: Integrar un servicio externo.</li> <li>Tarea: Probar una API externa relevante.</li> </ul>"},{"location":"content/curso/#clase-15-despliegue-en-produccion","title":"Clase 15: Despliegue en Producci\u00f3n","text":"<ul> <li>Objetivo: Llevar la API a producci\u00f3n.</li> <li>Contenido:</li> <li>Uvicorn y Gunicorn.</li> <li>Despliegue en Heroku, AWS o DigitalOcean.</li> <li>Variables de entorno y seguridad.</li> <li>Pr\u00e1ctica: Desplegar la API.</li> <li>Tarea: Configurar HTTPS.</li> </ul>"},{"location":"content/curso/#clase-16-proyecto-final-y-cierre","title":"Clase 16: Proyecto Final y Cierre","text":"<ul> <li>Objetivo: Completar y presentar el proyecto.</li> <li>Contenido:</li> <li>Finalizaci\u00f3n de la API de gesti\u00f3n de proyectos.</li> <li>Revisi\u00f3n de c\u00f3digo y documentaci\u00f3n.</li> <li>Presentaci\u00f3n de proyectos.</li> <li>Pr\u00e1ctica: Desplegar y probar el proyecto final.</li> <li>Tarea: Compartir repositorio y un informe.</li> </ul>"},{"location":"content/curso/#notas-adicionales","title":"Notas Adicionales","text":"<ul> <li>Proyecto: Los estudiantes desarrollan una API de gesti\u00f3n de proyectos (proyectos, tareas, usuarios) a lo largo del curso.</li> <li>Metodolog\u00eda: 30% teor\u00eda, 50% pr\u00e1ctica, 20% resoluci\u00f3n de problemas.</li> <li>Requisitos previos: Python b\u00e1sico y conceptos de web.</li> <li>Recursos:</li> <li>Documentaci\u00f3n de FastAPI</li> <li>Tutoriales de SQLAlchemy, Pydantic, JWT.</li> <li>Repositorio de GitHub con ejemplos.</li> <li>Evaluaci\u00f3n: Proyecto (50%), tareas (30%), participaci\u00f3n (20%).</li> </ul>"},{"location":"content/curso2/","title":"\ud83d\udcd8 Tutorial Completo y Profundo de Pydantic + FastAPI en Espa\u00f1ol","text":""},{"location":"content/curso2/#desarrollo-de-apis-rest-robustas-seguras-y-documentadas","title":"\ud83d\udd25 Desarrollo de APIs REST Robustas, Seguras y Documentadas","text":""},{"location":"content/curso2/#tabla-de-contenidos","title":"\ud83d\udcda Tabla de Contenidos","text":"<ul> <li>\ud83d\udcd8 Tutorial Completo y Profundo de Pydantic + FastAPI en Espa\u00f1ol</li> <li>\ud83d\udd25 Desarrollo de APIs REST Robustas, Seguras y Documentadas</li> <li>\ud83d\udcda Tabla de Contenidos</li> <li>1. Introducci\u00f3n: \u00bfPor qu\u00e9 Pydantic + FastAPI?<ul> <li>\ud83d\udd11 Ventajas del combo:</li> </ul> </li> <li>2. Instalaci\u00f3n y Entorno</li> <li>3. Conceptos Clave de FastAPI<ul> <li>Estructura b\u00e1sica</li> </ul> </li> <li>4. Modelos Pydantic: Validaci\u00f3n y Serializaci\u00f3n<ul> <li>Modelo b\u00e1sico</li> <li>Validaci\u00f3n de tipos y restricciones</li> </ul> </li> <li>5. Tipos de Modelos: Entrada, Salida, Com\u00fan</li> <li>6. Validaciones Avanzadas con Pydantic<ul> <li>Validadores de campo</li> <li>Validador de modelo completo</li> </ul> </li> <li>7. Rutas y Par\u00e1metros en FastAPI<ul> <li>Par\u00e1metros de ruta, consulta y cuerpo</li> <li>Sub-dependencias</li> </ul> </li> <li>8. Manejo de Errores y Excepciones Personalizadas<ul> <li>Excepciones HTTP</li> <li>Manejadores globales</li> </ul> </li> <li>9. Autenticaci\u00f3n y Seguridad (JWT, OAuth2)<ul> <li>Configuraci\u00f3n de JWT</li> <li>Ruta de login</li> <li>Proteger rutas</li> </ul> </li> <li>10. Conexi\u00f3n con Base de Datos (SQLAlchemy + Pydantic)<ul> <li>Modelo SQLAlchemy</li> <li>Uso en rutas</li> </ul> </li> <li>11. Documentaci\u00f3n Autom\u00e1tica (Swagger y ReDoc)<ul> <li>Mejora la documentaci\u00f3n con descripciones</li> </ul> </li> <li>12. Pruebas Unitarias con Pydantic y FastAPI</li> <li>13. Despliegue B\u00e1sico (Docker, Uvicorn)<ul> <li><code>Dockerfile</code></li> <li><code>docker-compose.yml</code></li> </ul> </li> <li>14. Ejemplo Completo: API de Usuarios y Publicaciones<ul> <li>Estructura del proyecto</li> <li>Funcionalidades incluidas:</li> </ul> </li> <li>15. Mejores Pr\u00e1cticas y Consejos Profesionales</li> <li>16. Recursos y Enlaces \u00datiles</li> </ul>"},{"location":"content/curso2/#1-introduccion-por-que-pydantic-fastapi","title":"1. Introducci\u00f3n: \u00bfPor qu\u00e9 Pydantic + FastAPI?","text":"<p>FastAPI es uno de los frameworks m\u00e1s modernos y r\u00e1pidos para construir APIs en Python, y su gran ventaja es su integraci\u00f3n nativa con Pydantic.</p>"},{"location":"content/curso2/#ventajas-del-combo","title":"\ud83d\udd11 Ventajas del combo:","text":"<ul> <li>\u2705 Validaci\u00f3n autom\u00e1tica de datos de entrada/salida.</li> <li>\u2705 Documentaci\u00f3n autom\u00e1tica (Swagger UI y ReDoc).</li> <li>\u2705 Alto rendimiento, comparable a Node.js y Go.</li> <li>\u2705 Basado en est\u00e1ndares: OpenAPI y JSON Schema.</li> <li>\u2705 Soporte para async/await (ideal para operaciones I/O).</li> <li>\u2705 Integraci\u00f3n perfecta con editores (autocompletado, chequeo de tipos).</li> </ul> <p>Este tutorial te llevar\u00e1 desde cero hasta construir una API profesional completa, segura, bien estructurada y lista para producci\u00f3n.</p>"},{"location":"content/curso2/#2-instalacion-y-entorno","title":"2. Instalaci\u00f3n y Entorno","text":"<p>Crea un entorno virtual y instala las dependencias:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# o\nvenv\\Scripts\\activate     # Windows\n\npip install \"fastapi[all]\"  # incluye Uvicorn, Starlette, Pydantic, etc.\npip install sqlalchemy  # para base de datos\npip install python-jose[cryptography]  # para JWT\npip install passlib[bcrypt]  # para hashing de contrase\u00f1as\n</code></pre> <p>\u2705 <code>fastapi[all]</code> instala FastAPI con todas sus dependencias opcionales (como el servidor Uvicorn).</p> <p>Inicia el servidor con:</p> <pre><code>uvicorn main:app --reload\n</code></pre>"},{"location":"content/curso2/#3-conceptos-clave-de-fastapi","title":"3. Conceptos Clave de FastAPI","text":"<p>FastAPI est\u00e1 construido sobre Starlette (para endpoints ASGI) y Pydantic (para validaci\u00f3n).</p>"},{"location":"content/curso2/#estructura-basica","title":"Estructura b\u00e1sica","text":"<pre><code># main.py\nfrom fastapi import FastAPI\n\napp = FastAPI(title=\"Mi API\", version=\"1.0\")\n\n@app.get(\"/\")\ndef saludar():\n    return {\"mensaje\": \"\u00a1Hola desde FastAPI!\"}\n</code></pre> <p>Accede a: - <code>http://localhost:8000</code> \u2192 JSON - <code>http://localhost:8000/docs</code> \u2192 Swagger UI - <code>http://localhost:8000/redoc</code> \u2192 ReDoc</p>"},{"location":"content/curso2/#4-modelos-pydantic-validacion-y-serializacion","title":"4. Modelos Pydantic: Validaci\u00f3n y Serializaci\u00f3n","text":""},{"location":"content/curso2/#modelo-basico","title":"Modelo b\u00e1sico","text":"<pre><code>from pydantic import BaseModel\n\nclass UsuarioBase(BaseModel):\n    email: str\n    nombre: str\n</code></pre>"},{"location":"content/curso2/#validacion-de-tipos-y-restricciones","title":"Validaci\u00f3n de tipos y restricciones","text":"<pre><code>from pydantic import BaseModel, Field, EmailStr\nfrom typing import Optional\n\nclass UsuarioCrear(UsuarioBase):\n    password: str = Field(..., min_length=6)\n    email: EmailStr  # Validaci\u00f3n de formato de email\n\nclass UsuarioSalida(UsuarioBase):\n    id: int\n    activo: bool = True\n\n    class Config:\n        from_attributes = True  # Antes: orm_mode = True (v1)\n</code></pre> <p>\u2705 <code>from_attributes = True</code> permite que FastAPI lea datos desde objetos ORM (como SQLAlchemy).</p>"},{"location":"content/curso2/#5-tipos-de-modelos-entrada-salida-comun","title":"5. Tipos de Modelos: Entrada, Salida, Com\u00fan","text":"<p>Organiza tus modelos para evitar fugas de datos.</p> <pre><code># models.py\nfrom pydantic import BaseModel, EmailStr\n\n# Modelo base compartido\nclass UsuarioBase(BaseModel):\n    email: EmailStr\n    nombre: str\n\n# Para crear (entrada)\nclass UsuarioCrear(UsuarioBase):\n    password: str\n\n# Para respuesta (salida)\nclass UsuarioSalida(UsuarioBase):\n    id: int\n    activo: bool\n\n    class Config:\n        from_attributes = True\n\n# Para actualizaci\u00f3n (opcional en todos los campos)\nclass UsuarioActualizar(BaseModel):\n    nombre: Optional[str] = None\n    activo: Optional[bool] = None\n</code></pre>"},{"location":"content/curso2/#6-validaciones-avanzadas-con-pydantic","title":"6. Validaciones Avanzadas con Pydantic","text":""},{"location":"content/curso2/#validadores-de-campo","title":"Validadores de campo","text":"<pre><code>from pydantic import field_validator\n\nclass Producto(BaseModel):\n    nombre: str\n    precio: float\n    categoria: str\n\n    @field_validator('precio')\n    @classmethod\n    def precio_positivo(cls, v):\n        if v &lt;= 0:\n            raise ValueError('El precio debe ser mayor que 0')\n        return v\n\n    @field_validator('categoria')\n    @classmethod\n    def categoria_permitida(cls, v):\n        categorias_validas = ['tecnolog\u00eda', 'ropa', 'hogar']\n        if v.lower() not in categorias_validas:\n            raise ValueError(f'Categor\u00eda debe ser una de: {\", \".join(categorias_validas)}')\n        return v.lower()\n</code></pre>"},{"location":"content/curso2/#validador-de-modelo-completo","title":"Validador de modelo completo","text":"<pre><code>from pydantic import model_validator\n\nclass Pedido(BaseModel):\n    producto: str\n    cantidad: int\n    precio_unitario: float\n    precio_total: float = None\n\n    @model_validator(mode='after')\n    def calcular_total(cls, model):\n        model.precio_total = model.cantidad * model.precio_unitario\n        return model\n</code></pre>"},{"location":"content/curso2/#7-rutas-y-parametros-en-fastapi","title":"7. Rutas y Par\u00e1metros en FastAPI","text":""},{"location":"content/curso2/#parametros-de-ruta-consulta-y-cuerpo","title":"Par\u00e1metros de ruta, consulta y cuerpo","text":"<pre><code>from fastapi import FastAPI, Path, Query, Body\n\n@app.post(\"/productos/{producto_id}\")\ndef crear_producto(\n    producto_id: int = Path(..., gt=0),\n    cantidad: int = Query(1, ge=1, le=100),\n    producto: Producto = Body(...)  # cuerpo esperado\n):\n    return {\n        \"producto_id\": producto_id,\n        \"cantidad\": cantidad,\n        \"producto\": producto\n    }\n</code></pre>"},{"location":"content/curso2/#sub-dependencias","title":"Sub-dependencias","text":"<pre><code>def pagination(skip: int = 0, limit: int = 10):\n    return {\"skip\": skip, \"limit\": limit}\n\n@app.get(\"/items/\")\ndef listar_items(pag: dict = Depends(pagination)):\n    return {\"items\": [], \"paginaci\u00f3n\": pag}\n</code></pre>"},{"location":"content/curso2/#8-manejo-de-errores-y-excepciones-personalizadas","title":"8. Manejo de Errores y Excepciones Personalizadas","text":""},{"location":"content/curso2/#excepciones-http","title":"Excepciones HTTP","text":"<pre><code>from fastapi import HTTPException\n\n@app.get(\"/usuarios/{user_id}\")\ndef obtener_usuario(user_id: int):\n    if user_id not in usuarios_db:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Usuario no encontrado\",\n            headers={\"X-Error\": \"No existe\"}\n        )\n    return usuarios_db[user_id]\n</code></pre>"},{"location":"content/curso2/#manejadores-globales","title":"Manejadores globales","text":"<pre><code>from fastapi import Request\nfrom fastapi.responses import JSONResponse\n\n@app.exception_handler(ValueError)\nasync def value_error_handler(request: Request, exc: ValueError):\n    return JSONResponse(\n        status_code=400,\n        content={\"error\": \"Valor inv\u00e1lido\", \"detalle\": str(exc)}\n    )\n</code></pre>"},{"location":"content/curso2/#9-autenticacion-y-seguridad-jwt-oauth2","title":"9. Autenticaci\u00f3n y Seguridad (JWT, OAuth2)","text":""},{"location":"content/curso2/#configuracion-de-jwt","title":"Configuraci\u00f3n de JWT","text":"<pre><code>from datetime import datetime, timedelta\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\n\nSECRET_KEY = \"tu_clave_secreta_muy_segura\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\ndef hash_password(password: str) -&gt; str:\n    return pwd_context.hash(password)\n\ndef verify_password(plain: str, hashed: str) -&gt; bool:\n    return pwd_context.verify(plain, hashed)\n\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n</code></pre>"},{"location":"content/curso2/#ruta-de-login","title":"Ruta de login","text":"<pre><code>from fastapi.security import OAuth2PasswordRequestForm\n\n@app.post(\"/token\")\ndef login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user = buscar_usuario(form_data.username)\n    if not user or not verify_password(form_data.password, user.password):\n        raise HTTPException(status_code=401, detail=\"Credenciales inv\u00e1lidas\")\n\n    token = create_access_token({\"sub\": user.email})\n    return {\"access_token\": token, \"token_type\": \"bearer\"}\n</code></pre>"},{"location":"content/curso2/#proteger-rutas","title":"Proteger rutas","text":"<pre><code>from fastapi import Depends, Security\n\ndef get_current_user(token: str = Security(get_token_header)):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        email: str = payload.get(\"sub\")\n        if email is None:\n            raise HTTPException(status_code=401, detail=\"Token inv\u00e1lido\")\n        return buscar_usuario_por_email(email)\n    except JWTError:\n        raise HTTPException(status_code=401, detail=\"Token inv\u00e1lido\")\n\n@app.get(\"/perfil\")\ndef perfil_usuario(usuario: UsuarioSalida = Depends(get_current_user)):\n    return usuario\n</code></pre>"},{"location":"content/curso2/#10-conexion-con-base-de-datos-sqlalchemy-pydantic","title":"10. Conexi\u00f3n con Base de Datos (SQLAlchemy + Pydantic)","text":""},{"location":"content/curso2/#modelo-sqlalchemy","title":"Modelo SQLAlchemy","text":"<pre><code># database.py\nfrom sqlalchemy import create_engine, Column, Integer, String, Boolean\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(DATABASE_URL, connect_args={\"check_same_thread\": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\nclass UsuarioDB(Base):\n    __tablename__ = \"usuarios\"\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    nombre = Column(String)\n    hashed_password = Column(String)\n    activo = Column(Boolean, default=True)\n</code></pre>"},{"location":"content/curso2/#uso-en-rutas","title":"Uso en rutas","text":"<pre><code>def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.post(\"/usuarios/\", response_model=UsuarioSalida)\ndef crear_usuario(usuario: UsuarioCrear, db: Session = Depends(get_db)):\n    hashed = hash_password(usuario.password)\n    db_usuario = UsuarioDB(**usuario.model_dump(), hashed_password=hashed)\n    db.add(db_usuario)\n    db.commit()\n    db.refresh(db_usuario)\n    return db_usuario\n</code></pre>"},{"location":"content/curso2/#11-documentacion-automatica-swagger-y-redoc","title":"11. Documentaci\u00f3n Autom\u00e1tica (Swagger y ReDoc)","text":"<p>FastAPI genera autom\u00e1ticamente:</p> <ul> <li>\u2705 <code>/docs</code> \u2192 Swagger UI (interfaz interactiva)</li> <li>\u2705 <code>/redoc</code> \u2192 ReDoc (documentaci\u00f3n elegante)</li> </ul>"},{"location":"content/curso2/#mejora-la-documentacion-con-descripciones","title":"Mejora la documentaci\u00f3n con descripciones","text":"<pre><code>class UsuarioCrear(BaseModel):\n    email: EmailStr = Field(..., description=\"Correo electr\u00f3nico del usuario\")\n    nombre: str = Field(..., min_length=2, description=\"Nombre completo\")\n    password: str = Field(..., min_length=6, description=\"Contrase\u00f1a segura\")\n</code></pre>"},{"location":"content/curso2/#12-pruebas-unitarias-con-pydantic-y-fastapi","title":"12. Pruebas Unitarias con Pydantic y FastAPI","text":"<pre><code># test_main.py\nfrom fastapi.testclient import TestClient\nfrom main import app\n\nclient = TestClient(app)\n\ndef test_saludo():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"mensaje\": \"\u00a1Hola desde FastAPI!\"}\n\ndef test_crear_usuario():\n    response = client.post(\"/usuarios/\", json={\n        \"email\": \"test@example.com\",\n        \"nombre\": \"Test User\",\n        \"password\": \"secret123\"\n    })\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"email\"] == \"test@example.com\"\n    assert \"id\" in data\n</code></pre> <p>Ejecuta pruebas:</p> <pre><code>pytest test_main.py -v\n</code></pre>"},{"location":"content/curso2/#13-despliegue-basico-docker-uvicorn","title":"13. Despliegue B\u00e1sico (Docker, Uvicorn)","text":""},{"location":"content/curso2/#dockerfile","title":"<code>Dockerfile</code>","text":"<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre>"},{"location":"content/curso2/#docker-composeyml","title":"<code>docker-compose.yml</code>","text":"<pre><code>version: '3.8'\nservices:\n  web:\n    build: .\n    ports:\n      - \"8000:80\"\n    environment:\n      - ENV=production\n</code></pre>"},{"location":"content/curso2/#14-ejemplo-completo-api-de-usuarios-y-publicaciones","title":"14. Ejemplo Completo: API de Usuarios y Publicaciones","text":"<p>\ud83d\udc49 Descarga el c\u00f3digo completo en: GitHub - fastapi-pydantic-demo</p>"},{"location":"content/curso2/#estructura-del-proyecto","title":"Estructura del proyecto","text":"<pre><code>proyecto/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 schemas.py\n\u251c\u2500\u2500 database.py\n\u251c\u2500\u2500 auth.py\n\u251c\u2500\u2500 crud.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"content/curso2/#funcionalidades-incluidas","title":"Funcionalidades incluidas:","text":"<ul> <li>\u2705 Registro y login de usuarios</li> <li>\u2705 Crear, leer, actualizar y eliminar publicaciones</li> <li>\u2705 Autenticaci\u00f3n con JWT</li> <li>\u2705 Validaci\u00f3n con Pydantic</li> <li>\u2705 Paginaci\u00f3n</li> <li>\u2705 Manejo de errores</li> <li>\u2705 Pruebas unitarias</li> <li>\u2705 Documentaci\u00f3n autom\u00e1tica</li> </ul>"},{"location":"content/curso2/#15-mejores-practicas-y-consejos-profesionales","title":"15. Mejores Pr\u00e1cticas y Consejos Profesionales","text":"Pr\u00e1ctica Recomendaci\u00f3n \ud83d\udcc1 Estructura modular Separa <code>routers</code>, <code>models</code>, <code>schemas</code>, <code>crud</code>, <code>auth</code> \ud83d\udd10 Nunca expongas contrase\u00f1as Usa modelos de salida sin <code>password</code> \ud83e\udde9 Usa <code>from_attributes = True</code> Para compatibilidad con ORM \ud83d\udd04 Evita <code>dict()</code> en validaci\u00f3n Usa <code>model_validate()</code> (v2) \ud83e\uddea Escribe pruebas Asegura que tus validaciones funcionen \ud83d\udcc8 Usa <code>limit</code> y <code>skip</code> Para paginaci\u00f3n y evitar sobrecarga \ud83d\udd0d Usa <code>exclude_unset</code> o <code>exclude_none</code> Al serializar para JSON limpio \ud83e\udde0 Usa <code>TypeVar</code> y <code>Generic</code> Para respuestas gen\u00e9ricas"},{"location":"content/curso2/#16-recursos-y-enlaces-utiles","title":"16. Recursos y Enlaces \u00datiles","text":"<ul> <li>\ud83d\udcd8 Documentaci\u00f3n Oficial de FastAPI</li> <li>\ud83d\udcd8 Documentaci\u00f3n de Pydantic v2</li> <li>\ud83d\udc33 Docker + FastAPI</li> <li>\ud83d\udd10 Seguridad en FastAPI</li> <li>\ud83e\uddea Testing en FastAPI</li> <li>\ud83d\udcfa Curso Gratuito en YouTube (en espa\u00f1ol)</li> <li>\ud83d\udcac Comunidad en Discord de FastAPI</li> </ul>"},{"location":"content/p1/","title":"Introducci\u00f3n a FastAPI y APIs REST","text":"<p>Objetivo de la clase: Comprender los fundamentos de FastAPI y las APIs REST, configurar el entorno de desarrollo y crear una API b\u00e1sica con rutas y respuestas JSON.</p>"},{"location":"content/p1/#1-que-es-fastapi-ventajas-frente-a-otros-frameworks","title":"1. \u00bfQu\u00e9 es FastAPI? Ventajas frente a otros frameworks","text":"<p>Teor\u00eda - Definici\u00f3n de FastAPI:   FastAPI es un framework moderno y de alto rendimiento para construir APIs con Python, basado en est\u00e1ndares como OpenAPI y JSON Schema. Utiliza programaci\u00f3n as\u00edncrona (async/await) y tipado est\u00e1tico con Pydantic para validaci\u00f3n de datos.</p> <ul> <li>Ventajas principales:  </li> <li>Rendimiento: Comparable a frameworks como Node.js o Go, gracias a Starlette y Uvicorn (ASGI).  </li> <li>Documentaci\u00f3n autom\u00e1tica: Genera documentaci\u00f3n interactiva con Swagger y ReDoc.  </li> <li>Validaci\u00f3n autom\u00e1tica: Usa Pydantic para validar datos de entrada y salida.  </li> <li>Soporte as\u00edncrono: Ideal para aplicaciones con alta concurrencia.  </li> <li>Facilidad de uso: Sintaxis simple y moderna, compatible con Python 3.8+.  </li> <li>Comparaci\u00f3n con otros frameworks:  <ul> <li>Flask: M\u00e1s simple, pero menos performante y sin soporte nativo para async ni documentaci\u00f3n autom\u00e1tica.  </li> <li>Django REST Framework: M\u00e1s robusto para proyectos grandes, pero m\u00e1s pesado y menos enfocado en APIs r\u00e1pidas.  </li> </ul> </li> </ul>"},{"location":"content/p1/#2-conceptos-clave-de-apis-rest","title":"2. Conceptos clave de APIs REST","text":"<p>Teor\u00eda - \u00bfQu\u00e9 es una API REST?:  </p> <p>Una API REST (Representational State Transfer) es un estilo arquitect\u00f3nico para dise\u00f1ar aplicaciones web, basado en recursos identificados por URLs, operaciones mediante m\u00e9todos HTTP y respuestas en formatos como JSON.  </p> <ul> <li> <p>M\u00e9todos HTTP principales:  </p> </li> <li> <p>GET: Obtener datos (ej. lista de usuarios).  </p> </li> <li>POST: Crear un nuevo recurso (ej. registrar un usuario).  </li> <li>PUT/PATCH: Actualizar un recurso existente.  </li> <li>DELETE: Eliminar un recurso.  </li> <li> <p>C\u00f3digos de estado HTTP:  </p> </li> <li> <p>2xx: \u00c9xito (200 OK, 201 Created).  </p> </li> <li>4xx: Errores del cliente (400 Bad Request, 404 Not Found).  </li> <li>5xx: Errores del servidor (500 Internal Server Error).  </li> <li> <p>Buenas pr\u00e1cticas REST:  </p> </li> <li> <p>URLs descriptivas (ej. <code>/users/{id}</code> en lugar de <code>/get_user</code>).  </p> </li> <li>Uso consistente de m\u00e9todos HTTP y c\u00f3digos de estado.  </li> <li>Respuestas en JSON estandarizadas.</li> </ul>"},{"location":"content/p1/#3-instalacion-y-configuracion-del-entorno-fastapi-uvicorn-30-minutos","title":"3. Instalaci\u00f3n y configuraci\u00f3n del entorno (FastAPI, Uvicorn) (30 minutos)","text":"<p>Teor\u00eda - Requisitos: </p> <ul> <li>Python 3.8 o superior.  </li> <li>Entorno virtual (venv o poetry).  </li> <li> <p>Instalaci\u00f3n de dependencias: <code>fastapi</code>, <code>uvicorn</code>.  </p> </li> <li> <p>Pasos para configurar el entorno: </p> </li> <li> <p>Crear un entorno virtual: <code>python -m venv env</code>.  </p> </li> <li>Activar el entorno: <code>source env/bin/activate</code> (Linux/Mac) o <code>env\\Scripts\\activate</code> (Windows).  </li> <li> <p>Instalar FastAPI y Uvicorn: <code>pip install fastapi uvicorn</code>.  </p> </li> <li> <p>Uvicorn: Servidor ASGI que permite ejecutar aplicaciones FastAPI de forma eficiente.</p> </li> </ul> <p>Pr\u00e1ctica - Ejercicio guiado: </p> <ol> <li>Configurar un entorno virtual en la m\u00e1quina de cada estudiante.  </li> <li>Instalar FastAPI y Uvicorn.  </li> <li>Crear un archivo <code>requirements.txt</code> con las dependencias.  </li> <li>Verificaci\u00f3n: Ejecutar <code>uvicorn --version</code> para confirmar la instalaci\u00f3n.</li> </ol>"},{"location":"content/p1/#4-creacion-de-la-primera-api-rutas-basicas-y-respuestas-json-60-minutos","title":"4. Creaci\u00f3n de la primera API: rutas b\u00e1sicas y respuestas JSON (60 minutos)","text":"<p>Teor\u00eda - Estructura b\u00e1sica de una aplicaci\u00f3n FastAPI:  </p> <ul> <li>Importar <code>FastAPI</code> y crear una instancia.  </li> <li>Definir rutas con decoradores (<code>@app.get</code>, <code>@app.post</code>, etc.).  </li> <li>Devolver respuestas en formato JSON.  </li> <li>Ejemplo simple:</li> </ul> <p><pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"\u00a1Hola, FastAPI!\"}\n</code></pre> - Ejecutar la API:   - Comando: <code>uvicorn main:app --reload</code>.   - Acceso a la API en <code>http://localhost:8000</code>.   - Documentaci\u00f3n autom\u00e1tica en <code>http://localhost:8000/docs</code>.</p> <p>Pr\u00e1ctica - Ejercicio guiado:  </p> <ol> <li>Crear un archivo <code>main.py</code> con la siguiente API:  <ul> <li>Ruta <code>GET /</code>: Devuelve un mensaje de bienvenida.  </li> <li>Ruta <code>GET /items/{item_id}</code>: Devuelve un JSON con el ID del item y un nombre (pasado como query parameter).  </li> <li>Ruta <code>POST /items</code>: Recibe un JSON con un campo <code>name</code> y devuelve un mensaje confirmando la creaci\u00f3n.  </li> </ul> </li> <li>Ejecutar la API con Uvicorn y probar los endpoints con un navegador o Postman.  </li> <li> <p>Ejercicio individual: </p> </li> <li> <p>Extender la API para incluir una ruta <code>GET /users/{user_id}</code> que devuelva un JSON con el ID del usuario y un nombre ficticio.  </p> </li> <li>Probar la documentaci\u00f3n autom\u00e1tica en <code>/docs</code>.</li> </ol>"},{"location":"content/p1/#material-complementario","title":"Material complementario","text":"<ul> <li>C\u00f3digo de ejemplo: Repositorio con el c\u00f3digo de la clase (subido a GitHub o compartido en la plataforma del curso).  </li> <li>Lecturas recomendadas:  </li> <li>Documentaci\u00f3n de FastAPI: https://fastapi.tiangolo.com/.  </li> <li>Gu\u00eda de REST: https://restfulapi.net/.  </li> <li>Herramientas: Postman o cURL para probar endpoints.</li> </ul>"},{"location":"content/p1/#actividad-de-consulta","title":"Actividad de consulta","text":"<p>Preguntas generales dise\u00f1adas para evaluar y reforzar los conocimientos adquiridos en la Clase 1: Introducci\u00f3n a FastAPI y APIs REST. Las preguntas cubren los temas tratados: introducci\u00f3n a FastAPI, conceptos de APIs REST, instalaci\u00f3n del entorno y creaci\u00f3n de una API b\u00e1sica.</p>"},{"location":"content/p1/#preguntas-generales","title":"Preguntas generales","text":"<ol> <li> <p>\u00bfQu\u00e9 es FastAPI y cu\u00e1les son sus principales caracter\u00edsticas que lo diferencian de otros frameworks como Flask o Django REST Framework? (Eval\u00faa la comprensi\u00f3n de la definici\u00f3n y ventajas de FastAPI.)</p> </li> <li> <p>Explica qu\u00e9 es una API REST y describe las caracter\u00edsticas principales que debe cumplir para considerarse RESTful. (Eval\u00faa el entendimiento del concepto de APIs REST.)</p> </li> <li> <p>\u00bfCu\u00e1les son los m\u00e9todos HTTP m\u00e1s comunes utilizados en una API REST y qu\u00e9 prop\u00f3sito tiene cada uno? (Eval\u00faa el conocimiento de los m\u00e9todos HTTP.)</p> </li> <li> <p>\u00bfQu\u00e9 significan los c\u00f3digos de estado HTTP 200, 404 y 500? Proporciona un ejemplo de uso para cada uno en el contexto de una API. (Eval\u00faa la comprensi\u00f3n de los c\u00f3digos de estado HTTP.)</p> </li> <li> <p>\u00bfPor qu\u00e9 es importante usar un entorno virtual al desarrollar una aplicaci\u00f3n con FastAPI? \u00bfC\u00f3mo se crea uno en Python? (Eval\u00faa el conocimiento sobre la configuraci\u00f3n del entorno.)</p> </li> <li> <p>\u00bfQu\u00e9 funci\u00f3n cumple Uvicorn en una aplicaci\u00f3n FastAPI y c\u00f3mo se ejecuta una API usando este servidor? (Eval\u00faa la comprensi\u00f3n de Uvicorn y su rol en FastAPI.)</p> </li> <li> <p>\u00bfC\u00f3mo se define una ruta b\u00e1sica en FastAPI? Escribe un ejemplo de c\u00f3digo para una ruta GET que devuelva un mensaje en formato JSON. (Eval\u00faa la capacidad de crear rutas b\u00e1sicas y devolver respuestas JSON.)</p> </li> <li> <p>\u00bfQu\u00e9 ventajas ofrece la documentaci\u00f3n autom\u00e1tica de FastAPI y c\u00f3mo se puede acceder a ella una vez que la API est\u00e1 en ejecuci\u00f3n? (Eval\u00faa el conocimiento sobre la documentaci\u00f3n autom\u00e1tica con Swagger/ReDoc.)</p> </li> <li> <p>\u00bfQu\u00e9 es Pydantic y c\u00f3mo se relaciona con FastAPI en el contexto de la creaci\u00f3n de APIs? (Eval\u00faa la comprensi\u00f3n inicial de Pydantic, aunque se profundice en clases posteriores.)</p> </li> <li> <p>Imagina que necesitas crear una ruta en FastAPI que reciba un par\u00e1metro din\u00e1mico en la URL (por ejemplo, un ID de usuario). Escribe el c\u00f3digo necesario y explica c\u00f3mo se procesa ese par\u00e1metro. (Eval\u00faa la aplicaci\u00f3n pr\u00e1ctica de rutas din\u00e1micas con par\u00e1metros.)</p> </li> </ol>"},{"location":"content/p2/","title":"Entornos Virtuales en Python e Introducci\u00f3n a FastAPI y APIs REST \ud83d\udc0d","text":"<p>\u00a1Bienvenidos a este tutorial definitivo sobre entornos virtuales en Python! \ud83c\udf89 Los entornos virtuales son una herramienta esencial para cualquier desarrollador de Python, ya que permiten aislar dependencias, gestionar proyectos y evitar conflictos entre paquetes. En este tutorial, aprender\u00e1s desde los conceptos b\u00e1sicos hasta t\u00e9cnicas avanzadas, con ejemplos pr\u00e1cticos, diagramas visuales y consejos \u00fatiles, todo presentado en un formato claro y atractivo. \u00a1Empecemos! \ud83d\ude80</p>"},{"location":"content/p2/#objetivo-del-tutorial","title":"Objetivo del Tutorial \ud83c\udfaf","text":"<p>\u2705 Dominar los entornos virtuales en Python Al finalizar, podr\u00e1s:</p> <ul> <li>Comprender qu\u00e9 son los entornos virtuales y por qu\u00e9 son importantes.</li> <li>Crear, activar, usar y eliminar entornos virtuales con <code>venv</code> y otras herramientas.</li> <li>Gestionar dependencias y exportar requisitos.</li> <li>Resolver problemas comunes y aplicar mejores pr\u00e1cticas.</li> </ul>"},{"location":"content/p2/#contenido-del-tutorial","title":"Contenido del Tutorial \ud83d\udcda","text":""},{"location":"content/p2/#1-que-es-un-entorno-virtual","title":"1. \u00bfQu\u00e9 es un Entorno Virtual? \ud83c\udf10","text":"<p>Un entorno virtual en Python es un espacio aislado que contiene una copia del int\u00e9rprete de Python y sus bibliotecas, permitiendo instalar paquetes espec\u00edficos para un proyecto sin afectar otros proyectos o el sistema global. Imagina que cada entorno virtual es una \"caja\" independiente con su propio conjunto de herramientas.</p>"},{"location":"content/p2/#por-que-usar-entornos-virtuales","title":"\u00bfPor qu\u00e9 usar entornos virtuales? \ud83e\udd14","text":"<ul> <li>Aislamiento: Evita conflictos entre versiones de paquetes (ej. <code>numpy 1.18</code> vs. <code>numpy 1.24</code>).</li> <li>Organizaci\u00f3n: Mantiene las dependencias de cada proyecto separadas.</li> <li>Portabilidad: Facilita compartir proyectos con archivos de requisitos.</li> <li>Seguridad: Protege el sistema global de instalaciones no deseadas.</li> </ul>"},{"location":"content/p2/#flujo-de-trabajo-con-entornos-virtuales","title":"Flujo de trabajo con entornos virtuales","text":"<p>Este diagrama muestra c\u00f3mo funcionan los entornos virtuales:</p> <pre><code>graph TD\n    A[Sistema Global &lt;br&gt; Python 3.10] --&gt;|Sin entorno virtual| B[Proyecto A &lt;br&gt; numpy 1.18, pandas 1.3]\n    A --&gt;|Sin entorno virtual| C[Proyecto B &lt;br&gt; numpy 1.24, pandas 2.0]\n    B --&gt; D{Conflicto de versiones}\n    C --&gt; D\n    E[Entorno Virtual A &lt;br&gt; Python 3.10, numpy 1.18, pandas 1.3] --&gt;|Aislamiento| F[Proyecto A]\n    G[Entorno Virtual B &lt;br&gt; Python 3.10, numpy 1.24, pandas 2.0] --&gt;|Aislamiento| H[Proyecto B]</code></pre> <p>Dato curioso</p> <p>Los entornos virtuales fueron introducidos en Python 3.3 con el m\u00f3dulo <code>venv</code>, aunque herramientas como <code>virtualenv</code> exist\u00edan antes.</p>"},{"location":"content/p2/#2-herramientas-para-entornos-virtuales","title":"2. Herramientas para Entornos Virtuales \ud83d\udee0\ufe0f","text":"<p>Python ofrece varias herramientas para crear entornos virtuales. Aqu\u00ed exploramos las m\u00e1s comunes:</p>"},{"location":"content/p2/#a-venv-recomendado","title":"a) <code>venv</code> (Recomendado)","text":"<ul> <li>Incluido en Python 3.3+.</li> <li>Ligero, est\u00e1ndar y sin dependencias externas.</li> <li>Ideal para la mayor\u00eda de los proyectos.</li> </ul>"},{"location":"content/p2/#b-virtualenv","title":"b) <code>virtualenv</code>","text":"<ul> <li>Herramienta de terceros m\u00e1s antigua.</li> <li>Compatible con Python 2 y versiones antiguas de Python 3.</li> <li>Ofrece caracter\u00edsticas adicionales (ej. soporte para m\u00faltiples int\u00e9rpretes).</li> </ul>"},{"location":"content/p2/#c-otros-breve-mencion","title":"c) Otros (Breve menci\u00f3n)","text":"<ul> <li><code>Conda</code>: Popular en ciencia de datos, gestiona entornos y paquetes no-Python.</li> <li><code>Poetry</code>/<code>Pipenv</code>: Combinan gesti\u00f3n de entornos y dependencias.</li> </ul> <p>Consejo</p> <p>Usa <code>venv</code> para simplicidad y compatibilidad, a menos que necesites funciones espec\u00edficas de otras herramientas.</p>"},{"location":"content/p2/#3-configuracion-inicial-instalacion-de-python","title":"3. Configuraci\u00f3n Inicial: Instalaci\u00f3n de Python \ud83d\udce6","text":"<p>Antes de crear entornos virtuales, aseg\u00farate de tener Python instalado.</p>"},{"location":"content/p2/#pasos","title":"Pasos","text":"<ol> <li>Descarga Python:</li> <li>Visita python.org y descarga Python 3.7+.</li> <li> <p>En Windows, marca \"Agregar Python al PATH\" durante la instalaci\u00f3n.</p> </li> <li> <p>Verifica la instalaci\u00f3n:</p> </li> </ol> <pre><code>python --version\n</code></pre> <p>Salida esperada: <pre><code>Python 3.10.5\n</code></pre></p> <ol> <li>Instala <code>pip</code> (si no est\u00e1 incluido):</li> </ol> <pre><code>python -m ensurepip --upgrade\npython -m pip install --upgrade pip\n</code></pre>"},{"location":"content/p2/#diagrama-de-instalacion","title":"Diagrama de instalaci\u00f3n","text":"<pre><code>flowchart TD\n    A[Inicio] --&gt; B{\u00bfPython instalado?}\n    B -- No --&gt; C[Descargar Python &lt;br&gt; python.org]\n    B -- S\u00ed --&gt; D{\u00bfpip instalado?}\n    C --&gt; E[Instalar Python &lt;br&gt; Agregar al PATH]\n    E --&gt; D\n    D -- No --&gt; F[Instalar pip &lt;br&gt; ensurepip]\n    D -- S\u00ed --&gt; G[Listo para crear &lt;br&gt; entornos virtuales]\n    F --&gt; G</code></pre>"},{"location":"content/p2/#4-crear-y-gestionar-entornos-virtuales-con-venv","title":"4. Crear y Gestionar Entornos Virtuales con <code>venv</code> \u2699\ufe0f","text":"<p>El m\u00f3dulo <code>venv</code> es la forma est\u00e1ndar de crear entornos virtuales en Python. A continuaci\u00f3n, te guiamos paso a paso.</p>"},{"location":"content/p2/#paso-1-crear-un-entorno-virtual","title":"Paso 1: Crear un entorno virtual","text":"<ol> <li>Navega al directorio de tu proyecto:</li> </ol> <pre><code>cd mi_proyecto\n</code></pre> <ol> <li>Crea un entorno virtual (llamado <code>venv</code> por convenci\u00f3n):</li> </ol> <pre><code>python -m venv .venv\n</code></pre> <p>Esto crea una carpeta <code>.venv/</code> con: - Un int\u00e9rprete de Python aislado. - Una copia de <code>pip</code>. - Directorios para paquetes (<code>site-packages</code>).</p>"},{"location":"content/p2/#paso-2-activar-el-entorno-virtual","title":"Paso 2: Activar el entorno virtual","text":"<p>Activa el entorno para que los comandos <code>python</code> y <code>pip</code> usen la versi\u00f3n aislada:</p> <ul> <li>Windows:</li> </ul> <pre><code>.venv\\Scripts\\activate\n</code></pre> <ul> <li>Linux/macOS:</li> </ul> <pre><code>source .venv/bin/activate\n</code></pre> <p>Salida esperada (prompt cambia): <pre><code>(venv) user@machine:~/mi_proyecto$\n</code></pre></p>"},{"location":"content/p2/#paso-3-instalar-paquetes","title":"Paso 3: Instalar paquetes","text":"<p>Con el entorno activado, instala paquetes con <code>pip</code>:</p> <pre><code>pip install requests\n</code></pre> <p>Verifica los paquetes instalados:</p> <pre><code>pip list\n</code></pre> <p>Salida ejemplo: <pre><code>Package    Version\n---------- -------\npip        22.3.1\nrequests   2.28.1\nsetuptools 65.5.0\n</code></pre></p>"},{"location":"content/p2/#paso-4-desactivar-el-entorno","title":"Paso 4: Desactivar el entorno","text":"<p>Para salir del entorno virtual:</p> <pre><code>deactivate\n</code></pre> <p>El prompt vuelve a la normalidad.</p>"},{"location":"content/p2/#diagrama-de-gestion-de-entornos-virtuales","title":"Diagrama de gesti\u00f3n de entornos virtuales","text":"<pre><code>sequenceDiagram\n    actor User\n    participant Sistema\n    User-&gt;&gt;Sistema: python -m venv .venv\n    Sistema--&gt;&gt;User: Entorno creado en .venv/\n    User-&gt;&gt;Sistema: source .venv/bin/activate\n    Sistema--&gt;&gt;User: Entorno activado\n    User-&gt;&gt;Sistema: pip install requests\n    Sistema--&gt;&gt;User: Paquete instalado en .venv/\n    User-&gt;&gt;Sistema: deactivate\n    Sistema--&gt;&gt;User: Entorno desactivado</code></pre> <p>\u00a1Logro desbloqueado!</p> <p>Has creado y activado tu primer entorno virtual. \u00a1Est\u00e1s listo para desarrollar proyectos aislados!</p>"},{"location":"content/p2/#5-gestion-de-dependencias","title":"5. Gesti\u00f3n de Dependencias \ud83d\udccb","text":"<p>Para compartir tu proyecto, necesitas documentar las dependencias. Aqu\u00ed te mostramos c\u00f3mo hacerlo.</p>"},{"location":"content/p2/#exportar-dependencias","title":"Exportar dependencias","text":"<p>Crea un archivo <code>requirements.txt</code> con las dependencias instaladas:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Contenido ejemplo: <pre><code>requests==2.28.1\nurllib3==1.26.12\n</code></pre></p>"},{"location":"content/p2/#instalar-dependencias-desde-requirementstxt","title":"Instalar dependencias desde <code>requirements.txt</code>","text":"<p>En otro sistema o entorno, instala las dependencias:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Buena pr\u00e1ctica</p> <p>Incluye <code>requirements.txt</code> en tu repositorio Git para facilitar la colaboraci\u00f3n.</p>"},{"location":"content/p2/#6-uso-de-entornos-virtuales-en-proyectos-reales","title":"6. Uso de Entornos Virtuales en Proyectos Reales \ud83d\udda5\ufe0f","text":"<p>Veamos un ejemplo pr\u00e1ctico con un proyecto que usa FastAPI.</p>"},{"location":"content/p2/#estructura-del-proyecto","title":"Estructura del proyecto","text":"<pre><code>mi_proyecto/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 .venv/\n</code></pre>"},{"location":"content/p2/#codigo-de-ejemplo-mainpy","title":"C\u00f3digo de ejemplo (<code>main.py</code>)","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"\u00a1Hola, mundo!\"}\n</code></pre>"},{"location":"content/p2/#pasos_1","title":"Pasos","text":"<ol> <li>Crea el entorno virtual:</li> </ol> <pre><code>python -m venv .venv\n</code></pre> <ol> <li>Activa el entorno:</li> </ol> <pre><code>source .venv/bin/activate  # Linux/macOS\n.venv\\Scripts\\activate     # Windows\n</code></pre> <ol> <li>Instala FastAPI y Uvicorn:</li> </ol> <pre><code>pip install fastapi uvicorn\n</code></pre> <ol> <li>Exporta las dependencias:</li> </ol> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <ol> <li>Ejecuta la aplicaci\u00f3n:</li> </ol> <pre><code>uvicorn main:app --reload\n</code></pre> <p>Visita <code>http://127.0.0.1:8000</code> para ver la respuesta.</p> <p>Pr\u00e1ctica recomendada</p> <p>Crea un entorno virtual por proyecto para mantener las dependencias organizadas.</p>"},{"location":"content/p2/#introduccion-a-fastapi-y-apis-rest","title":"Introducci\u00f3n a FastAPI y APIs REST \ud83c\udf1f","text":"<p>\u00a1Bienvenidos al curso de FastAPI! En esta primera clase, exploraremos los fundamentos de FastAPI, las APIs REST y c\u00f3mo configurar tu entorno de desarrollo para crear APIs modernas y r\u00e1pidas con Python. A trav\u00e9s de explicaciones, ejemplos pr\u00e1cticos y diagramas visuales, estar\u00e1s listo para construir tu primera API. \u00a1Empecemos! \ud83d\ude80</p>"},{"location":"content/p2/#objetivo-de-la-clase","title":"Objetivo de la Clase \ud83c\udfaf","text":"<p>\u2705 Comprender FastAPI y configurar el entorno de desarrollo Al finalizar esta clase, entender\u00e1s qu\u00e9 es FastAPI, sus ventajas, los conceptos clave de las APIs REST y tendr\u00e1s un entorno funcional para desarrollar aplicaciones.</p>"},{"location":"content/p2/#contenido-de-la-clase","title":"Contenido de la Clase \ud83d\udcda","text":""},{"location":"content/p2/#1-que-es-fastapi-ventajas-y-comparacion-con-otros-frameworks","title":"1. \u00bfQu\u00e9 es FastAPI? Ventajas y Comparaci\u00f3n con Otros Frameworks \ud83d\udee0\ufe0f","text":"<p>FastAPI es un framework web moderno para construir APIs con Python, dise\u00f1ado para ser r\u00e1pido, f\u00e1cil de usar y compatible con est\u00e1ndares como ASGI (Asynchronous Server Gateway Interface). Creado por Sebasti\u00e1n Ram\u00edrez, FastAPI combina rendimiento, tipado y documentaci\u00f3n autom\u00e1tica, lo que lo hace ideal para proyectos de cualquier escala.</p>"},{"location":"content/p2/#arquitectura-de-fastapi","title":"Arquitectura de FastAPI","text":"<p>El siguiente diagrama muestra c\u00f3mo FastAPI procesa solicitudes:</p> <pre><code>graph TD\n    A[\"Cliente\\n(Navegador, App)\"] --&gt;|Solicitud HTTP| B[\"Uvicorn\\n(Servidor ASGI)\"]\n    B --&gt; C[\"FastAPI\\n(Framework)\"]\n    C --&gt; D[\"Starlette\\n(Routing, Middlewares)\"]\n    C --&gt; E[\"Pydantic\\n(Validaci\u00f3n de datos)\"]\n    D --&gt; F[\"Endpoints\\n(L\u00f3gica de negocio)\"]\n    E --&gt; F\n    F --&gt;|Respuesta JSON| B\n    B --&gt;|Respuesta HTTP| A</code></pre>"},{"location":"content/p2/#por-que-elegir-fastapi","title":"\u00bfPor qu\u00e9 elegir FastAPI? \ud83c\udf08","text":"<ul> <li>Rendimiento: Comparable con Node.js y Go, gracias a Starlette y Uvicorn.</li> <li>Tipado y validaci\u00f3n: Usa Pydantic para validar datos autom\u00e1ticamente.</li> <li>Documentaci\u00f3n autom\u00e1tica: Genera interfaces con Swagger UI y ReDoc.</li> <li>Asincron\u00eda: Soporta <code>async/await</code> para aplicaciones de alto rendimiento.</li> <li>Simplicidad: Sintaxis clara y moderna.</li> </ul>"},{"location":"content/p2/#comparacion-con-otros-frameworks","title":"Comparaci\u00f3n con otros frameworks \ud83d\udcca","text":"Framework Velocidad Tipado Documentaci\u00f3n Autom\u00e1tica Asincron\u00eda Curva de Aprendizaje FastAPI \u2b50\u2b50\u2b50\u2b50\u2b50 S\u00ed S\u00ed (Swagger, ReDoc) S\u00ed Media Flask \u2b50\u2b50\u2b50 No No No Baja Django \u2b50\u2b50\u2b50 Parcial No Parcial Alta <p>Dato curioso</p> <p>FastAPI se inspira en Flask, pero a\u00f1ade soporte as\u00edncrono y validaci\u00f3n autom\u00e1tica, revolucionando el desarrollo de APIs en Python.</p>"},{"location":"content/p2/#2-conceptos-de-apis-rest-metodos-http-endpoints-y-json","title":"2. Conceptos de APIs REST: M\u00e9todos HTTP, Endpoints y JSON \ud83c\udf10","text":"<p>Una API REST (Representational State Transfer) es un estilo arquitect\u00f3nico para dise\u00f1ar aplicaciones web que permite la comunicaci\u00f3n entre sistemas mediante HTTP. Es la base de muchas aplicaciones modernas, conectando frontends (como React) con backends.</p>"},{"location":"content/p2/#componentes-clave-de-una-api-rest","title":"Componentes clave de una API REST \ud83d\udcdd","text":"<ul> <li>Endpoints: URLs que representan recursos (ej. <code>/users</code>, <code>/projects/1</code>).</li> <li>M\u00e9todos HTTP:</li> <li><code>GET</code>: Obtener datos.</li> <li><code>POST</code>: Crear recursos.</li> <li><code>PUT</code>/<code>PATCH</code>: Actualizar recursos.</li> <li><code>DELETE</code>: Eliminar recursos.</li> <li>JSON: Formato para enviar y recibir datos.</li> <li>C\u00f3digos de estado HTTP: Ej. <code>200 OK</code>, <code>404 Not Found</code>.</li> </ul>"},{"location":"content/p2/#flujo-de-una-solicitud-rest","title":"Flujo de una solicitud REST","text":"<p>Este diagrama ilustra el proceso de una solicitud REST:</p> <pre><code>sequenceDiagram\n    participant Cliente\n    participant Servidor\n    Cliente-&gt;&gt;Servidor: GET /projects\n    Servidor-&gt;&gt;Cliente: 200 OK &lt;br&gt; { \"projects\": [...] }\n    Cliente-&gt;&gt;Servidor: POST /projects &lt;br&gt; { \"name\": \"Proyecto A\" }\n    Servidor-&gt;&gt;Cliente: 201 Created &lt;br&gt; { \"id\": 1, \"name\": \"Proyecto A\" }</code></pre>"},{"location":"content/p2/#ejemplo-de-solicitud-rest","title":"Ejemplo de solicitud REST \ud83d\udda5\ufe0f","text":"<pre><code>GET /api/projects HTTP/1.1\nHost: example.com\nAccept: application/json\n</code></pre> <p>Respuesta:</p> <pre><code>{\n  \"projects\": [\n    {\"id\": 1, \"name\": \"Proyecto A\", \"status\": \"active\"},\n    {\"id\": 2, \"name\": \"Proyecto B\", \"status\": \"completed\"}\n  ]\n}\n</code></pre> <p>Consejo pr\u00e1ctico</p> <p>Aprende los c\u00f3digos de estado HTTP m\u00e1s comunes (200, 201, 400, 404, 500) para depurar tus APIs eficazmente.</p>"},{"location":"content/p2/#3-instalacion-de-fastapi-uvicorn-y-python","title":"3. Instalaci\u00f3n de FastAPI, Uvicorn y Python \u2699\ufe0f","text":"<p>Para desarrollar con FastAPI, necesitas un entorno configurado. A continuaci\u00f3n, te guiamos paso a paso.</p>"},{"location":"content/p2/#proceso-de-configuracion","title":"Proceso de configuraci\u00f3n","text":"<p>Este diagrama muestra los pasos para configurar el entorno:</p> <pre><code>flowchart TD\n    A[Inicio] --&gt; B{\u00bfPython instalado?}\n    B -- No --&gt; C[Instalar Python 3.7+]\n    B -- S\u00ed --&gt; D[Crear entorno virtual]\n    C --&gt; D\n    D --&gt; E[Activar entorno virtual]\n    E --&gt; F[Instalar FastAPI y Uvicorn]\n    F --&gt; G[Crear archivo main.py]\n    G --&gt; H[Ejecutar API con Uvicorn]\n    H --&gt; I[Probar API en navegador]</code></pre>"},{"location":"content/p2/#paso-1-instalar-python","title":"Paso 1: Instalar Python \ud83d\udce6","text":"<ol> <li>Descarga Python 3.7+ desde python.org.</li> <li>Verifica la instalaci\u00f3n:</li> </ol> <pre><code>python --version\n</code></pre>"},{"location":"content/p2/#paso-2-crear-un-entorno-virtual","title":"Paso 2: Crear un entorno virtual \ud83c\udf10","text":"<pre><code>python -m venv .venv\n</code></pre> <p>Activa el entorno:</p> <ul> <li>Windows: <code>.venv\\Scripts\\activate</code></li> <li>Linux/macOS: <code>source .venv/bin/activate</code></li> </ul>"},{"location":"content/p2/#paso-3-instalar-fastapi-y-uvicorn","title":"Paso 3: Instalar FastAPI y Uvicorn \ud83d\udcf2","text":"<pre><code>pip install fastapi uvicorn\n</code></pre>"},{"location":"content/p2/#paso-4-crear-tu-primera-api","title":"Paso 4: Crear tu primera API \ud83c\udf89","text":"<p>Crea un archivo <code>main.py</code>:</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/projects\")\ndef get_projects():\n    return {\"projects\": [{\"id\": 1, \"name\": \"Proyecto A\", \"status\": \"active\"}]}\n</code></pre> <p>Ejecuta la API:</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>Visita <code>http://127.0.0.1:8000/projects</code> para ver la respuesta JSON o <code>http://127.0.0.1:8000/docs</code> para la documentaci\u00f3n.</p> <p>\u00a1Primer logro!</p> <p>Has creado tu primera API con FastAPI. \u00a1El cielo es el l\u00edmite!</p>"},{"location":"content/p2/#practica-de-la-clase","title":"Pr\u00e1ctica de la Clase \ud83d\udda5\ufe0f","text":"<p>\ud83c\udfaf Tarea pr\u00e1ctica: Crea una API con un endpoint <code>/projects</code> que devuelva una lista de tres proyectos en JSON, cada uno con <code>id</code>, <code>name</code> y <code>status</code>.</p> <p>C\u00f3digo de ejemplo:</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/projects\")\ndef get_projects():\n    return {\n        \"projects\": [\n            {\"id\": 1, \"name\": \"Proyecto A\", \"status\": \"active\"},\n            {\"id\": 2, \"name\": \"Proyecto B\", \"status\": \"completed\"},\n            {\"id\": 3, \"name\": \"Proyecto C\", \"status\": \"pending\"}\n        ]\n    }\n</code></pre> <p>Instrucciones: 1. Guarda el c\u00f3digo en <code>main.py</code>. 2. Ejecuta con <code>uvicorn main:app --reload</code>. 3. Verifica en <code>http://127.0.0.1:8000/projects</code>. 4. Explora la documentaci\u00f3n en <code>http://127.0.0.1:8000/docs</code>.</p>"},{"location":"content/p2/#actividad-consumir-la-api-rest-desde-postman-thunder-client-y-una-pagina-web","title":"Actividad: Consumir la API REST desde Postman, Thunder Client y una P\u00e1gina Web \ud83c\udf10","text":"<p>Objetivo: Aprender a consumir una API REST (como el endpoint <code>/projects</code> de la Clase 1) utilizando Postman, Thunder Client (extensi\u00f3n de VS Code), y una p\u00e1gina web b\u00e1sica con HTML/JavaScript, documentando el proceso y los resultados.</p>"},{"location":"content/p2/#instrucciones","title":"Instrucciones \ud83d\udcdd","text":"<p>Investiga y prueba c\u00f3mo consumir la API REST creada en la Clase 1 (<code>http://127.0.0.1:8000/projects</code>) utilizando tres m\u00e9todos:</p> <ol> <li> <p>Postman:</p> </li> <li> <p>Thunder Client (extensi\u00f3n de VS Code):   </p> </li> <li> <p>P\u00e1gina web con HTML/JavaScript:  </p> </li> </ol>"},{"location":"content/p2/#entregables","title":"Entregables \ud83d\udce6","text":"<ul> <li>Archivo <code>actividad.md</code> con la documentaci\u00f3n y el p\u00e1rrafo de hallazgos.</li> <li>Capturas de pantalla de Postman y Thunder Client.</li> <li>Archivo <code>index.html</code> con el c\u00f3digo JavaScript.</li> <li>Repositorio GitHub con todos los archivos.</li> </ul>"},{"location":"content/p3/","title":"Ejericios de Python","text":""},{"location":"content/p3/#actividad-1","title":"Actividad 1","text":""},{"location":"content/p3/#paso-0-antes-de-empezar","title":"Paso 0 \u2013 Antes de empezar","text":"<p>\u00a1Haz un fork del repositorio! Dir\u00edgete a: <pre><code>https://github.com/jfinfosena/act_pap_s1.git\n</code></pre> y pulsa el bot\u00f3n Fork (esquina superior derecha). Tras ello cl\u00f3nalo en tu equipo:</p> <pre><code>git clone https://github.com/TU-USUARIO/act_pap_s1.git\ncd act_pap_s1\n</code></pre>"},{"location":"content/p3/#ejercicio-01-for","title":"Ejercicio 01 \u2013 for","text":"<p>Enunciado: Usando un ciclo for, imprime los n\u00fameros enteros del 0 al 9, cada uno en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-02-while","title":"Ejercicio 02 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, imprime los n\u00fameros enteros del 10 al 1 en orden descendente, cada n\u00famero en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-03-for","title":"Ejercicio 03 \u2013 for","text":"<p>Enunciado: Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado final.</p>"},{"location":"content/p3/#ejercicio-04-while","title":"Ejercicio 04 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, solicita al usuario que ingrese n\u00fameros. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los n\u00fameros ingresados.</p>"},{"location":"content/p3/#ejercicio-05-for","title":"Ejercicio 05 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 \u00d7 1, 7 \u00d7 2, \u2026, 7 \u00d7 10, cada resultado en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-06-while","title":"Ejercicio 06 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, genera y muestra los primeros 15 m\u00faltiplos de 3, comenzando desde 3.</p>"},{"location":"content/p3/#ejercicio-07-for","title":"Ejercicio 07 \u2013 for","text":"<p>Enunciado: Con un ciclo for, cuenta cu\u00e1ntas letras \u201ca\u201d (min\u00fascula) hay en la cadena <code>texto = \"manzana\"</code> y muestra el total.</p>"},{"location":"content/p3/#ejercicio-08-while","title":"Ejercicio 08 \u2013 while","text":"<p>Enunciado: Usando un ciclo while, calcula y muestra los cuadrados de los n\u00fameros del 1 al 20 (1\u00b2, 2\u00b2, \u2026, 20\u00b2), cada resultado en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-09-for","title":"Ejercicio 09 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime todos los n\u00fameros pares del 2 al 50 (ambos inclusive), cada n\u00famero en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-10-while","title":"Ejercicio 10 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \u201cfin\u201d. Al final, muestra cu\u00e1ntas palabras se leyeron (sin contar \u201cfin\u201d).</p>"},{"location":"content/p3/#ejercicio-11-for","title":"Ejercicio 11 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime cada car\u00e1cter de la palabra <code>\"python\"</code> en una l\u00ednea separada.</p>"},{"location":"content/p3/#ejercicio-12-while","title":"Ejercicio 12 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, calcula el factorial de un n\u00famero entero <code>n</code> introducido por el usuario y muestra el resultado.</p>"},{"location":"content/p3/#ejercicio-13-for","title":"Ejercicio 13 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime los n\u00fameros del 1 al 30 saltando de 3 en 3 (1, 4, 7, \u2026, 28), cada n\u00famero en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-14-while","title":"Ejercicio 14 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un n\u00famero aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitaci\u00f3n al final.</p>"},{"location":"content/p3/#ejercicio-15-for","title":"Ejercicio 15 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime un tri\u00e1ngulo rect\u00e1ngulo de 5 filas usando el car\u00e1cter <code>*</code>. Ejemplo de salida: <pre><code>*\n**\n***\n****\n*****\n</code></pre></p>"},{"location":"content/p3/#ejercicio-16-while","title":"Ejercicio 16 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde <code>00:00</code> hasta <code>00:59</code> en formato <code>MM:SS</code>, cada valor en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-17-for","title":"Ejercicio 17 \u2013 for","text":"<p>Enunciado: Con un ciclo for, solicita al usuario que ingrese un n\u00famero entero positivo y calcula la suma de sus d\u00edgitos, mostrando el resultado final.</p>"},{"location":"content/p3/#ejercicio-18-while","title":"Ejercicio 18 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, \u2026 y termina cuando se alcance el primer valor mayor que 1000.</p>"},{"location":"content/p3/#ejercicio-19-for","title":"Ejercicio 19 \u2013 for","text":"<p>Enunciado: Con un ciclo for, cuenta cu\u00e1ntas vocales (sin distinci\u00f3n de may\u00fasculas/min\u00fasculas) hay en la frase <code>frase = \"programacion es divertida\"</code> y muestra el total.</p>"},{"location":"content/p3/#ejercicio-20-while","title":"Ejercicio 20 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca <code>-1</code>. Al final, muestra la edad mayor que se haya ingresado.</p>"},{"location":"content/p3/#actividad-2-estructuras-de-control-bucles-y-estructuras-de-datos-colecciones-en-python","title":"\ud83d\udcda Actividad 2 - Estructuras de control (bucles) y Estructuras de datos - Colecciones en Python","text":""},{"location":"content/p3/#instrucciones-de-la-actividad","title":"\ud83c\udfaf Instrucciones de la Actividad","text":""},{"location":"content/p3/#objetivo","title":"\ud83d\udccb Objetivo","text":"<p>Desarrollar habilidades en el uso de estructuras de control repetitivas (bucles) y estructuras de datos (colecciones) en Python, implementando funciones que resuelvan problemas pr\u00e1cticos.</p>"},{"location":"content/p3/#configuracion-del-entorno","title":"\ud83d\udd27 Configuraci\u00f3n del Entorno","text":""},{"location":"content/p3/#1-fork-del-repositorio","title":"1. Fork del Repositorio","text":"<ol> <li>Hacer Fork: Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha de este repositorio</li> </ol> <p><pre><code>https://github.com/jfinfosena/act_pap_s2.git\n</code></pre> 2. Clonar tu Fork: Clona tu repositorio fork a tu m\u00e1quina local    <pre><code>git clone https://github.com/TU_USUARIO/act_pap_s2.git\ncd act_pap_s2\n</code></pre></p>"},{"location":"content/p3/#2-estructura-del-proyecto","title":"2. Estructura del Proyecto","text":"<pre><code>act_ntp_s4/\n\u251c\u2500\u2500 README.md              # Este archivo con instrucciones\n\u251c\u2500\u2500 activities.json        # Lista de ejercicios\n\u251c\u2500\u2500 evaluations.json       # Criterios de evaluaci\u00f3n\n\u251c\u2500\u2500 info.json             # Informaci\u00f3n del proyecto\n\u2514\u2500\u2500 src/                  # Carpeta para tus soluciones\n    \u251c\u2500\u2500 ejercicio_01.py   # Tu soluci\u00f3n al ejercicio 1\n    \u251c\u2500\u2500 ejercicio_02.py   # Tu soluci\u00f3n al ejercicio 2\n    \u2514\u2500\u2500 ...               # Resto de ejercicios\n</code></pre>"},{"location":"content/p3/#instrucciones-de-entrega","title":"\ud83d\udcdd Instrucciones de Entrega","text":"<ol> <li>Implementa las soluciones: Crea cada archivo Python en la carpeta <code>src/</code> seg\u00fan se indica en <code>activities.json</code></li> <li>Usa funciones: Cada ejercicio debe implementarse usando funciones</li> <li>Incluye comentarios: Documenta tu c\u00f3digo con comentarios explicativos</li> <li>Prueba tu c\u00f3digo: Aseg\u00farate de que cada ejercicio funcione correctamente</li> <li>Commit y Push: Sube tus cambios a tu repositorio fork    <pre><code>git add .\ngit commit -m \"Implementaci\u00f3n de ejercicios 1-20\"\ngit push origin main\n</code></pre></li> <li>Crear Pull Request: Crea un Pull Request desde tu fork al repositorio original</li> </ol>"},{"location":"content/p3/#fecha-de-entrega","title":"\u23f0 Fecha de Entrega","text":"<p>[FECHA A DEFINIR POR EL INSTRUCTOR]</p>"},{"location":"content/p3/#criterios-de-evaluacion","title":"\ud83d\udcca Criterios de Evaluaci\u00f3n","text":"<ul> <li>\u2705 Uso correcto de estructuras de control (bucles)</li> <li>\u2705 Implementaci\u00f3n adecuada de colecciones (listas, tuplas, conjuntos, diccionarios)</li> <li>\u2705 Creaci\u00f3n y uso de funciones</li> <li>\u2705 Calidad del c\u00f3digo y comentarios</li> <li>\u2705 Funcionalidad completa de cada ejercicio</li> </ul>"},{"location":"content/p3/#ejercicios-a-resolver","title":"\ud83d\ude80 Ejercicios a Resolver","text":""},{"location":"content/p3/#listas-ejercicios-1-5","title":"\ud83d\udccb LISTAS - Ejercicios 1-5","text":""},{"location":"content/p3/#ejercicio-1-filtrado-de-numeros-pares","title":"Ejercicio 1: Filtrado de N\u00fameros Pares","text":"<p>Crea una funci\u00f3n que reciba una lista de n\u00fameros y use un ciclo for para devolver una nueva lista con solo los n\u00fameros pares. Prueba la funci\u00f3n con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].</p> <p>Archivo: <code>src/ejercicio_01.py</code></p>"},{"location":"content/p3/#ejercicio-2-sistema-de-calificaciones","title":"Ejercicio 2: Sistema de Calificaciones","text":"<p>Implementa una funci\u00f3n que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota m\u00e1s alta y m\u00e1s baja.</p> <p>Archivo: <code>src/ejercicio_02.py</code></p>"},{"location":"content/p3/#ejercicio-3-combinacion-de-listas","title":"Ejercicio 3: Combinaci\u00f3n de Listas","text":"<p>Crea una funci\u00f3n que reciba dos listas de igual tama\u00f1o y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].</p> <p>Archivo: <code>src/ejercicio_03.py</code></p>"},{"location":"content/p3/#ejercicio-4-carrito-de-compras","title":"Ejercicio 4: Carrito de Compras","text":"<p>Desarrolla una funci\u00f3n que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un men\u00fa que permita agregar, eliminar, mostrar productos y calcular el total.</p> <p>Archivo: <code>src/ejercicio_04.py</code></p>"},{"location":"content/p3/#ejercicio-5-busqueda-de-palabras","title":"Ejercicio 5: B\u00fasqueda de Palabras","text":"<p>Implementa una funci\u00f3n que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra espec\u00edfica ingresada por el usuario.</p> <p>Archivo: <code>src/ejercicio_05.py</code></p>"},{"location":"content/p3/#tuplas-ejercicios-6-10","title":"\ud83d\udce6 TUPLAS - Ejercicios 6-10","text":""},{"location":"content/p3/#ejercicio-6-coordenadas-aleatorias","title":"Ejercicio 6: Coordenadas Aleatorias","text":"<p>Crea una funci\u00f3n que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cu\u00e1les puntos est\u00e1n dentro de un c\u00edrculo de radio 5 centrado en el origen.</p> <p>Archivo: <code>src/ejercicio_06.py</code></p>"},{"location":"content/p3/#ejercicio-7-filtrado-de-estudiantes","title":"Ejercicio 7: Filtrado de Estudiantes","text":"<p>Desarrolla una funci\u00f3n que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.</p> <p>Archivo: <code>src/ejercicio_07.py</code></p>"},{"location":"content/p3/#ejercicio-8-secuencia-de-fibonacci","title":"Ejercicio 8: Secuencia de Fibonacci","text":"<p>Implementa una funci\u00f3n que cree una tupla con los primeros 20 n\u00fameros de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los n\u00fameros impares.</p> <p>Archivo: <code>src/ejercicio_08.py</code></p>"},{"location":"content/p3/#ejercicio-9-sistema-de-coordenadas","title":"Ejercicio 9: Sistema de Coordenadas","text":"<p>Crea una funci\u00f3n que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.</p> <p>Archivo: <code>src/ejercicio_09.py</code></p>"},{"location":"content/p3/#ejercicio-10-suma-de-tuplas","title":"Ejercicio 10: Suma de Tuplas","text":"<p>Desarrolla una funci\u00f3n que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).</p> <p>Archivo: <code>src/ejercicio_10.py</code></p>"},{"location":"content/p3/#conjuntos-ejercicios-11-15","title":"\ud83d\udd17 CONJUNTOS - Ejercicios 11-15","text":""},{"location":"content/p3/#ejercicio-11-operaciones-de-conjuntos","title":"Ejercicio 11: Operaciones de Conjuntos","text":"<p>Crea una funci\u00f3n que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la uni\u00f3n, intersecci\u00f3n, diferencia y diferencia sim\u00e9trica entre ambos conjuntos.</p> <p>Archivo: <code>src/ejercicio_11.py</code></p>"},{"location":"content/p3/#ejercicio-12-palabras-unicas","title":"Ejercicio 12: Palabras \u00danicas","text":"<p>Implementa una funci\u00f3n que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cu\u00e1ntas palabras \u00fanicas se ingresaron y cu\u00e1les se repitieron.</p> <p>Archivo: <code>src/ejercicio_12.py</code></p>"},{"location":"content/p3/#ejercicio-13-generacion-de-conjuntos","title":"Ejercicio 13: Generaci\u00f3n de Conjuntos","text":"<p>Desarrolla una funci\u00f3n que genere dos conjuntos: uno con n\u00fameros pares del 2 al 20 y otro con m\u00faltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.</p> <p>Archivo: <code>src/ejercicio_13.py</code></p>"},{"location":"content/p3/#ejercicio-14-sistema-de-votacion","title":"Ejercicio 14: Sistema de Votaci\u00f3n","text":"<p>Crea una funci\u00f3n que simule un sistema de votaci\u00f3n. Usa un conjunto para almacenar los votos \u00fanicos y un ciclo while para permitir que m\u00faltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.</p> <p>Archivo: <code>src/ejercicio_14.py</code></p>"},{"location":"content/p3/#ejercicio-15-eliminacion-de-duplicados","title":"Ejercicio 15: Eliminaci\u00f3n de Duplicados","text":"<p>Implementa una funci\u00f3n que reciba una lista de n\u00fameros con duplicados y use un ciclo for para crear un conjunto con n\u00fameros \u00fanicos. Luego compara el tama\u00f1o original vs el conjunto para mostrar cu\u00e1ntos duplicados hab\u00eda.</p> <p>Archivo: <code>src/ejercicio_15.py</code></p>"},{"location":"content/p3/#diccionarios-ejercicios-16-20","title":"\ud83d\udcda DICCIONARIOS - Ejercicios 16-20","text":""},{"location":"content/p3/#ejercicio-16-inventario-de-productos","title":"Ejercicio 16: Inventario de Productos","text":"<p>Crea una funci\u00f3n que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un men\u00fa que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.</p> <p>Archivo: <code>src/ejercicio_16.py</code></p>"},{"location":"content/p3/#ejercicio-17-contador-de-palabras","title":"Ejercicio 17: Contador de Palabras","text":"<p>Desarrolla una funci\u00f3n que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora may\u00fasculas/min\u00fasculas y muestra las palabras ordenadas por frecuencia.</p> <p>Archivo: <code>src/ejercicio_17.py</code></p>"},{"location":"content/p3/#ejercicio-18-agenda-telefonica","title":"Ejercicio 18: Agenda Telef\u00f3nica","text":"<p>Implementa una funci\u00f3n que simule una agenda telef\u00f3nica usando un diccionario. Usa un ciclo while para mostrar un men\u00fa que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.</p> <p>Archivo: <code>src/ejercicio_18.py</code></p>"},{"location":"content/p3/#ejercicio-19-gestion-de-calificaciones","title":"Ejercicio 19: Gesti\u00f3n de Calificaciones","text":"<p>Crea una funci\u00f3n que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.</p> <p>Archivo: <code>src/ejercicio_19.py</code></p>"},{"location":"content/p3/#ejercicio-20-sistema-de-temperaturas","title":"Ejercicio 20: Sistema de Temperaturas","text":"<p>Desarrolla una funci\u00f3n que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con d\u00edas de la semana y temperaturas. Calcula estad\u00edsticas por ciudad y d\u00eda.</p> <p>Archivo: <code>src/ejercicio_20.py</code></p>"},{"location":"content/p4/","title":"Rutas y Par\u00e1metros en FastAPI","text":""},{"location":"content/p4/#objetivo-de-la-clase","title":"\ud83c\udfaf Objetivo de la clase","text":"<p>Aprender a definir rutas en FastAPI, manejar diferentes m\u00e9todos HTTP y extraer datos de: - Par\u00e1metros de ruta - Par\u00e1metros de consulta</p> <p>Se enfatizar\u00e1 el uso del tipado de Python para obtener validaci\u00f3n autom\u00e1tica y documentaci\u00f3n en Swagger.</p>"},{"location":"content/p4/#1-definicion-de-rutas","title":"\ud83e\udde9 1. Definici\u00f3n de Rutas","text":"<p>En FastAPI, las rutas (o endpoints) se definen usando decoradores como <code>@app.get</code>, <code>@app.post</code>, etc., asociados a funciones.</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef home():\n    return {\"mensaje\": \"\u00a1Bienvenido a la API!\"}\n</code></pre> <p>\u2705 FastAPI usa el m\u00e9todo HTTP y la ruta para enrutar las solicitudes.</p>"},{"location":"content/p4/#2-parametros-de-ruta-path-parameters","title":"\ud83d\udd17 2. Par\u00e1metros de Ruta (Path Parameters)","text":"<p>Son valores que forman parte de la URL y se usan para identificar recursos espec\u00edficos.</p>"},{"location":"content/p4/#ejemplo-obtener-un-usuario-por-id","title":"Ejemplo: Obtener un usuario por ID","text":"<pre><code>@app.get(\"/usuarios/{user_id}\")\ndef obtener_usuario(user_id: int):\n    return {\"user_id\": user_id, \"nombre\": f\"Usuario {user_id}\"}\n</code></pre> <ul> <li><code>{user_id}</code> es un par\u00e1metro de ruta.</li> <li><code>user_id: int</code> indica que espera un n\u00famero entero \u2192 FastAPI valida y convierte autom\u00e1ticamente.</li> </ul>"},{"location":"content/p4/#ventajas","title":"\u2705 Ventajas:","text":"<ul> <li>Validaci\u00f3n autom\u00e1tica: si se pasa <code>\"abc\"</code>, FastAPI responde con error 422.</li> <li>Documentaci\u00f3n autom\u00e1tica en <code>/docs</code>.</li> </ul>"},{"location":"content/p4/#3-parametros-de-consulta-query-parameters","title":"\ud83d\udd0d 3. Par\u00e1metros de Consulta (Query Parameters)","text":"<p>Son par\u00e1metros opcionales que vienen despu\u00e9s del <code>?</code> en la URL.</p> <pre><code>@app.get(\"/productos/\")\ndef listar_productos(categoria: str = None, en_stock: bool = False, limite: int = 10):\n    resultados = {\n        \"categoria\": categoria,\n        \"en_stock\": en_stock,\n        \"limite\": limite,\n        \"productos\": [\n            {\"id\": 1, \"nombre\": \"Laptop\", \"categoria\": \"tecnolog\u00eda\", \"stock\": True},\n            {\"id\": 2, \"nombre\": \"Teclado\", \"categoria\": \"tecnolog\u00eda\", \"stock\": True}\n        ]\n    }\n    return resultados\n</code></pre> <ul> <li>URL de ejemplo: <code>http://localhost:8000/productos/?categoria=tecnolog\u00eda&amp;en_stock=true&amp;limite=5</code></li> </ul> <p>\u26a0\ufe0f Los par\u00e1metros de consulta son opcionales si tienen valor por defecto.</p>"},{"location":"content/p4/#4-metodos-http-soportados","title":"\ud83d\udce1 4. M\u00e9todos HTTP Soportados","text":"<p>FastAPI soporta todos los m\u00e9todos comunes:</p> M\u00e9todo Uso com\u00fan <code>GET</code> Leer datos <code>POST</code> Crear datos <code>PUT</code> Actualizar datos (completos) <code>PATCH</code> Actualizar datos (parciales) <code>DELETE</code> Eliminar datos"},{"location":"content/p4/#tutorial-completo-api-fastapi-postman-con-json-y-query-parameters","title":"\ud83d\ude80 Tutorial Completo: API FastAPI + Postman con JSON y Query Parameters","text":""},{"location":"content/p4/#1-requisitos-previos","title":"\ud83e\uddf0 1. Requisitos previos","text":"<p>Aseg\u00farate de tener instalado:</p> <pre><code>pip install fastapi uvicorn\n</code></pre> <p>FastAPI incluye <code>pydantic</code>, as\u00ed que no necesitas instalarlo por separado.</p>"},{"location":"content/p4/#2-codigo-fastapi-actualizado-con-json-y-query-parameters","title":"\ud83d\udcbb 2. C\u00f3digo FastAPI actualizado (con JSON y Query Parameters)","text":"<p>Guarda este c\u00f3digo en un archivo llamado <code>main.py</code>:</p> <pre><code>from fastapi import FastAPI, Query\nfrom pydantic import BaseModel\nfrom typing import Optional\n\napp = FastAPI()\n\n# Modelo base para items\nclass Item(BaseModel):\n    nombre: str\n    precio: float\n\n# Modelo para actualizaci\u00f3n parcial\nclass ItemParcial(BaseModel):\n    nombre: Optional[str] = None\n    precio: Optional[float] = None\n\n# Base de datos simulada\nitems = [\n    {\"id\": 1, \"nombre\": \"Manzana\", \"precio\": 1.2},\n    {\"id\": 2, \"nombre\": \"Banana\", \"precio\": 0.8},\n    {\"id\": 3, \"nombre\": \"Naranja\", \"precio\": 1.5}\n]\n\n# \ud83d\udd39 GET: Listar todos los items + filtro por nombre (query parameter)\n@app.get(\"/items/\")\ndef obtener_items(nombre: str = Query(None, description=\"Filtrar por nombre\")):\n    resultado = items\n    if nombre:\n        resultado = [item for item in items if nombre.lower() in item[\"nombre\"].lower()]\n    return {\"items\": resultado}\n\n# \ud83d\udd39 GET: Obtener un item por ID\n@app.get(\"/items/{item_id}\")\ndef obtener_item(item_id: int):\n    for item in items:\n        if item[\"id\"] == item_id:\n            return item\n    return {\"error\": \"Item no encontrado\"}\n\n# \ud83d\udd37 POST: Crear un nuevo item (JSON)\n@app.post(\"/items/\")\ndef crear_item(item: Item):\n    nuevo_id = max([i[\"id\"] for i in items]) + 1\n    nuevo_item = {\"id\": nuevo_id, \"nombre\": item.nombre, \"precio\": item.precio}\n    items.append(nuevo_item)\n    return {\"mensaje\": \"Item creado\", \"item\": nuevo_item}\n\n# \ud83d\udd36 PUT: Actualizar un item completo (JSON)\n@app.put(\"/items/{item_id}\")\ndef actualizar_item(item_id: int, item: Item):\n    for i in items:\n        if i[\"id\"] == item_id:\n            i[\"nombre\"] = item.nombre\n            i[\"precio\"] = item.precio\n            return {\"mensaje\": \"Item actualizado\", \"item\": i}\n    return {\"error\": \"Item no encontrado\"}\n\n# \ud83d\udfe1 PATCH: Actualizar parcialmente un item (JSON)\n@app.patch(\"/items/{item_id}\")\ndef actualizar_parcial(item_id: int, item: ItemParcial):\n    for i in items:\n        if i[\"id\"] == item_id:\n            if item.nombre is not None:\n                i[\"nombre\"] = item.nombre\n            if item.precio is not None:\n                i[\"precio\"] = item.precio\n            return {\"mensaje\": \"Item actualizado parcialmente\", \"item\": i}\n    return {\"error\": \"Item no encontrado\"}\n\n# \ud83d\udd3b DELETE: Eliminar un item\n@app.delete(\"/items/{item_id}\")\ndef eliminar_item(item_id: int):\n    for item in items:\n        if item[\"id\"] == item_id:\n            items.remove(item)\n            return {\"mensaje\": \"Item eliminado\"}\n    return {\"error\": \"Item no encontrado\"}\n</code></pre>"},{"location":"content/p4/#3-iniciar-el-servidor","title":"\u25b6\ufe0f 3. Iniciar el servidor","text":"<p>Desde la terminal:</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>Tu API estar\u00e1 disponible en: - <code>http://127.0.0.1:8000</code> - Documentaci\u00f3n interactiva: <code>http://127.0.0.1:8000/docs</code></p>"},{"location":"content/p4/#4-pruebas-en-postman-con-json","title":"\ud83e\uddea 4. Pruebas en Postman (con JSON)","text":"<p>Abre Postman y sigue estos pasos.</p>"},{"location":"content/p4/#1-get-listar-todos-los-items","title":"\ud83d\udd39 1. GET: Listar todos los items","text":"<ul> <li>M\u00e9todo: <code>GET</code></li> <li>URL: <code>http://127.0.0.1:8000/items/</code></li> <li>Body: No necesario</li> <li>Respuesta: <pre><code>{\n  \"items\": [\n    {\"id\": 1, \"nombre\": \"Manzana\", \"precio\": 1.2},\n    {\"id\": 2, \"nombre\": \"Banana\", \"precio\": 0.8},\n    {\"id\": 3, \"nombre\": \"Naranja\", \"precio\": 1.5}\n  ]\n}\n</code></pre></li> </ul>"},{"location":"content/p4/#2-get-con-query-parameter-filtrar-por-nombre","title":"\ud83d\udd0e 2. GET con Query Parameter: Filtrar por nombre","text":"<ul> <li>URL: <code>http://127.0.0.1:8000/items/?nombre=ana</code></li> <li>Esto filtra los items cuyo nombre contenga \"ana\" (ej. \"Banana\")</li> </ul> <p>\u2705 Respuesta: <pre><code>{\n  \"items\": [\n    {\"id\": 2, \"nombre\": \"Banana\", \"precio\": 0.8}\n  ]\n}\n</code></pre></p> <p>Puedes probar con <code>?nombre=na</code>, <code>?nombre=zana</code>, etc.</p>"},{"location":"content/p4/#3-get-por-id-items1","title":"\ud83d\udd39 3. GET por ID: <code>/items/1</code>","text":"<ul> <li>M\u00e9todo: <code>GET</code></li> <li>URL: <code>http://127.0.0.1:8000/items/1</code></li> <li>Respuesta: <pre><code>{\"id\": 1, \"nombre\": \"Manzana\", \"precio\": 1.2}\n</code></pre></li> </ul>"},{"location":"content/p4/#4-post-crear-item-json","title":"\ud83d\udd37 4. POST: Crear item (JSON)","text":"<ul> <li>M\u00e9todo: <code>POST</code></li> <li>URL: <code>http://127.0.0.1:8000/items/</code></li> <li>Body \u2192 raw \u2192 JSON: <pre><code>{\n  \"nombre\": \"Papaya\",\n  \"precio\": 2.5\n}\n</code></pre></li> <li>Headers (opcional pero recomendado):</li> <li><code>Content-Type: application/json</code></li> </ul> <p>\u2705 Respuesta: <pre><code>{\n  \"mensaje\": \"Item creado\",\n  \"item\": {\n    \"id\": 4,\n    \"nombre\": \"Papaya\",\n    \"precio\": 2.5\n  }\n}\n</code></pre></p>"},{"location":"content/p4/#5-put-actualizar-completo","title":"\ud83d\udd36 5. PUT: Actualizar completo","text":"<ul> <li>M\u00e9todo: <code>PUT</code></li> <li>URL: <code>http://127.0.0.1:8000/items/4</code></li> <li>Body (JSON): <pre><code>{\n  \"nombre\": \"Mango\",\n  \"precio\": 3.0\n}\n</code></pre> \u2705 Respuesta: <pre><code>{\n  \"mensaje\": \"Item actualizado\",\n  \"item\": {\n    \"id\": 4,\n    \"nombre\": \"Mango\",\n    \"precio\": 3.0\n  }\n}\n</code></pre></li> </ul>"},{"location":"content/p4/#6-patch-actualizar-parcialmente","title":"\ud83d\udfe1 6. PATCH: Actualizar parcialmente","text":"<ul> <li>M\u00e9todo: <code>PATCH</code></li> <li>URL: <code>http://127.0.0.1:8000/items/4</code></li> <li>Body (solo precio): <pre><code>{\n  \"precio\": 2.8\n}\n</code></pre> \u2705 Respuesta: <pre><code>{\n  \"mensaje\": \"Item actualizado parcialmente\",\n  \"item\": {\n    \"id\": 4,\n    \"nombre\": \"Mango\",\n    \"precio\": 2.8\n  }\n}\n</code></pre></li> </ul>"},{"location":"content/p4/#7-delete-eliminar-item","title":"\ud83d\udd3b 7. DELETE: Eliminar item","text":"<ul> <li>M\u00e9todo: <code>DELETE</code></li> <li>URL: <code>http://127.0.0.1:8000/items/4</code></li> <li>Respuesta: <pre><code>{\"mensaje\": \"Item eliminado\"}\n</code></pre></li> </ul>"},{"location":"content/p4/#que-son-los-query-parameters","title":"\ud83d\udd0d \u00bfQu\u00e9 son los Query Parameters?","text":"<p>Son par\u00e1metros que se agregan despu\u00e9s del <code>?</code> en la URL y permiten filtrar, paginar o personalizar la respuesta.</p> <p>En este ejemplo: <pre><code>def obtener_items(nombre: str = Query(None, description=\"Filtrar por nombre\"))\n</code></pre></p> <ul> <li><code>nombre</code> es un query parameter opcional</li> <li>Si se env\u00eda, filtra los items por nombre</li> <li>Ejemplo: <code>/items/?nombre=ana</code></li> </ul> <p>Puedes usar varios: <pre><code>/items/?nombre=na&amp;otro_param=valor\n</code></pre></p>"},{"location":"content/p4/#ventajas-de-este-enfoque","title":"\u2705 Ventajas de este enfoque","text":"Caracter\u00edstica Beneficio JSON en el body Est\u00e1ndar moderno, f\u00e1cil de usar con frontend Pydantic + BaseModel Validaci\u00f3n autom\u00e1tica de datos Query Parameters Filtros flexibles sin cambiar la ruta Documentaci\u00f3n autom\u00e1tica Swagger UI en <code>/docs</code> <p>Perfecto. A continuaci\u00f3n, te presento la versi\u00f3n final y completa de la actividad pr\u00e1ctica, ahora con indicaciones detalladas para estudiantes, enfocada en resoluci\u00f3n aut\u00f3noma (sin dar la soluci\u00f3n), e incluyendo:</p> <ul> <li>Crear un fork de un repositorio</li> <li>Trabajar con entorno virtual</li> <li>Instalar dependencias</li> <li>Editar archivo <code>info.json</code></li> <li>Desarrollar la API seg\u00fan los requisitos</li> </ul>"},{"location":"content/p4/#actividad-practica-gestion-de-productos-en-una-tienda-de-mascotas","title":"\ud83d\udc3e Actividad Pr\u00e1ctica: Gesti\u00f3n de Productos en una Tienda de Mascotas","text":"<p>Nivel: Intermedio Duraci\u00f3n estimada: 1.5 \u2013 2 horas Objetivo: Aplicar conocimientos de FastAPI, CRUD, JSON y par\u00e1metros de consulta en un proyecto realista, usando buenas pr\u00e1cticas de desarrollo.</p>"},{"location":"content/p4/#1-preparacion-del-entorno-de-trabajo","title":"\ud83d\udce5 1. Preparaci\u00f3n del entorno de trabajo","text":""},{"location":"content/p4/#paso-1-haz-un-fork-de-un-repositorio-base","title":"\ud83d\udd17 Paso 1: Haz un fork de un repositorio base","text":"<ol> <li> <p>Ve al repositorio base proporcionado por tu instructor (ejemplo simulado):    <pre><code>https://github.com/jfinfosena/act_pap_s3.git\n</code></pre></p> </li> <li> <p>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha.</p> </li> <li> <p>Elige tu cuenta de GitHub como destino.</p> </li> <li> <p>Una vez creado, tendr\u00e1s un repositorio en tu cuenta:    <pre><code>https://github.com/tu-usuario/act_pap_s3.git\n</code></pre></p> </li> </ol> <p>\u2705 Esto te permite trabajar sobre tu copia sin afectar el original.</p>"},{"location":"content/p4/#paso-2-clona-tu-repositorio-el-fork","title":"\ud83d\udce6 Paso 2: Clona tu repositorio (el fork)","text":"<p>En tu m\u00e1quina, abre una terminal y ejecuta:</p> <pre><code>git clone https://github.com/tu-usuario/act_pap_s3.git\ncd act_pap_s3\n</code></pre> <p>\u26a0\ufe0f Reemplaza <code>tu-usuario</code> con tu nombre de usuario de GitHub.</p>"},{"location":"content/p4/#paso-3-crea-un-entorno-virtual","title":"\ud83d\udc0d Paso 3: Crea un entorno virtual","text":"<p>Es importante aislar las dependencias del proyecto.</p> <pre><code># Crear entorno virtual\npython -m venv .venv\n\n# Activar entorno (Linux/Mac)\nsource .venv/bin/activate\n\n# Activar entorno (Windows)\nvenv\\Scripts\\activate\n</code></pre> <p>Ver\u00e1s <code>(.venv)</code> al inicio de tu terminal. \u00a1Est\u00e1s listo!</p>"},{"location":"content/p4/#paso-4-instala-las-dependencias","title":"\ud83d\udd27 Paso 4: Instala las dependencias","text":"<p>El proyecto ya incluye un archivo <code>requirements.txt</code> con las dependencias necesarias.</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Esto instalar\u00e1 <code>fastapi</code> y <code>uvicorn</code> autom\u00e1ticamente.</p>"},{"location":"content/p4/#paso-5-diligencia-el-archivo-infojson","title":"\ud83d\udcc4 Paso 5: Diligencia el archivo <code>info.json</code>","text":"<p>En la ra\u00edz del repositorio, encontrar\u00e1s un archivo llamado:</p> <pre><code>info.json\n</code></pre> <p>\u00c1brelo y completa los campos con tu informaci\u00f3n:</p> <pre><code>{\n    \"identificacion\": \"\",\n    \"nombres\": \"\",\n    \"apellidos\": \"\",\n    \"grupo\": \"pap\"\n}\n</code></pre> <p>\u2705 Este archivo ser\u00e1 parte de tu entrega y ayudar\u00e1 a identificar tu trabajo.</p>"},{"location":"content/p4/#2-desarrollo-de-la-api","title":"\ud83d\udee0\ufe0f 2. Desarrollo de la API","text":"<p>Ahora s\u00ed, es momento de programar.</p>"},{"location":"content/p4/#estructura-del-proyecto","title":"\ud83d\udcc1 Estructura del proyecto","text":"<p>Tu repositorio debe tener estos archivos:</p> <pre><code>tienda-mascotas-base/\n\u2502\n\u251c\u2500\u2500 main.py          \u2190 Aqu\u00ed desarrollar\u00e1s la API\n\u251c\u2500\u2500 info.json        \u2190 Ya lo completaste\n\u251c\u2500\u2500 requirements.txt \u2190 Con fastapi y uvicorn\n\u2514\u2500\u2500 README.md        \u2190 Instrucciones generales\n</code></pre>"},{"location":"content/p4/#requisitos-tecnicos","title":"\ud83c\udfaf Requisitos t\u00e9cnicos","text":"<p>Crea una API FastAPI que gestione productos de una tienda de mascotas. Debes implementar:</p>"},{"location":"content/p4/#modelo-producto","title":"\u2705 Modelo <code>Producto</code>","text":"<p>Define un modelo Pydantic con: - <code>nombre: str</code> - <code>precio: float</code> - <code>categoria: str</code> (ej: \"alimento\", \"juguetes\", \"accesorios\") - <code>stock: int</code></p>"},{"location":"content/p4/#modelo-productoparcial-para-patch","title":"\u2705 Modelo <code>ProductoParcial</code> (para PATCH)","text":"<p>Todos los campos deben ser opcionales (<code>Optional</code>).</p>"},{"location":"content/p4/#base-de-datos-simulada","title":"\u2705 Base de datos simulada","text":"<p>Declara una lista <code>productos = [...]</code> con al menos 3 productos iniciales.</p>"},{"location":"content/p4/#endpoints","title":"\u2705 Endpoints","text":"M\u00e9todo Ruta Descripci\u00f3n <code>GET</code> <code>/productos/</code> Listar todos los productos <code>GET</code> <code>/productos/{producto_id}</code> Obtener producto por ID <code>GET</code> <code>/productos/?categoria=...</code> Filtrar por categor\u00eda (query param) <code>GET</code> <code>/productos/?nombre=...</code> Filtrar por nombre (b\u00fasqueda parcial, insensitive) <code>POST</code> <code>/productos/</code> Crear nuevo producto (recibe JSON) <code>PUT</code> <code>/productos/{producto_id}</code> Actualizar todos los campos del producto <code>PATCH</code> <code>/productos/{producto_id}</code> Actualizar solo algunos campos (ej: solo el stock) <code>DELETE</code> <code>/productos/{producto_id}</code> Eliminar un producto"},{"location":"content/p4/#pistas-para-ayudarte-sin-dar-la-solucion","title":"\ud83d\udca1 Pistas para ayudarte (sin dar la soluci\u00f3n)","text":"<ul> <li>Usa <code>Query(None)</code> para hacer los par\u00e1metros de consulta opcionales.</li> <li>Para b\u00fasquedas parciales, usa <code>if query in item[\"nombre\"].lower()</code>.</li> <li>Recuerda que <code>PUT</code> reemplaza todo; <code>PATCH</code> solo actualiza lo enviado.</li> <li>Usa <code>pydantic.BaseModel</code> para validar el cuerpo de las solicitudes.</li> <li>Ejecuta el servidor con: <pre><code>uvicorn main:app --reload\n</code></pre></li> <li>Prueba todo en Postman o en <code>http://127.0.0.1:8000/docs</code></li> </ul>"},{"location":"content/p4/#3-pruebas-recomendadas","title":"\ud83e\uddea 3. Pruebas recomendadas","text":"<p>Antes de entregar, verifica que:</p> <ul> <li>Todos los endpoints funcionen correctamente.</li> <li>Los filtros por <code>nombre</code> y <code>categoria</code> devuelvan los resultados esperados.</li> <li>Puedas crear, modificar y eliminar productos.</li> <li>Los mensajes de error (<code>\"Producto no encontrado\"</code>) se muestren cuando corresponde.</li> </ul>"},{"location":"content/p4/#4-entrega","title":"\ud83d\udce4 4. Entrega","text":"<p>Cuando termines:</p> <ol> <li>Aseg\u00farate de que todo est\u00e9 guardado.</li> <li>Haz commit y push a tu repositorio:</li> </ol> <pre><code>git add .\ngit commit -m \"feat: completa API de productos para tienda de mascotas\"\ngit push origin main\n</code></pre> <ol> <li>Entrega el enlace a tu repositorio fork en el sistema de tareas (Moodle, Classroom, etc.).</li> </ol>"},{"location":"content/p4s/","title":"\u2705 Soluci\u00f3n: Actividad \u2013 Gesti\u00f3n de Productos en una Tienda de Mascotas","text":"<p>\ud83d\udc3e API FastAPI completa con: CRUD, JSON, Query Parameters, entorno virtual y estructura de repositorio.</p>"},{"location":"content/p4s/#estructura-del-repositorio","title":"\ud83d\udcc1 Estructura del repositorio","text":"<pre><code>tienda-mascotas-base/\n\u2502\n\u251c\u2500\u2500 main.py             # API FastAPI\n\u251c\u2500\u2500 info.json           # Informaci\u00f3n del estudiante\n\u251c\u2500\u2500 requirements.txt    # Dependencias\n\u2514\u2500\u2500 README.md           # Instrucciones (opcional)\n</code></pre>"},{"location":"content/p4s/#1-requirementstxt","title":"1. <code>requirements.txt</code>","text":"<pre><code>fastapi&gt;=0.68.0\nuvicorn[standard]&gt;=0.15.0\npydantic&gt;=1.8.0\n</code></pre> <p>Este archivo permite instalar todas las dependencias con <code>pip install -r requirements.txt</code>.</p>"},{"location":"content/p4s/#2-infojson-ejemplo-completado","title":"2. <code>info.json</code> (ejemplo completado)","text":"<pre><code>{\n  \"nombre\": \"Ana Rodr\u00edguez P\u00e9rez\",\n  \"codigo\": \"202310050\",\n  \"correo\": \"ana.rodriguez@universidad.edu\",\n  \"fecha_entrega\": \"2025-04-05\",\n  \"descripcion_proyecto\": \"API REST para gesti\u00f3n de productos de tienda de mascotas con FastAPI\"\n}\n</code></pre>"},{"location":"content/p4s/#3-mainpy-solucion-completa","title":"3. <code>main.py</code> \u2013 Soluci\u00f3n completa","text":"<pre><code>from fastapi import FastAPI, Query\nfrom pydantic import BaseModel\nfrom typing import Optional\n\napp = FastAPI()\n\n# Modelo: Producto completo\nclass Producto(BaseModel):\n    nombre: str\n    precio: float\n    categoria: str\n    stock: int\n\n# Modelo: Producto parcial (para PATCH)\nclass ProductoParcial(BaseModel):\n    nombre: Optional[str] = None\n    precio: Optional[float] = None\n    categoria: Optional[str] = None\n    stock: Optional[int] = None\n\n# Base de datos simulada\nproductos = [\n    {\n        \"id\": 1,\n        \"nombre\": \"Alimento para perros\",\n        \"precio\": 25.99,\n        \"categoria\": \"alimento\",\n        \"stock\": 100\n    },\n    {\n        \"id\": 2,\n        \"nombre\": \"Juguete de peluche\",\n        \"precio\": 8.50,\n        \"categoria\": \"juguetes\",\n        \"stock\": 50\n    },\n    {\n        \"id\": 3,\n        \"nombre\": \"Collar ajustable\",\n        \"precio\": 12.00,\n        \"categoria\": \"accesorios\",\n        \"stock\": 30\n    }\n]\n\n# \ud83d\udd39 GET: Listar todos los productos + filtros por nombre y categor\u00eda\n@app.get(\"/productos/\")\ndef obtener_productos(\n    nombre: str = Query(None, description=\"Filtrar por nombre (b\u00fasqueda parcial)\"),\n    categoria: str = Query(None, description=\"Filtrar por categor\u00eda\")\n):\n    resultado = productos\n\n    if nombre:\n        resultado = [p for p in resultado if nombre.lower() in p[\"nombre\"].lower()]\n\n    if categoria:\n        resultado = [p for p in resultado if p[\"categoria\"].lower() == categoria.lower()]\n\n    return {\"productos\": resultado}\n\n# \ud83d\udd39 GET: Obtener producto por ID\n@app.get(\"/productos/{producto_id}\")\ndef obtener_producto(producto_id: int):\n    for producto in productos:\n        if producto[\"id\"] == producto_id:\n            return producto\n    return {\"error\": \"Producto no encontrado\"}\n\n# \ud83d\udd37 POST: Crear nuevo producto\n@app.post(\"/productos/\")\ndef crear_producto(producto: Producto):\n    nuevo_id = max([p[\"id\"] for p in productos]) + 1 if productos else 1\n    nuevo_producto = {\n        \"id\": nuevo_id,\n        **producto.dict()\n    }\n    productos.append(nuevo_producto)\n    return {\"mensaje\": \"Producto creado\", \"producto\": nuevo_producto}\n\n# \ud83d\udd36 PUT: Actualizar producto completo\n@app.put(\"/productos/{producto_id}\")\ndef actualizar_producto(producto_id: int, producto: Producto):\n    for p in productos:\n        if p[\"id\"] == producto_id:\n            p.update(producto.dict())\n            return {\"mensaje\": \"Producto actualizado\", \"producto\": p}\n    return {\"error\": \"Producto no encontrado\"}\n\n# \ud83d\udfe1 PATCH: Actualizar parcialmente un producto\n@app.patch(\"/productos/{producto_id}\")\ndef actualizar_producto_parcial(producto_id: int, producto_parcial: ProductoParcial):\n    for p in productos:\n        if p[\"id\"] == producto_id:\n            producto_parcial_dict = producto_parcial.dict(exclude_unset=True)  # Solo campos enviados\n            p.update(producto_parcial_dict)\n            return {\"mensaje\": \"Producto actualizado parcialmente\", \"producto\": p}\n    return {\"error\": \"Producto no encontrado\"}\n\n# \ud83d\udd3b DELETE: Eliminar producto\n@app.delete(\"/productos/{producto_id}\")\ndef eliminar_producto(producto_id: int):\n    for producto in productos:\n        if producto[\"id\"] == producto_id:\n            productos.remove(producto)\n            return {\"mensaje\": \"Producto eliminado\"}\n    return {\"error\": \"Producto no encontrado\"}\n</code></pre>"},{"location":"content/p4s/#explicacion-de-elementos-clave","title":"\u2705 Explicaci\u00f3n de elementos clave","text":""},{"location":"content/p4s/#uso-de-exclude_unsettrue","title":"\u2705 Uso de <code>exclude_unset=True</code>","text":"<p><pre><code>producto_parcial.dict(exclude_unset=True)\n</code></pre> - Garantiza que solo se actualicen los campos que fueron enviados en el <code>PATCH</code>. - Evita sobrescribir campos opcionales con <code>None</code>.</p>"},{"location":"content/p4s/#filtros-con-query-parameters","title":"\u2705 Filtros con Query Parameters","text":"<ul> <li>Soporta ambos filtros simult\u00e1neamente: <code>?nombre=peluche&amp;categoria=juguetes</code></li> <li>B\u00fasqueda insensible a may\u00fasculas con <code>.lower()</code>.</li> </ul>"},{"location":"content/p4s/#validacion-automatica-con-pydantic","title":"\u2705 Validaci\u00f3n autom\u00e1tica con Pydantic","text":"<ul> <li>Si se env\u00eda un <code>precio</code> como <code>\"abc\"</code>, FastAPI responde con error 422.</li> <li>Asegura que los datos sean del tipo correcto.</li> </ul>"},{"location":"content/p4s/#como-probar-la-solucion","title":"\u25b6\ufe0f C\u00f3mo probar la soluci\u00f3n","text":"<ol> <li> <p>Iniciar el servidor:    <pre><code>uvicorn main:app --reload\n</code></pre></p> </li> <li> <p>Acceder a la documentaci\u00f3n interactiva:    <pre><code>http://127.0.0.1:8000/docs\n</code></pre></p> </li> <li> <p>Ejemplos de pruebas en Postman:</p> </li> </ol>"},{"location":"content/p4s/#post-crear-producto","title":"\ud83d\udfe2 POST: Crear producto","text":"<ul> <li>URL: <code>POST http://127.0.0.1:8000/productos/</code></li> <li>Body (JSON):   <pre><code>{\n  \"nombre\": \"Arena para gatos\",\n  \"precio\": 18.0,\n  \"categoria\": \"higiene\",\n  \"stock\": 40\n}\n</code></pre></li> </ul>"},{"location":"content/p4s/#get-con-filtros","title":"\ud83d\udd0d GET con filtros","text":"<ul> <li><code>GET /productos/?categoria=alimento</code></li> <li><code>GET /productos/?nombre=col</code></li> <li><code>GET /productos/?nombre=peluche&amp;categoria=juguetes</code></li> </ul>"},{"location":"content/p4s/#patch-actualizar-solo-stock","title":"\ud83d\udfe1 PATCH: Actualizar solo stock","text":"<ul> <li>URL: <code>PATCH /productos/1</code></li> <li>Body:   <pre><code>{ \"stock\": 90 }\n</code></pre></li> </ul>"},{"location":"content/p4s/#resultados-esperados","title":"\ud83e\uddea Resultados esperados","text":"Acci\u00f3n Respuesta esperada <code>GET /productos/</code> Lista de 3 productos <code>GET /productos/1</code> Producto con ID 1 <code>GET /productos/?categoria=alimento</code> Solo productos de alimento <code>POST</code> con JSON v\u00e1lido Mensaje \"Producto creado\" <code>PATCH</code> con <code>{ \"stock\": 90 }</code> Actualiza solo el stock <code>DELETE /productos/1</code> \"Producto eliminado\""},{"location":"content/p5/","title":"M\u00f3dulos en FastAPI","text":"<p>En FastAPI, los m\u00f3dulos son una forma de organizar y estructurar el c\u00f3digo de manera eficiente, promoviendo la modularidad, reutilizaci\u00f3n y escalabilidad. Esto se logra principalmente mediante el uso de APIRouter y la organizaci\u00f3n de archivos en un proyecto. A continuaci\u00f3n, te explico c\u00f3mo se manejan los m\u00f3dulos en FastAPI y c\u00f3mo estructurar un proyecto modular, basado en las mejores pr\u00e1cticas y la informaci\u00f3n disponible:</p>"},{"location":"content/p5/#1-uso-de-apirouter-para-modularizar-rutas","title":"1. Uso de APIRouter para modularizar rutas","text":"<p>FastAPI proporciona la clase <code>APIRouter</code> para dividir las rutas de la API en m\u00f3dulos m\u00e1s peque\u00f1os y manejables. Esto permite separar la l\u00f3gica de las rutas en diferentes archivos, lo que facilita el mantenimiento y la colaboraci\u00f3n en equipo.</p>"},{"location":"content/p5/#ejemplo-basico-de-modularizacion-con-apirouter","title":"Ejemplo b\u00e1sico de modularizaci\u00f3n con APIRouter:","text":"<ol> <li> <p>Crear un archivo para un m\u00f3dulo espec\u00edfico (por ejemplo, <code>routers/users.py</code>):    <pre><code>from fastapi import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"user1\"}, {\"username\": \"user2\"}]\n\n@router.post(\"/users/\")\nasync def create_user(user: dict):\n    return {\"message\": \"User created\", \"user\": user}\n</code></pre></p> </li> <li> <p>Integrar el m\u00f3dulo en el archivo principal (por ejemplo, <code>main.py</code>):    <pre><code>from fastapi import FastAPI\nfrom routers import users\n\napp = FastAPI()\n\n# Incluir el router de users\napp.include_router(users.router, prefix=\"/api\", tags=[\"users\"])\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Welcome to FastAPI\"}\n</code></pre></p> </li> <li> <p><code>prefix</code>: Define un prefijo para todas las rutas del m\u00f3dulo (por ejemplo, <code>/api/users/</code>).</p> </li> <li> <p><code>tags</code>: Agrupa las rutas en la documentaci\u00f3n autom\u00e1tica (Swagger UI) para mejor organizaci\u00f3n.</p> </li> <li> <p>Ejecutar la aplicaci\u00f3n:    <pre><code>fastapi dev main.py\n</code></pre>    Esto permite que las rutas definidas en <code>users.py</code> est\u00e9n disponibles bajo el prefijo <code>/api/users/</code>.</p> </li> </ol>"},{"location":"content/p5/#2-estructuracion-de-proyectos-fastapi","title":"2. Estructuraci\u00f3n de proyectos FastAPI","text":"<p>Existen dos enfoques principales para estructurar proyectos en FastAPI: por tipo de archivo y por funcionalidad de m\u00f3dulo. Cada uno es adecuado seg\u00fan el tama\u00f1o y la arquitectura del proyecto.</p>"},{"location":"content/p5/#a-estructura-basada-en-tipo-de-archivo","title":"a) Estructura basada en tipo de archivo","text":"<p>Ideal para microservicios o proyectos peque\u00f1os. Los archivos se organizan seg\u00fan su prop\u00f3sito (rutas, modelos, esquemas, etc.). Ejemplo:</p> <pre><code>project/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py           # Inicializa la app FastAPI\n\u2502   \u251c\u2500\u2500 dependencies.py   # Dependencias globales\n\u2502   \u251c\u2500\u2500 routers/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 users.py      # Rutas relacionadas con usuarios\n\u2502   \u2502   \u251c\u2500\u2500 items.py      # Rutas relacionadas con \u00edtems\n\u2502   \u251c\u2500\u2500 crud/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 user.py       # Operaciones CRUD para usuarios\n\u2502   \u2502   \u251c\u2500\u2500 item.py       # Operaciones CRUD para \u00edtems\n\u2502   \u251c\u2500\u2500 schemas/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 user.py       # Esquemas Pydantic para usuarios\n\u2502   \u2502   \u251c\u2500\u2500 item.py       # Esquemas Pydantic para \u00edtems\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 user.py       # Modelos SQLAlchemy para usuarios\n\u2502   \u2502   \u251c\u2500\u2500 item.py       # Modelos SQLAlchemy para \u00edtems\n\u2502   \u251c\u2500\u2500 external_services/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 email.py      # Servicios externos (ej. env\u00edo de correos)\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 authentication.py\n\u2502   \u2502   \u251c\u2500\u2500 validation.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_users.py\n\u2502   \u251c\u2500\u2500 test_items.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 README.md\n</code></pre> <ul> <li> <p>Ventajas:</p> <ul> <li>Clara separaci\u00f3n por tipo de archivo (rutas, modelos, esquemas).</li> <li>Ideal para proyectos con un enfoque claro y limitado en funcionalidad.</li> <li>F\u00e1cil de entender para desarrolladores familiarizados con FastAPI.</li> </ul> </li> </ul>"},{"location":"content/p5/#b-estructura-basada-en-funcionalidad-de-modulo","title":"b) Estructura basada en funcionalidad de m\u00f3dulo","text":"<p>Recomendada para proyectos monol\u00edticos m\u00e1s grandes, donde cada m\u00f3dulo agrupa toda la l\u00f3gica relacionada con una funcionalidad espec\u00edfica (por ejemplo, autenticaci\u00f3n, publicaciones, etc.). Ejemplo:</p> <pre><code>project/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 auth/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 router.py       # Rutas de autenticaci\u00f3n\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py      # Esquemas Pydantic\n\u2502   \u2502   \u251c\u2500\u2500 models.py       # Modelos de base de datos\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py # Dependencias espec\u00edficas\n\u2502   \u2502   \u251c\u2500\u2500 service.py      # L\u00f3gica de negocio\n\u2502   \u2502   \u251c\u2500\u2500 config.py       # Configuraciones locales\n\u2502   \u2502   \u251c\u2500\u2500 constants.py    # Constantes espec\u00edficas\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py   # Excepciones espec\u00edficas\n\u2502   \u2502   \u251c\u2500\u2500 utils.py        # Utilidades no relacionadas con la l\u00f3gica\n\u2502   \u251c\u2500\u2500 posts/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u2502   \u251c\u2500\u2500 service.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2502   \u251c\u2500\u2500 constants.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 config.py           # Configuraciones globales\n\u2502   \u251c\u2500\u2500 models.py          # Modelos globales\n\u2502   \u251c\u2500\u2500 exceptions.py      # Excepciones globales\n\u2502   \u251c\u2500\u2500 database.py        # Conexi\u00f3n a la base de datos\n\u2502   \u251c\u2500\u2500 main.py            # Inicializa la app FastAPI\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 auth/\n\u2502   \u251c\u2500\u2500 posts/\n\u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 requirements/\n\u2502   \u251c\u2500\u2500 base.txt\n\u2502   \u251c\u2500\u2500 dev.txt\n\u2502   \u251c\u2500\u2500 prod.txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 logging.ini\n\u2514\u2500\u2500 alembic.ini\n</code></pre> <ul> <li> <p>Ventajas:</p> <ul> <li>Agrupa toda la l\u00f3gica relacionada con una funcionalidad en un solo lugar.</li> <li>Mejora la mantenibilidad en proyectos grandes.</li> <li>Facilita la colaboraci\u00f3n en equipos al evitar conflictos entre m\u00f3dulos.</li> </ul> </li> </ul>"},{"location":"content/p5/#3-modulos-importantes-instalados-con-fastapi","title":"3. M\u00f3dulos importantes instalados con FastAPI","text":"<p>Al instalar FastAPI (<code>pip install \"fastapi[standard]\"</code>), se incluyen m\u00f3dulos clave que potencian su funcionalidad:</p> <ul> <li> <p>Pydantic: Permite la creaci\u00f3n de modelos para validaci\u00f3n de datos y serializaci\u00f3n. Se usa para definir esquemas (schemas) que validan los datos de entrada y salida.   <pre><code>from pydantic import BaseModel\n\nclass User(BaseModel):\n    username: str\n    email: str\n</code></pre></p> </li> <li> <p>Starlette: Framework ASGI ligero que proporciona la base para servicios web as\u00edncronos en FastAPI.</p> </li> </ul> <p>Adem\u00e1s, puedes extender FastAPI con otros m\u00f3dulos como: - SQLAlchemy: Para manejar bases de datos relacionales. - Jinja2: Para motores de plantillas si necesitas renderizar p\u00e1ginas web. - python-jose o passlib: Para autenticaci\u00f3n y manejo de tokens.</p>"},{"location":"content/p5/#4-principios-clave-para-la-modularizacion","title":"4. Principios clave para la modularizaci\u00f3n","text":"<p>Para mantener un proyecto FastAPI modular y escalable, sigue estas pr\u00e1cticas: - Separaci\u00f3n de intereses: Divide la l\u00f3gica de negocio, rutas, modelos y esquemas en m\u00f3dulos separados. - Inyecci\u00f3n de dependencias: Usa <code>fastapi.Depends</code> para desacoplar componentes y mejorar la testabilidad.   <pre><code>from fastapi import Depends, FastAPI\n\nasync def get_current_user():\n    return {\"user_id\": 1}\n\n@app.get(\"/profile\")\nasync def read_profile(user=Depends(get_current_user)):\n    return user\n</code></pre> - Testabilidad: Estructura el c\u00f3digo para facilitar pruebas unitarias, usando mocks y dependencias. - Reutilizaci\u00f3n: Crea m\u00f3dulos reutilizables para l\u00f3gica com\u00fan (por ejemplo, autenticaci\u00f3n, validaciones).</p>"},{"location":"content/p5/#5-ejemplo-practico-modulo-de-usuarios-con-base-de-datos","title":"5. Ejemplo pr\u00e1ctico: M\u00f3dulo de usuarios con base de datos","text":"<p>Supongamos que quieres crear un m\u00f3dulo para gestionar usuarios con FastAPI, SQLAlchemy y Pydantic. Aqu\u00ed un ejemplo simplificado:</p>"},{"location":"content/p5/#estructura","title":"Estructura:","text":"<pre><code>project/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 users/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2502   \u251c\u2500\u2500 schemas.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 database.py\n\u2502   \u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"content/p5/#codigo","title":"C\u00f3digo:","text":"<ul> <li> <p><code>src/users/schemas.py</code> (esquemas Pydantic):   <pre><code>from pydantic import BaseModel\n\nclass UserCreate(BaseModel):\n    username: str\n    email: str\n\nclass User(BaseModel):\n    id: int\n    username: str\n    email: str\n\n    class Config:\n        orm_mode = True\n</code></pre></p> </li> <li> <p><code>src/users/models.py</code> (modelos SQLAlchemy):   <pre><code>from sqlalchemy import Column, Integer, String\nfrom src.database import Base\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, index=True)\n    email = Column(String, unique=True, index=True)\n</code></pre></p> </li> <li> <p><code>src/users/router.py</code> (rutas):   <pre><code>from fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\nfrom src.database import get_db\nfrom .schemas import User, UserCreate\nfrom .models import User as UserModel\n\nrouter = APIRouter()\n\n@router.post(\"/users/\", response_model=User)\nasync def create_user(user: UserCreate, db: Session = Depends(get_db)):\n    db_user = UserModel(**user.dict())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n</code></pre></p> </li> <li> <p><code>src/database.py</code> (configuraci\u00f3n de la base de datos):   <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre></p> </li> <li> <p><code>src/main.py</code> (app principal):   <pre><code>from fastapi import FastAPI\nfrom src.users.router import router as users_router\nfrom src.database import Base, engine\n\napp = FastAPI()\n\n# Crear las tablas en la base de datos\nBase.metadata.create_all(bind=engine)\n\n# Incluir el router de usuarios\napp.include_router(users_router, prefix=\"/api\", tags=[\"users\"])\n</code></pre></p> </li> </ul>"},{"location":"content/p5/#instalacion-de-dependencias","title":"Instalaci\u00f3n de dependencias:","text":"<pre><code>pip install \"fastapi[standard]\" sqlalchemy\n</code></pre>"},{"location":"content/p5/#ejecucion","title":"Ejecuci\u00f3n:","text":"<p><pre><code>fastapi dev main.py\n</code></pre> Accede a <code>http://127.0.0.1:8000/docs</code> para probar la API con Swagger UI.</p>"},{"location":"content/p5/#6-ventajas-de-la-modularizacion-en-fastapi","title":"6. Ventajas de la modularizaci\u00f3n en FastAPI","text":"<ul> <li>Escalabilidad: Facilita agregar nuevas funcionalidades sin modificar el n\u00facleo de la aplicaci\u00f3n.</li> <li>Mantenibilidad: C\u00f3digo organizado y f\u00e1cil de entender.</li> <li>Colaboraci\u00f3n: Equipos pueden trabajar en m\u00f3dulos separados sin conflictos.</li> <li>Reutilizaci\u00f3n: Componentes como esquemas o dependencias pueden compartirse entre m\u00f3dulos.</li> </ul>"},{"location":"content/p6/","title":"Tutorial: Consumo de API con Streamlit","text":""},{"location":"content/p6/#introduccion","title":"Introducci\u00f3n","text":"<p>En este tutorial aprender\u00e1s a crear una aplicaci\u00f3n web simple con Streamlit que consume datos de una API REST. Streamlit es una biblioteca de Python que permite crear aplicaciones web interactivas de manera r\u00e1pida y sencilla.</p>"},{"location":"content/p6/#que-es-streamlit","title":"\u00bfQu\u00e9 es Streamlit?","text":"<p>Streamlit es un framework open-source que convierte scripts de Python en aplicaciones web interactivas sin necesidad de conocimientos de HTML, CSS o JavaScript.</p>"},{"location":"content/p6/#ventajas-de-streamlit","title":"Ventajas de Streamlit:","text":"<ul> <li>Simplicidad: Solo necesitas Python</li> <li>Rapidez: Desarrollo muy r\u00e1pido</li> <li>Interactividad: Widgets autom\u00e1ticos</li> <li>Despliegue f\u00e1cil: Streamlit Cloud gratuito</li> </ul>"},{"location":"content/p6/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"content/p6/#paso-1-crear-entorno-virtual","title":"Paso 1: Crear entorno virtual","text":"<pre><code># Crear entorno virtual\npython -m venv streamlit_env\n\n# Activar entorno virtual (Windows)\nstreamlit_env\\Scripts\\activate\n\n# Activar entorno virtual (Linux/Mac)\nsource streamlit_env/bin/activate\n</code></pre>"},{"location":"content/p6/#paso-2-instalar-dependencias","title":"Paso 2: Instalar dependencias","text":"<pre><code>pip install streamlit requests pandas\n</code></pre>"},{"location":"content/p6/#paso-3-verificar-instalacion","title":"Paso 3: Verificar instalaci\u00f3n","text":"<pre><code>streamlit --version\n</code></pre>"},{"location":"content/p6/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<pre><code>streamlit_api_tutorial/\n\u251c\u2500\u2500 app.py              # Aplicaci\u00f3n principal\n\u251c\u2500\u2500 api_client.py       # Cliente para consumir API\n\u251c\u2500\u2500 requirements.txt    # Dependencias\n\u2514\u2500\u2500 README.md          # Documentaci\u00f3n\n</code></pre>"},{"location":"content/p6/#ejemplo-basico-consumir-api-de-jsonplaceholder","title":"Ejemplo B\u00e1sico: Consumir API de JSONPlaceholder","text":""},{"location":"content/p6/#1-cliente-api-api_clientpy","title":"1. Cliente API (api_client.py)","text":"<pre><code>import requests\nimport streamlit as st\nfrom typing import List, Dict, Optional\n\nclass JSONPlaceholderClient:\n    def __init__(self):\n        self.base_url = \"https://jsonplaceholder.typicode.com\"\n\n    def get_posts(self) -&gt; Optional[List[Dict]]:\n        \"\"\"Obtener todos los posts\"\"\"\n        try:\n            response = requests.get(f\"{self.base_url}/posts\")\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.RequestException as e:\n            st.error(f\"Error al obtener posts: {e}\")\n            return None\n\n    def get_post(self, post_id: int) -&gt; Optional[Dict]:\n        \"\"\"Obtener un post espec\u00edfico\"\"\"\n        try:\n            response = requests.get(f\"{self.base_url}/posts/{post_id}\")\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.RequestException as e:\n            st.error(f\"Error al obtener post {post_id}: {e}\")\n            return None\n\n    def get_users(self) -&gt; Optional[List[Dict]]:\n        \"\"\"Obtener todos los usuarios\"\"\"\n        try:\n            response = requests.get(f\"{self.base_url}/users\")\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.RequestException as e:\n            st.error(f\"Error al obtener usuarios: {e}\")\n            return None\n</code></pre>"},{"location":"content/p6/#2-aplicacion-principal-apppy","title":"2. Aplicaci\u00f3n Principal (app.py)","text":"<pre><code>import streamlit as st\nimport pandas as pd\nfrom api_client import JSONPlaceholderClient\n\n# Configuraci\u00f3n de la p\u00e1gina\nst.set_page_config(\n    page_title=\"API Consumer\",\n    page_icon=\"\ud83c\udf10\",\n    layout=\"wide\"\n)\n\n# Inicializar cliente API\n@st.cache_resource\ndef init_api_client():\n    return JSONPlaceholderClient()\n\napi_client = init_api_client()\n\n# T\u00edtulo principal\nst.title(\"\ud83c\udf10 Consumidor de API con Streamlit\")\nst.markdown(\"---\")\n\n# Sidebar para navegaci\u00f3n\nst.sidebar.title(\"\ud83d\udccb Navegaci\u00f3n\")\npage = st.sidebar.selectbox(\n    \"Selecciona una p\u00e1gina:\",\n    [\"\ud83c\udfe0 Inicio\", \"\ud83d\udcc4 Posts\", \"\ud83d\udc65 Usuarios\", \"\ud83d\udd0d Buscar Post\"]\n)\n\n# P\u00e1gina de Inicio\nif page == \"\ud83c\udfe0 Inicio\":\n    st.header(\"Bienvenido al Consumidor de API\")\n\n    col1, col2 = st.columns(2)\n\n    with col1:\n        st.info(\"\ud83d\udcc4 **Posts**\\nVer todas las publicaciones\")\n\n    with col2:\n        st.info(\"\ud83d\udc65 **Usuarios**\\nVer informaci\u00f3n de usuarios\")\n\n    # Estad\u00edsticas r\u00e1pidas\n    st.subheader(\"\ud83d\udcca Estad\u00edsticas\")\n\n    if st.button(\"Cargar Estad\u00edsticas\"):\n        posts = api_client.get_posts()\n        users = api_client.get_users()\n\n        if posts and users:\n            col1, col2, col3 = st.columns(3)\n\n            with col1:\n                st.metric(\"Total Posts\", len(posts))\n\n            with col2:\n                st.metric(\"Total Usuarios\", len(users))\n\n            with col3:\n                avg_posts = len(posts) / len(users)\n                st.metric(\"Posts por Usuario\", f\"{avg_posts:.1f}\")\n\n# P\u00e1gina de Posts\nelif page == \"\ud83d\udcc4 Posts\":\n    st.header(\"\ud83d\udcc4 Lista de Posts\")\n\n    if st.button(\"\ud83d\udd04 Cargar Posts\"):\n        posts = api_client.get_posts()\n\n        if posts:\n            # Mostrar en tabla\n            df = pd.DataFrame(posts)\n            st.dataframe(df, use_container_width=True)\n\n            # Mostrar posts individuales\n            st.subheader(\"Posts Detallados\")\n\n            for post in posts[:5]:  # Mostrar solo los primeros 5\n                with st.expander(f\"\ud83d\udcc4 {post['title'][:50]}...\"):\n                    st.write(f\"**ID:** {post['id']}\")\n                    st.write(f\"**Usuario ID:** {post['userId']}\")\n                    st.write(f\"**T\u00edtulo:** {post['title']}\")\n                    st.write(f\"**Contenido:** {post['body']}\")\n\n# P\u00e1gina de Usuarios\nelif page == \"\ud83d\udc65 Usuarios\":\n    st.header(\"\ud83d\udc65 Lista de Usuarios\")\n\n    if st.button(\"\ud83d\udd04 Cargar Usuarios\"):\n        users = api_client.get_users()\n\n        if users:\n            for user in users:\n                with st.expander(f\"\ud83d\udc64 {user['name']} (@{user['username']})\"):\n                    col1, col2 = st.columns(2)\n\n                    with col1:\n                        st.write(f\"**ID:** {user['id']}\")\n                        st.write(f\"**Nombre:** {user['name']}\")\n                        st.write(f\"**Username:** {user['username']}\")\n                        st.write(f\"**Email:** {user['email']}\")\n\n                    with col2:\n                        st.write(f\"**Tel\u00e9fono:** {user['phone']}\")\n                        st.write(f\"**Website:** {user['website']}\")\n                        st.write(f\"**Empresa:** {user['company']['name']}\")\n\n                        # Direcci\u00f3n\n                        address = user['address']\n                        st.write(f\"**Direcci\u00f3n:** {address['street']}, {address['city']}\")\n\n# P\u00e1gina de B\u00fasqueda\nelif page == \"\ud83d\udd0d Buscar Post\":\n    st.header(\"\ud83d\udd0d Buscar Post por ID\")\n\n    post_id = st.number_input(\n        \"Ingresa el ID del post:\",\n        min_value=1,\n        max_value=100,\n        value=1,\n        step=1\n    )\n\n    if st.button(\"Buscar Post\"):\n        post = api_client.get_post(post_id)\n\n        if post:\n            st.success(\"\u2705 Post encontrado:\")\n\n            # Mostrar informaci\u00f3n del post\n            st.markdown(f\"### {post['title']}\")\n            st.write(f\"**ID:** {post['id']}\")\n            st.write(f\"**Usuario ID:** {post['userId']}\")\n            st.write(f\"**Contenido:**\")\n            st.write(post['body'])\n        else:\n            st.error(\"\u274c Post no encontrado\")\n\n# Footer\nst.markdown(\"---\")\nst.markdown(\"**\ud83d\udca1 Tip:** Esta aplicaci\u00f3n consume la API p\u00fablica de JSONPlaceholder\")\n</code></pre>"},{"location":"content/p6/#3-archivo-de-dependencias-requirementstxt","title":"3. Archivo de Dependencias (requirements.txt)","text":"<pre><code>streamlit==1.29.0\nrequests==2.31.0\npandas==2.1.4\n</code></pre>"},{"location":"content/p6/#ejecutar-la-aplicacion","title":"Ejecutar la Aplicaci\u00f3n","text":""},{"location":"content/p6/#paso-1-crear-los-archivos","title":"Paso 1: Crear los archivos","text":"<ol> <li>Crea una carpeta para tu proyecto</li> <li>Crea los archivos <code>app.py</code>, <code>api_client.py</code> y <code>requirements.txt</code></li> <li>Copia el c\u00f3digo correspondiente en cada archivo</li> </ol>"},{"location":"content/p6/#paso-2-instalar-dependencias_1","title":"Paso 2: Instalar dependencias","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"content/p6/#paso-3-ejecutar-streamlit","title":"Paso 3: Ejecutar Streamlit","text":"<pre><code>streamlit run app.py\n</code></pre>"},{"location":"content/p6/#paso-4-acceder-a-la-aplicacion","title":"Paso 4: Acceder a la aplicaci\u00f3n","text":"<ul> <li>Abre tu navegador en <code>http://localhost:8501</code></li> <li>Navega por las diferentes p\u00e1ginas</li> <li>Prueba las funcionalidades de consumo de API</li> </ul>"},{"location":"content/p6/#funcionalidades-implementadas","title":"Funcionalidades Implementadas","text":"<p>\u2705 Navegaci\u00f3n entre p\u00e1ginas \u2705 Consumo de API REST \u2705 Visualizaci\u00f3n de datos en tablas \u2705 B\u00fasqueda interactiva \u2705 Manejo de errores \u2705 Interfaz responsive \u2705 Cache de recursos</p>"},{"location":"content/p7/","title":"PI de Blog","text":"<p>Este documento describe una API basada en FastAPI para un blog, con una estructura modular que maneja usuarios, publicaciones y comentarios, utilizando SQLite como base de datos.</p>"},{"location":"content/p7/#descripcion-del-proyecto","title":"Descripci\u00f3n del Proyecto","text":"<p>La API de Blog es una API RESTful construida con FastAPI, organizada en m\u00f3dulos para facilitar su mantenimiento. Utiliza SQLite para el almacenamiento de datos y Pydantic para la validaci\u00f3n. La API soporta operaciones CRUD para usuarios, publicaciones y comentarios.</p>"},{"location":"content/p7/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<p>El proyecto est\u00e1 organizado de la siguiente manera:</p> <pre><code>project/\n\u251c\u2500\u2500 routers/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 users.py\n\u2502   \u251c\u2500\u2500 posts.py\n\u2502   \u2514\u2500\u2500 comments.py\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 database.py\n\u2514\u2500\u2500 models.py\n</code></pre>"},{"location":"content/p7/#descripcion-de-los-archivos","title":"Descripci\u00f3n de los Archivos","text":"<ul> <li>main.py: Punto de entrada, inicializa FastAPI y conecta los routers.</li> <li>database.py: Gestiona la conexi\u00f3n y configuraci\u00f3n de la base de datos SQLite.</li> <li>models.py: Define los modelos de Pydantic para la validaci\u00f3n de datos.</li> <li>routers/: Contiene las definiciones de los endpoints para usuarios, publicaciones y comentarios.</li> </ul>"},{"location":"content/p7/#codigo","title":"C\u00f3digo","text":"<p>A continuaci\u00f3n, se presenta el c\u00f3digo fuente completo de cada archivo.</p>"},{"location":"content/p7/#mainpy","title":"main.py","text":"<pre><code>from fastapi import FastAPI\nfrom routers import users, posts, comments\nfrom database import init_db\n\napp = FastAPI(title=\"Blog API\")\n\n# Initialize database\ninit_db()\n\n# Include routers\napp.include_router(users.router)\napp.include_router(posts.router)\napp.include_router(comments.router)\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"content/p7/#databasepy","title":"database.py","text":"<pre><code>import sqlite3\nfrom contextlib import contextmanager\n\ndef get_db():\n    conn = sqlite3.connect(\"blog.db\")\n    conn.row_factory = sqlite3.Row\n    try:\n        yield conn\n    finally:\n        conn.close()\n\ndef init_db():\n    with sqlite3.connect(\"blog.db\") as conn:\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                email TEXT UNIQUE NOT NULL\n            )\n        \"\"\")\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS posts (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                title TEXT NOT NULL,\n                content TEXT NOT NULL,\n                user_id INTEGER,\n                created_at TEXT,\n                FOREIGN KEY (user_id) REFERENCES users (id)\n            )\n        \"\"\")\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS comments (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                content TEXT NOT NULL,\n                user_id INTEGER,\n                post_id INTEGER,\n                created_at TEXT,\n                FOREIGN KEY (user_id) REFERENCES users (id),\n                FOREIGN KEY (post_id) REFERENCES posts (id)\n            )\n        \"\"\")\n        conn.commit()\n</code></pre>"},{"location":"content/p7/#modelspy","title":"models.py","text":"<pre><code>from pydantic import BaseModel\nfrom typing import List, Optional\n\nclass UserCreate(BaseModel):\n    username: str\n    email: str\n\nclass UserResponse(BaseModel):\n    id: int\n    username: str\n    email: str\n\nclass PostCreate(BaseModel):\n    title: str\n    content: str\n\nclass PostResponse(BaseModel):\n    id: int\n    title: str\n    content: str\n    user_id: int\n    created_at: str\n\nclass CommentCreate(BaseModel):\n    content: str\n\nclass CommentResponse(BaseModel):\n    id: int\n    content: str\n    user_id: int\n    post_id: int\n    created_at: str\n</code></pre>"},{"location":"content/p7/#routersuserspy","title":"routers/users.py","text":"<pre><code>from fastapi import APIRouter, HTTPException, Depends\nfrom typing import List\nimport sqlite3\nfrom database import get_db\nfrom models import UserCreate, UserResponse\n\nrouter = APIRouter(prefix=\"/users\", tags=[\"users\"])\n\n@router.post(\"/\", response_model=UserResponse)\ndef create_user(user: UserCreate, db: sqlite3.Connection = Depends(get_db)):\n    cursor = db.cursor()\n    try:\n        cursor.execute(\n            \"INSERT INTO users (username, email) VALUES (?, ?)\",\n            (user.username, user.email)\n        )\n        db.commit()\n        return {\"id\": cursor.lastrowid, **user.dict()}\n    except sqlite3.IntegrityError:\n        raise HTTPException(status_code=400, detail=\"Username or email already exists\")\n\n@router.get(\"/\", response_model=List[UserResponse])\ndef get_users(db: sqlite3.Connection = Depends(get_db)):\n    cursor = db.cursor()\n    cursor.execute(\"SELECT * FROM users\")\n    return [{\"id\": row[\"id\"], \"username\": row[\"username\"], \"email\": row[\"email\"]} for row in cursor.fetchall()]\n\n@router.get(\"/{user_id}\", response_model=UserResponse)\ndef get_user(user_id: int, db: sqlite3.Connection = Depends(get_db)):\n    cursor = db.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\n    user = cursor.fetchone()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return {\"id\": user[\"id\"], \"username\": user[\"username\"], \"email\": user[\"email\"]}\n</code></pre>"},{"location":"content/p7/#routerspostspy","title":"routers/posts.py","text":"<pre><code>from fastapi import APIRouter, HTTPException, Depends\nfrom typing import List\nfrom datetime import datetime\nimport sqlite3\nfrom database import get_db\nfrom models import PostCreate, PostResponse\n\nrouter = APIRouter(prefix=\"/posts\", tags=[\"posts\"])\n\n@router.post(\"/\", response_model=PostResponse)\ndef create_post(post: PostCreate, user_id: int, db: sqlite3.Connection = Depends(get_db)):\n    cursor = db.cursor()\n    cursor.execute(\"SELECT id FROM users WHERE id = ?\", (user_id,))\n    if not cursor.fetchone():\n        raise HTTPException(status_code=404, detail=\"User not found\")\n\n    created_at = datetime.utcnow().isoformat()\n    cursor.execute(\n        \"INSERT INTO posts (title, content, user_id, created_at) VALUES (?, ?, ?, ?)\",\n        (post.title, post.content, user_id, created_at)\n    )\n    db.commit()\n    return {\"id\": cursor.lastrowid, **post.dict(), \"user_id\": user_id, \"created_at\": created_at}\n\n@router.get(\"/\", response_model=List[PostResponse])\ndef get_posts(db: sqlite3.Connection = Depends(get_db)):\n    cursor = db.cursor()\n    cursor.execute(\"SELECT * FROM posts\")\n    return [{\"id\": row[\"id\"], \"title\": row[\"title\"], \"content\": row[\"content\"], \n             \"user_id\": row[\"user_id\"], \"created_at\": row[\"created_at\"]} for row in cursor.fetchall()]\n\n@router.get(\"/{post_id}\", response_model=PostResponse)\ndef get_post(post_id: int, db: sqlite3.Connection = Depends(get_db)):\n    cursor = db.cursor()\n    cursor.execute(\"SELECT * FROM posts WHERE id = ?\", (post_id,))\n    post = cursor.fetchone()\n    if not post:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n    return {\"id\": post[\"id\"], \"title\": post[\"title\"], \"content\": post[\"content\"], \n            \"user_id\": post[\"user_id\"], \"created_at\": post[\"created_at\"]}\n</code></pre>"},{"location":"content/p7/#routerscommentspy","title":"routers/comments.py","text":"<pre><code>from fastapi import APIRouter, HTTPException, Depends\nfrom typing import List\nfrom datetime import datetime\nimport sqlite3\nfrom database import get_db\nfrom models import CommentCreate, CommentResponse\n\nrouter = APIRouter(prefix=\"/posts/{post_id}/comments\", tags=[\"comments\"])\n\n@router.post(\"/\", response_model=CommentResponse)\ndef create_comment(post_id: int, comment: CommentCreate, user_id: int, db: sqlite3.Connection = Depends(get_db)):\n    cursor = db.cursor()\n    cursor.execute(\"SELECT id FROM posts WHERE id = ?\", (post_id,))\n    if not cursor.fetchone():\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n\n    cursor.execute(\"SELECT id FROM users WHERE id = ?\", (user_id,))\n    if not cursor.fetchone():\n        raise HTTPException(status_code=404, detail=\"User not found\")\n\n    created_at = datetime.utcnow().isoformat()\n    cursor.execute(\n        \"INSERT INTO comments (content, user_id, post_id, created_at) VALUES (?, ?, ?, ?)\",\n        (comment.content, user_id, post_id, created_at)\n    )\n    db.commit()\n    return {\"id\": cursor.lastrowid, \"content\": comment.content, \"user_id\": user_id, \n            \"post_id\": post_id, \"created_at\": created_at}\n\n@router.get(\"/\", response_model=List[CommentResponse])\ndef get_comments(post_id: int, db: sqlite3.Connection = Depends(get_db)):\n    cursor = db.cursor()\n    cursor.execute(\"SELECT * FROM comments WHERE post_id = ?\", (post_id,))\n    return [{\"id\": row[\"id\"], \"content\": row[\"content\"], \"user_id\": row[\"user_id\"], \n             \"post_id\": row[\"post_id\"], \"created_at\": row[\"created_at\"]} for row in cursor.fetchall()]\n</code></pre>"},{"location":"content/p7/#instrucciones-de-configuracion","title":"Instrucciones de Configuraci\u00f3n","text":"<ol> <li>Crear la estructura del proyecto como se mostr\u00f3 anteriormente.</li> <li>Instalar las dependencias:    <pre><code>pip install fastapi uvicorn\n</code></pre></li> <li>Crear un archivo <code>__init__.py</code> vac\u00edo en el directorio <code>routers/</code>.</li> <li>Ejecutar el servidor desde el directorio <code>project/</code>:    <pre><code>uvicorn main:app --reload\n</code></pre></li> <li>Acceder a la documentaci\u00f3n interactiva en <code>http://localhost:8000/docs</code>.</li> </ol>"},{"location":"content/p7/#endpoints-de-la-api","title":"Endpoints de la API","text":"<p>La API proporciona los siguientes endpoints:</p>"},{"location":"content/p7/#usuarios","title":"Usuarios","text":"<ul> <li>POST /users/: Crear un nuevo usuario.</li> <li>Cuerpo: <code>{\"username\": \"string\", \"email\": \"string\"}</code></li> <li>Respuesta: <code>{\"id\": int, \"username\": \"string\", \"email\": \"string\"}</code></li> <li>GET /users/: Listar todos los usuarios.</li> <li>Respuesta: <code>[{\"id\": int, \"username\": \"string\", \"email\": \"string\"}, ...]</code></li> <li>GET /users/{user_id}: Obtener un usuario espec\u00edfico por ID.</li> <li>Respuesta: <code>{\"id\": int, \"username\": \"string\", \"email\": \"string\"}</code></li> </ul>"},{"location":"content/p7/#publicaciones","title":"Publicaciones","text":"<ul> <li>POST /posts/: Crear una nueva publicaci\u00f3n (requiere el par\u00e1metro <code>user_id</code> en la query).</li> <li>Query: <code>user_id=int</code></li> <li>Cuerpo: <code>{\"title\": \"string\", \"content\": \"string\"}</code></li> <li>Respuesta: <code>{\"id\": int, \"title\": \"string\", \"content\": \"string\", \"user_id\": int, \"created_at\": \"string\"}</code></li> <li>GET /posts/: Listar todas las publicaciones.</li> <li>Respuesta: <code>[{\"id\": int, \"title\": \"string\", \"content\": \"string\", \"user_id\": int, \"created_at\": \"string\"}, ...]</code></li> <li>GET /posts/{post_id}: Obtener una publicaci\u00f3n espec\u00edfica por ID.</li> <li>Respuesta: <code>{\"id\": int, \"title\": \"string\", \"content\": \"string\", \"user_id\": int, \"created_at\": \"string\"}</code></li> </ul>"},{"location":"content/p7/#comentarios","title":"Comentarios","text":"<ul> <li>POST /posts/{post_id}/comments/: Crear un nuevo comentario (requiere el par\u00e1metro <code>user_id</code> en la query).</li> <li>Query: <code>user_id=int</code></li> <li>Cuerpo: <code>{\"content\": \"string\"}</code></li> <li>Respuesta: <code>{\"id\": int, \"content\": \"string\", \"user_id\": int, \"post_id\": int, \"created_at\": \"string\"}</code></li> <li>GET /posts/{post_id}/comments/: Listar todos los comentarios de una publicaci\u00f3n espec\u00edfica.</li> <li>Respuesta: <code>[{\"id\": int, \"content\": \"string\", \"user_id\": int, \"post_id\": int, \"created_at\": \"string\"}, ...]</code></li> </ul>"},{"location":"content/p7/#urls-de-documentacion-swagger","title":"URLs de Documentaci\u00f3n Swagger","text":"<p>FastAPI genera autom\u00e1ticamente la documentaci\u00f3n de la API en formato OpenAPI/Swagger. Una vez que el servidor est\u00e9 ejecut\u00e1ndose, puedes acceder a las siguientes URLs:</p>"},{"location":"content/p7/#documentacion-interactiva","title":"Documentaci\u00f3n Interactiva","text":"<ul> <li>Swagger UI: <code>http://localhost:8000/docs</code></li> <li>Interfaz web interactiva para probar los endpoints</li> <li>Permite ejecutar requests directamente desde el navegador</li> <li> <p>Muestra ejemplos de request/response</p> </li> <li> <p>ReDoc: <code>http://localhost:8000/redoc</code></p> </li> <li>Documentaci\u00f3n alternativa con un dise\u00f1o m\u00e1s limpio</li> <li>Mejor para lectura y referencia</li> </ul>"},{"location":"content/p7/#archivo-json-de-documentacion","title":"Archivo JSON de Documentaci\u00f3n","text":"<ul> <li>OpenAPI Schema (JSON): <code>http://localhost:8000/openapi.json</code></li> <li>Esquema completo de la API en formato JSON</li> <li>\u00datil para generar clientes autom\u00e1ticamente</li> <li>Compatible con herramientas de testing como Postman</li> </ul>"},{"location":"content/p7/#como-descargar-el-archivo-json","title":"C\u00f3mo Descargar el Archivo JSON","text":""},{"location":"content/p7/#opcion-1-desde-el-navegador","title":"Opci\u00f3n 1: Desde el navegador","text":"<ol> <li>Ejecuta el servidor: <code>uvicorn main:app --reload</code></li> <li>Abre en el navegador: <code>http://localhost:8000/openapi.json</code></li> <li>Guarda el contenido como <code>api-docs.json</code></li> </ol>"},{"location":"content/p7/#opcion-2-usando-curl","title":"Opci\u00f3n 2: Usando curl","text":"<pre><code>curl -o api-docs.json http://localhost:8000/openapi.json\n</code></pre>"},{"location":"content/p7/#opcion-3-usando-wget","title":"Opci\u00f3n 3: Usando wget","text":"<pre><code>wget -O api-docs.json http://localhost:8000/openapi.json\n</code></pre>"},{"location":"content/p7/#opcion-4-usando-python","title":"Opci\u00f3n 4: Usando Python","text":"<pre><code>import requests\nimport json\n\nresponse = requests.get('http://localhost:8000/openapi.json')\nwith open('api-docs.json', 'w', encoding='utf-8') as f:\n    json.dump(response.json(), f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"content/p7/#personalizar-la-documentacion","title":"Personalizar la Documentaci\u00f3n","text":"<p>Puedes personalizar la documentaci\u00f3n modificando el archivo <code>main.py</code>:</p> <pre><code>from fastapi import FastAPI\nfrom routers import users, posts, comments\nfrom database import init_db\n\napp = FastAPI(\n    title=\"API de Blog\",\n    description=\"Una API RESTful para gestionar un blog con usuarios, publicaciones y comentarios\",\n    version=\"1.0.0\",\n    contact={\n        \"name\": \"Tu Nombre\",\n        \"email\": \"tu.email@ejemplo.com\",\n    },\n    license_info={\n        \"name\": \"MIT\",\n        \"url\": \"https://opensource.org/licenses/MIT\",\n    },\n)\n\n# Inicializar la base de datos\ninit_db()\n\n# Incluir los routers\napp.include_router(users.router)\napp.include_router(posts.router)\napp.include_router(comments.router)\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"content/p7/#importar-en-postman","title":"Importar en Postman","text":"<ol> <li>Abre Postman</li> <li>Haz clic en \"Import\"</li> <li>Selecciona \"Link\" y pega: <code>http://localhost:8000/openapi.json</code></li> <li>O descarga el archivo JSON y s\u00fabelo directamente</li> <li>Postman crear\u00e1 autom\u00e1ticamente una colecci\u00f3n con todos los endpoints</li> </ol>"},{"location":"content/p7/#notas","title":"Notas","text":"<ul> <li>La base de datos SQLite (<code>blog.db</code>) se crea autom\u00e1ticamente al iniciar la aplicaci\u00f3n.</li> <li>Usa par\u00e1metros de query para <code>user_id</code> en las solicitudes POST, por ejemplo, <code>/posts/?user_id=1</code>.</li> <li>La API incluye manejo de errores para IDs de usuarios o publicaciones inv\u00e1lidos y nombres de usuario/correos duplicados.</li> <li>La documentaci\u00f3n Swagger se actualiza autom\u00e1ticamente cuando modificas los endpoints o modelos.</li> <li>El archivo JSON generado es compatible con OpenAPI 3.0.</li> </ul>"},{"location":"content/p8/","title":"Tutorial: Crear una Aplicaci\u00f3n B\u00e1sica en Streamlit con Gemini API","text":"<p>Este tutorial te guiar\u00e1 paso a paso para crear una aplicaci\u00f3n web interactiva usando Streamlit y la Gemini API de Google Generative AI. La aplicaci\u00f3n permite a los usuarios ingresar un tema o pregunta y recibir una respuesta generada por la API. El c\u00f3digo base es el proporcionado anteriormente, integrado en una interfaz de Streamlit sin modificaciones al bloque original de la API.</p>"},{"location":"content/p8/#prerrequisitos","title":"Prerrequisitos","text":"<p>Antes de comenzar, aseg\u00farate de tener lo siguiente:</p> <ol> <li>Python instalado (versi\u00f3n 3.8 o superior).</li> <li>Clave de API de Google Generative AI:</li> <li>Reg\u00edstrate en Google AI Studio y genera una clave de API.</li> </ol>"},{"location":"content/p8/#paso-1-configurar-el-entorno","title":"Paso 1: Configurar el Entorno","text":"<ol> <li> <p>Crea un directorio para el proyecto:    <pre><code>mkdir gemini-streamlit-app\ncd gemini-streamlit-app\n</code></pre></p> </li> <li> <p>Crea un entorno virtual (opcional, pero recomendado):    <pre><code>python -m venv venv\nsource venv/bin/activate  # En Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Instala las dependencias necesarias:    Ejecuta el siguiente comando para instalar Streamlit y la biblioteca de Google Generative AI:    <pre><code>pip install -q -U google-genai\n</code></pre></p> </li> </ol>"},{"location":"content/p8/#paso-2-crear-el-codigo-de-la-aplicacion","title":"Paso 2: Crear el C\u00f3digo de la Aplicaci\u00f3n","text":"<p>Crea un archivo llamado <code>app_gemini_basica.py</code> y copia el siguiente c\u00f3digo. Este c\u00f3digo integra el bloque original de la Gemini API en una aplicaci\u00f3n Streamlit.</p> <pre><code>import streamlit as st\nfrom google import genai\n\n# Configuraci\u00f3n de la p\u00e1gina\nst.set_page_config(page_title=\"Chat B\u00e1sico con Gemini\", layout=\"centered\")\nst.title(\"\ud83d\udcac Chat con Gemini\")\nst.markdown(\"Ingresa un tema o pregunta para obtener una respuesta generada por Gemini.\")\n\n# Interfaz de usuario\nprompt = st.text_input(\"Escribe tu pregunta o tema:\", placeholder=\"Ej. Explica c\u00f3mo funciona la IA en pocas palabras\")\nenviar = st.button(\"Generar Respuesta\")\n\n# Funci\u00f3n que usa el c\u00f3digo original\ndef generar_respuesta(prompt):\n    if not prompt:\n        return \"Por favor, ingresa un tema o pregunta.\"\n    try:\n        client = genai.Client(api_key=\"YOUR_API_KEY\")  # C\u00f3digo original\n        response = client.models.generate_content(\n            model=\"gemini-2.0-flash\", contents=prompt  # C\u00f3digo original con prompt din\u00e1mico\n        )\n        return response.text  # C\u00f3digo original\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# L\u00f3gica principal\nif enviar and prompt:\n    with st.spinner(\"Generando respuesta...\"):\n        respuesta = generar_respuesta(prompt)\n        st.subheader(\"Respuesta:\")\n        st.markdown(respuesta)\nelse:\n    st.info(\"Escribe un tema o pregunta y haz clic en Generar Respuesta.\")\n</code></pre>"},{"location":"content/p8/#explicacion-del-codigo","title":"Explicaci\u00f3n del C\u00f3digo","text":"<ul> <li>Importaciones:</li> <li><code>streamlit</code>: Biblioteca para crear la interfaz web.</li> <li><code>google.genai</code>: Biblioteca para interactuar con la Gemini API.</li> <li>Configuraci\u00f3n de Streamlit:</li> <li><code>st.set_page_config</code>: Define el t\u00edtulo de la p\u00e1gina y el dise\u00f1o.</li> <li><code>st.title</code> y <code>st.markdown</code>: Agregan un t\u00edtulo y una descripci\u00f3n.</li> <li>Interfaz de usuario:</li> <li><code>st.text_input</code>: Crea un campo de texto para que el usuario ingrese un prompt.</li> <li><code>st.button</code>: Agrega un bot\u00f3n para enviar el prompt.</li> <li>Funci\u00f3n <code>generar_respuesta</code>:</li> <li>Usa el c\u00f3digo original sin modificaciones, solo reemplazando el prompt fijo por el ingresado por el usuario.</li> <li>Incluye manejo de errores y verificaci\u00f3n de prompt vac\u00edo.</li> <li>L\u00f3gica principal:</li> <li>Si el usuario hace clic en \"Generar Respuesta\" y hay un prompt, se llama a <code>generar_respuesta</code> y se muestra la respuesta en la interfaz.</li> </ul>"},{"location":"content/p8/#paso-3-configurar-la-clave-de-api","title":"Paso 3: Configurar la Clave de API","text":"<ol> <li>Obt\u00e9n tu clave de API:</li> <li>Ve a Google AI Studio.</li> <li>Crea un proyecto y genera una clave de API.</li> <li>Inserta la clave en el c\u00f3digo:</li> <li>Abre <code>app_gemini_basica.py</code>.</li> <li>Reemplaza <code>\"YOUR_API_KEY\"</code> en la l\u00ednea <code>client = genai.Client(api_key=\"YOUR_API_KEY\")</code> con tu clave real, por ejemplo:      <pre><code>client = genai.Client(api_key=\"tu_clave_de_api_aqu\u00ed\")\n</code></pre></li> <li>Advertencia: No compartas el c\u00f3digo con la clave de API en repositorios p\u00fablicos, ya que es informaci\u00f3n sensible.</li> </ol>"},{"location":"content/p8/#paso-4-ejecutar-la-aplicacion","title":"Paso 4: Ejecutar la Aplicaci\u00f3n","text":"<ol> <li>Guarda el archivo <code>app_gemini_basica.py</code> en tu directorio de trabajo.</li> <li>Ejecuta la aplicaci\u00f3n:    En la terminal, con el entorno virtual activado, ejecuta:    <pre><code>streamlit run app_gemini_basica.py\n</code></pre></li> <li>Accede a la aplicaci\u00f3n:</li> <li>Streamlit abrir\u00e1 autom\u00e1ticamente una ventana en tu navegador con la URL <code>http://localhost:8501</code>.</li> <li>Si no se abre, ingresa manualmente esa URL en tu navegador.</li> </ol>"},{"location":"content/p8/#paso-5-usar-la-aplicacion","title":"Paso 5: Usar la Aplicaci\u00f3n","text":"<ol> <li>Ingresa un prompt:</li> <li>En el campo de texto, escribe una pregunta o tema, por ejemplo: \"Explica c\u00f3mo funciona la IA en pocas palabras\".</li> <li>Genera la respuesta:</li> <li>Haz clic en el bot\u00f3n \"Generar Respuesta\".</li> <li>La aplicaci\u00f3n mostrar\u00e1 un mensaje de \"Generando respuesta...\" mientras procesa.</li> <li>La respuesta de la Gemini API aparecer\u00e1 en la secci\u00f3n \"Respuesta\" en formato markdown.</li> <li>Prueba diferentes prompts:</li> <li>Intenta con preguntas como \"Describe la fotos\u00edntesis\" o \"Escribe un poema corto\".</li> </ol>"},{"location":"content/p9/","title":"Clase 9: Streamlit B\u00e1sico - Consumir API","text":""},{"location":"content/p9/#que-es-streamlit","title":"\u00bfQu\u00e9 es Streamlit?","text":"<p>Streamlit es una herramienta que convierte c\u00f3digo Python en p\u00e1ginas web. Es muy f\u00e1cil de usar.</p>"},{"location":"content/p9/#instalacion","title":"Instalaci\u00f3n","text":"<pre><code>pip install streamlit requests\n</code></pre>"},{"location":"content/p9/#ejemplo-1-mi-primera-app","title":"Ejemplo 1: Mi Primera App","text":"<p>Crea un archivo llamado <code>app.py</code>:</p> <pre><code>import streamlit as st\nimport requests\n\nst.title(\"Mi Primera App\")\n\nif st.button(\"Obtener datos\"):\n    response = requests.get(\"https://jsonplaceholder.typicode.com/users\")\n    datos = response.json()\n\n    st.write(f\"Encontr\u00e9 {len(datos)} usuarios\")\n\n    for usuario in datos:\n        st.write(f\"- {usuario['name']} ({usuario['email']})\")\n</code></pre> <p>Ejecutar: <pre><code>streamlit run app.py\n</code></pre></p>"},{"location":"content/p9/#ejemplo-2-mostrar-informacion-de-usuario","title":"Ejemplo 2: Mostrar Informaci\u00f3n de Usuario","text":"<pre><code>import streamlit as st\nimport requests\n\nst.title(\"Informaci\u00f3n de Usuario\")\n\n# Selector de usuario\nuser_id = st.selectbox(\"Elige un usuario:\", [1, 2, 3, 4, 5])\n\nif st.button(\"Ver informaci\u00f3n\"):\n    url = f\"https://jsonplaceholder.typicode.com/users/{user_id}\"\n    response = requests.get(url)\n    usuario = response.json()\n\n    st.write(f\"**Nombre:** {usuario['name']}\")\n    st.write(f\"**Email:** {usuario['email']}\")\n    st.write(f\"**Tel\u00e9fono:** {usuario['phone']}\")\n    st.write(f\"**Ciudad:** {usuario['address']['city']}\")\n</code></pre>"},{"location":"content/p9/#ejemplo-3-formulario-simple","title":"Ejemplo 3: Formulario Simple","text":"<pre><code>import streamlit as st\nimport requests\n\nst.title(\"Crear Post\")\n\n# Formulario\ntitulo = st.text_input(\"T\u00edtulo:\")\ncontenido = st.text_area(\"Contenido:\")\n\nif st.button(\"Enviar\"):\n    if titulo and contenido:\n        datos = {\n            \"title\": titulo,\n            \"body\": contenido,\n            \"userId\": 1\n        }\n\n        response = requests.post(\n            \"https://jsonplaceholder.typicode.com/posts\",\n            json=datos\n        )\n\n        if response.status_code == 201:\n            st.success(\"\u00a1Post creado!\")\n        else:\n            st.error(\"Error al crear post\")\n    else:\n        st.warning(\"Completa todos los campos\")\n</code></pre>"},{"location":"content/p9/#widgets-basicos","title":"Widgets B\u00e1sicos","text":""},{"location":"content/p9/#entrada-de-texto","title":"Entrada de texto","text":"<pre><code>nombre = st.text_input(\"Tu nombre:\")\nmensaje = st.text_area(\"Tu mensaje:\")\n</code></pre>"},{"location":"content/p9/#numeros","title":"N\u00fameros","text":"<pre><code>edad = st.number_input(\"Tu edad:\", min_value=0, max_value=100)\n</code></pre>"},{"location":"content/p9/#seleccion","title":"Selecci\u00f3n","text":"<pre><code>color = st.selectbox(\"Color favorito:\", [\"Rojo\", \"Azul\", \"Verde\"])\n</code></pre>"},{"location":"content/p9/#checkbox","title":"Checkbox","text":"<pre><code>acepto = st.checkbox(\"Acepto los t\u00e9rminos\")\n</code></pre>"},{"location":"content/p9/#botones","title":"Botones","text":"<pre><code>if st.button(\"Hacer clic\"):\n    st.write(\"\u00a1Hiciste clic!\")\n</code></pre>"},{"location":"content/p9/#mostrar-informacion","title":"Mostrar Informaci\u00f3n","text":""},{"location":"content/p9/#texto-simple","title":"Texto simple","text":"<pre><code>st.write(\"Hola mundo\")\nst.text(\"Texto simple\")\n</code></pre>"},{"location":"content/p9/#mensajes","title":"Mensajes","text":"<pre><code>st.success(\"Todo bien\")\nst.error(\"Algo sali\u00f3 mal\")\nst.warning(\"Cuidado\")\nst.info(\"Informaci\u00f3n\")\n</code></pre>"},{"location":"content/p9/#datos","title":"Datos","text":"<pre><code>st.json({\"nombre\": \"Juan\", \"edad\": 25})\n</code></pre>"},{"location":"content/p9/#layout-basico","title":"Layout B\u00e1sico","text":""},{"location":"content/p9/#columnas","title":"Columnas","text":"<pre><code>col1, col2 = st.columns(2)\n\nwith col1:\n    st.write(\"Columna 1\")\n\nwith col2:\n    st.write(\"Columna 2\")\n</code></pre>"},{"location":"content/p9/#sidebar","title":"Sidebar","text":"<pre><code>st.sidebar.write(\"Men\u00fa lateral\")\nopcion = st.sidebar.selectbox(\"Opciones:\", [\"A\", \"B\", \"C\"])\n</code></pre>"},{"location":"content/p9/#ejemplo-completo-lista-de-posts","title":"Ejemplo Completo: Lista de Posts","text":"<pre><code>import streamlit as st\nimport requests\n\nst.title(\"\ud83d\udcdd Lista de Posts\")\n\n# Sidebar\nst.sidebar.title(\"Filtros\")\nuser_filter = st.sidebar.selectbox(\n    \"Usuario:\", \n    [0, 1, 2, 3, 4, 5],\n    format_func=lambda x: \"Todos\" if x == 0 else f\"Usuario {x}\"\n)\n\n# Bot\u00f3n para cargar\nif st.button(\"Cargar Posts\"):\n    # URL base\n    url = \"https://jsonplaceholder.typicode.com/posts\"\n\n    # Agregar filtro si es necesario\n    if user_filter &gt; 0:\n        url += f\"?userId={user_filter}\"\n\n    # Hacer petici\u00f3n\n    response = requests.get(url)\n    posts = response.json()\n\n    # Mostrar resultados\n    st.write(f\"**Encontrados:** {len(posts)} posts\")\n\n    # Mostrar cada post\n    for post in posts:\n        with st.expander(f\"Post {post['id']}: {post['title'][:30]}...\"):\n            st.write(f\"**Usuario ID:** {post['userId']}\")\n            st.write(f\"**T\u00edtulo completo:** {post['title']}\")\n            st.write(f\"**Contenido:** {post['body']}\")\n</code></pre>"},{"location":"content/p9/#manejo-de-errores-simple","title":"Manejo de Errores Simple","text":"<pre><code>import streamlit as st\nimport requests\n\ndef obtener_datos(url):\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            return response.json()\n        else:\n            st.error(f\"Error: {response.status_code}\")\n            return None\n    except:\n        st.error(\"No se pudo conectar\")\n        return None\n\n# Uso\ndatos = obtener_datos(\"https://jsonplaceholder.typicode.com/users\")\nif datos:\n    st.write(\"Datos cargados correctamente\")\n    st.write(datos)\n</code></pre>"},{"location":"content/p9/#cache-simple","title":"Cache Simple","text":"<pre><code>@st.cache_data\ndef cargar_usuarios():\n    response = requests.get(\"https://jsonplaceholder.typicode.com/users\")\n    return response.json()\n\n# Los datos se cargan solo una vez\nusuarios = cargar_usuarios()\nst.write(usuarios)\n</code></pre>"},{"location":"content/p9/#comandos-utiles","title":"Comandos \u00datiles","text":"<pre><code># Ejecutar app\nstreamlit run app.py\n\n# Ejecutar en otro puerto\nstreamlit run app.py --server.port 8502\n\n# Ver ayuda\nstreamlit --help\n</code></pre>"},{"location":"content/p9/#estructura-de-archivos","title":"Estructura de Archivos","text":"<pre><code>mi_proyecto/\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 README.md\n</code></pre> <p>requirements.txt: <pre><code>streamlit\nrequests\n</code></pre></p>"},{"location":"tutorial/p1/","title":"\ud83d\udcd8 Python","text":"<p>Python es un lenguaje de programaci\u00f3n de alto nivel, de prop\u00f3sito general, que fue creado por Guido van Rossum en el a\u00f1o 1989. Es un lenguaje intuitivo, f\u00e1cil de aprender y con una sintaxis clara y legible, que lo hace accesible tanto para principiantes como para programadores experimentados.</p> <p>Python se utiliza ampliamente en una gran variedad de aplicaciones, desde el desarrollo de aplicaciones web hasta la automatizaci\u00f3n de tareas, el an\u00e1lisis de datos y la inteligencia artificial. Tambi\u00e9n es muy popular en la comunidad cient\u00edfica y en la investigaci\u00f3n, gracias a la gran cantidad de bibliotecas y herramientas disponibles que lo hacen muy \u00fatil para el c\u00e1lculo y la visualizaci\u00f3n de datos.</p> <p>Adem\u00e1s de ser f\u00e1cil de aprender y de utilizar, Python tambi\u00e9n es un lenguaje de c\u00f3digo abierto, lo que significa que est\u00e1 disponible gratuitamente y que hay una gran comunidad de desarrolladores que contribuyen a su desarrollo y mejora.</p>"},{"location":"tutorial/p1/#python-lenguaje-interpretado","title":"Python - Lenguaje interpretado","text":"<p>Python es un lenguaje de programaci\u00f3n interpretado de alto nivel. Esto significa que no se traduce a c\u00f3digo de m\u00e1quina antes de ejecutarse. En su lugar, se ejecuta l\u00ednea por l\u00ednea por un int\u00e9rprete. Este proceso de interpretaci\u00f3n puede ser m\u00e1s lento que la ejecuci\u00f3n de c\u00f3digo compilado, pero tiene algunas ventajas. Por ejemplo, los programas interpretados pueden ser m\u00e1s f\u00e1ciles de depurar y depurar. Tambi\u00e9n pueden ser portables a diferentes plataformas, ya que no necesitan ser compilados para cada plataforma espec\u00edfica.</p>"},{"location":"tutorial/p1/#tabla-comparativa-lenguajes-compilados-vs-lenguajes-interpretados","title":"Tabla comparativa: Lenguajes compilados vs. Lenguajes interpretados","text":"Criterio Lenguajes compilados Lenguajes interpretados Ejemplos C, C++, Rust, Go, Haskell Python, Ruby, JavaScript, PHP Traducci\u00f3n Se realiza una vez, antes de la ejecuci\u00f3n Se realiza cada vez que se ejecuta el programa Velocidad Suelen ser m\u00e1s r\u00e1pidos y eficientes Suelen ser m\u00e1s lentos y consumir m\u00e1s recursos Portabilidad Dependen de la plataforma y el compilador Son independientes de la plataforma y el int\u00e9rprete Depuraci\u00f3n Es m\u00e1s dif\u00edcil encontrar y corregir errores Es m\u00e1s f\u00e1cil encontrar y corregir errores Flexibilidad Suelen ser m\u00e1s r\u00edgidos y estrictos Suelen ser m\u00e1s din\u00e1micos y flexibles Control Permiten un mayor control sobre el hardware Abstraen el hardware y lo gestionan autom\u00e1ticamente Tama\u00f1o Suelen generar archivos ejecutables m\u00e1s grandes Suelen generar archivos de c\u00f3digo fuente m\u00e1s peque\u00f1os <p>M\u00e1s informaci\u00f3n acerca de lenguajes interpretados</p>"},{"location":"tutorial/p1/#instalacion-de-python","title":"Instalaci\u00f3n de Python","text":"<p>La instalaci\u00f3n de Python depende del sistema operativo que est\u00e9 utilizando. Aqu\u00ed se describen los pasos para instalar Python en los sistemas operativos m\u00e1s comunes:</p> <ul> <li>Windows: Descargue el instalador de Python desde el sitio web oficial de Python (https://www.python.org/downloads/).   Ejecute el instalador y siga las instrucciones en pantalla para instalar Python en su computadora.   Verifique que Python est\u00e1 instalado correctamente abriendo el s\u00edmbolo del sistema y escribiendo python y presionando Enter.</li> <li>macOS: Descargue el instalador de Python desde el sitio web oficial de Python (https://www.python.org/downloads/).   Ejecute el instalador y siga las instrucciones en pantalla para instalar Python en su computadora.   Verifique que Python est\u00e1 instalado correctamente abriendo la terminal y escribiendo python y presionando Enter.</li> <li>Linux: La mayor\u00eda de las distribuciones de Linux ya vienen con Python preinstalado. Para verificar si Python est\u00e1 instalado, abra una terminal y escriba python y presione Enter.</li> </ul> <p>Si no est\u00e1 instalado, puede instalar Python desde los repositorios de software de su distribuci\u00f3n de Linux. Por ejemplo, en Ubuntu, puede instalar Python escribiendo sudo apt-get install python en una terminal. Una vez que Python est\u00e9 instalado, puede comenzar a escribir y ejecutar programas en Python utilizando un editor de texto o un entorno de desarrollo integrado (IDE). Hay muchas opciones disponibles, incluyendo IDLE (incluido con la instalaci\u00f3n de Python), PyCharm, Visual Studio Code, entre otros.</p>"},{"location":"tutorial/p1/#descargar-python","title":"Descargar Python","text":""},{"location":"tutorial/p1/#sangrado-en-python","title":"Sangrado en Python","text":"<p>Sangrado (o indentaci\u00f3n) es un espacio en blanco al comienzo de una l\u00ednea de c\u00f3digo que se usa para resaltar la estructura y la organizaci\u00f3n del c\u00f3digo. El sangrado hace que el c\u00f3digo sea m\u00e1s legible visualmente agrupando l\u00edneas relacionadas.</p> <p>Es una forma de organizar visualmente el c\u00f3digo para facilitar su lectura. Se utilizan espacios o tabs para \"sangrar\" <code>(indentar)</code> determinadas l\u00edneas de c\u00f3digo.</p> <p>Python requiere sangrado de forma estricta, de tal manera que el sangrado indica la estructura y bloques de c\u00f3digo. Por ejemplo:</p> <pre><code>if condition:\n    print(\"Verdadero\")\nelse:\n    print(\"Falso\")\n</code></pre> <p>Aqu\u00ed el sangrado indica que la l\u00ednea print(\"Verdadero\") est\u00e1 dentro del bloque if, mientras que la l\u00ednea print(\"Falso\") est\u00e1 dentro del bloque else.</p> <p>Otro ejemplo:</p> <pre><code>for i in  range(5):\n print(i)\n</code></pre> <p>La l\u00ednea print(i) est\u00e1 sangrada debajo del bucle for, indicando que se ejecutar\u00e1 en cada iteraci\u00f3n.</p> <p>Algunos puntos sobre el sangrado en Python:</p> <ul> <li> <p>Es obligatorio. Python usa el sangrado para determinar la estructura del c\u00f3digo.</p> </li> <li> <p>Es estricto. El sangrado debe ser consistente dentro de un bloque, usar espacios no tabs.</p> </li> <li> <p>Se recomiendan 4 espacios, aunque Python tambi\u00e9n acepta tabs.</p> </li> <li> <p>No puede mezclar espacios y tabs dentro de un bloque.</p> </li> </ul> <p>El sangrado hace que el c\u00f3digo Python sea m\u00e1s legible visualmente, ayudando a agrupar l\u00edneas relacionadas y resaltando la estructura anidada. Por eso es una parte importante del estilo de codificaci\u00f3n en Python.</p>"},{"location":"tutorial/p1/#variables-en-python","title":"Variables en python","text":"<p>En Python, las variables son usadas para almacenar informaci\u00f3n y pueden ser referenciadas por un nombre.</p> <p>Para crear una variable en Python, simplemente asignamos un valor a un nombre. Por ejemplo:</p> <pre><code>nombre = \"Juan\"\nedad = 25\nprint(\"Mi nombre es\", nombre)\nprint(\"Tengo\", edad, \"a\u00f1os\")\n</code></pre> <p>:::info Reglas</p> <p>En Python, hay ciertas reglas que deben seguirse al crear identificadores de variables:</p> <ul> <li> <p>Deben comenzar con una letra o un gui\u00f3n bajo.</p> </li> <li> <p>No pueden comenzar con un n\u00famero.</p> </li> <li> <p>No pueden contener espacios en blanco.</p> </li> <li> <p>No pueden ser una palabra reservada en Python (por ejemplo, \"if\", \"else\", \"for\", etc.).</p> </li> <li> <p>Deben ser \u00fanicos y significativos.</p> </li> <li> <p>Deben ser descriptivos y en min\u00fasculas, separando palabras con guiones bajos.</p> </li> </ul> <p>:::</p> <pre><code>#Identificadores v\u00e1lidos\nnombre = \"Juan\"\nedad = 25\n_nombre_completo = \"Juan P\u00e9rez\"\n#Identificadores inv\u00e1lidos\n123nombre = \"Juan\" # Comienza con un n\u00famero\nnombre-completo = \"Juan P\u00e9rez\" # Contiene un gui\u00f3n\nif = \"condicional\" # Es una palabra reservada\n</code></pre>"},{"location":"tutorial/p1/#snake-case","title":"Snake case","text":"<p>El snake case es una convenci\u00f3n de nomenclatura muy utilizada en Python para nombrar variables, funciones y m\u00f3dulos. Aqu\u00ed tienes una explicaci\u00f3n m\u00e1s detallada:</p> <ol> <li>Definici\u00f3n: Snake case consiste en escribir palabras en min\u00fasculas, separ\u00e1ndolas con guiones bajos (_).</li> <li>Uso en Python:<ul> <li>Variables: mi_variable, contador, nombre_usuario</li> <li>Funciones: calcular_promedio(), obtener_datos(), imprimir_resultado()</li> <li>M\u00f3dulos: utilidades.py, procesamiento_datos.py</li> </ul> </li> <li>Ejemplos:</li> </ol> <pre><code># Variables\nnumero_de_usuarios = 100\nnombre_completo = \"Juan P\u00e9rez\"\n\n# Funci\u00f3n\ndef calcular_area_rectangulo(largo, ancho):\n    return largo * ancho\n\n# Llamada a funci\u00f3n\narea = calcular_area_rectangulo(5, 3)\n\n# En una clase\nclass ProcesadorTexto:\n    def __init__(self):\n        self.texto_actual = \"\"\n\n    def contar_palabras(self):\n        return len(self.texto_actual.split())\n</code></pre> <ol> <li>Ventajas:<ul> <li>Mejora la legibilidad del c\u00f3digo</li> <li>Es consistente con la filosof\u00eda de Python de c\u00f3digo expl\u00edcito y claro</li> <li>Facilita la distinci\u00f3n entre variables/funciones y clases (que usan PascalCase)</li> </ul> </li> <li>Cu\u00e1ndo no usar snake case:<ul> <li>Nombres de clases (usar PascalCase)</li> <li>Constantes (usar MAY\u00daSCULAS_CON_GUIONES_BAJOS)</li> </ul> </li> <li>Consideraciones:<ul> <li>Evitar nombres de una sola letra, excepto para contadores o \u00edndices muy simples</li> <li>Usar nombres descriptivos pero no excesivamente largos</li> </ul> </li> </ol>"},{"location":"tutorial/p1/#constantes-en-python","title":"Constantes en Python","text":"<p>Las constantes en Python son un concepto un poco diferente comparado con otros lenguajes de programaci\u00f3n. </p> <ol> <li>Convenci\u00f3n de nombrado:<ul> <li>Se escriben en MAY\u00daSCULAS_CON_GUIONES_BAJOS</li> <li>Ejemplo: MAX_VALUE, PI, DEFAULT_CONFIG</li> </ul> </li> <li>Declaraci\u00f3n: En Python, t\u00e9cnicamente no existen constantes \"verdaderas\". Se usan variables regulares, pero por convenci\u00f3n, se tratan como constantes.</li> </ol> <pre><code>x = 5 # n\u00famero entero\ny = 5.0 # n\u00famero flotante\nz = 3 + 4j # n\u00famero complejo\n</code></pre>"},{"location":"tutorial/p1/#tipos-de-datos-en-python","title":"Tipos de datos en python","text":"<p>En Python, existen diferentes tipos de datos que se pueden utilizar para almacenar informaci\u00f3n. Aqu\u00ed hay algunos de los tipos de datos m\u00e1s comunes:</p> <ol> <li>N\u00fameros: Python tiene soporte para n\u00fameros enteros (int), n\u00fameros flotantes (float) y n\u00fameros complejos (complex). Por ejemplo:</li> </ol> <pre><code>x = 5 # n\u00famero entero\ny = 5.0 # n\u00famero flotante\nz = 3 + 4j # n\u00famero complejo\n</code></pre> <ol> <li>Cadenas: Las cadenas en Python se usan para representar texto y se escriben entre comillas simples o dobles. Por ejemplo:</li> </ol> <pre><code>nombre = \"John Doe\"\napellido = 'Smith'\n</code></pre> <ol> <li>Listas: Las listas en Python son secuencias ordenadas de valores, que pueden ser de cualquier tipo de datos. Por ejemplo:</li> </ol> <pre><code>frutas = [\"manzana\", \"banana\", \"pera\"]\nnumeros = [1, 2, 3, 4, 5]\n</code></pre> <ol> <li>Tuplas: Las tuplas son similares a las listas, pero son inmutables y no se pueden modificar una vez creadas. Por ejemplo:</li> </ol> <pre><code>colores = (\"rojo\", \"verde\", \"azul\")\n</code></pre> <ol> <li>Diccionarios: Los diccionarios en Python son estructuras de datos no ordenadas que asocian claves con valores. Por ejemplo:</li> </ol> <pre><code>persona = {\n \"nombre\": \"John Doe\",\n \"edad\": 30,\n \"ciudad\": \"New York\"\n}\n</code></pre>"},{"location":"tutorial/p1/#comentarios-en-python","title":"Comentarios en python","text":"<p>Los comentarios en Python son l\u00edneas de texto que se utilizan para describir el c\u00f3digo y ayudar a otros programadores a comprenderlo. Los comentarios no son interpretados por Python y no tienen ning\u00fan impacto en el funcionamiento del programa.</p> <p>Hay dos maneras de crear comentarios en Python:</p> <ol> <li>Usando el car\u00e1cter #:</li> </ol> <pre><code># Este es un comentario en una sola l\u00ednea\nx = 5 # Este es un comentario en la misma l\u00ednea que el c\u00f3digo\n</code></pre> <ol> <li>Usando tres comillas dobles:</li> </ol> <pre><code>\"\"\"\nEste es un comentario\nen varias l\u00edneas\n\"\"\"\n</code></pre>"},{"location":"tutorial/p1/#la-funcion-print-de-python","title":"La funci\u00f3n print() de Python","text":"<p>La funci\u00f3n <code>print()</code> en Python es una herramienta fundamental para mostrar informaci\u00f3n en la pantalla. Es una funci\u00f3n integrada que se utiliza para imprimir cadenas de texto, variables, valores y otras expresiones.</p> <p>Sintaxis b\u00e1sica:</p> <pre><code>print(objeto)\n</code></pre> <p>Par\u00e1metros:</p> <ul> <li>objeto:\u00a0Puede ser una cadena de texto (entre comillas simples o dobles), una variable, una expresi\u00f3n, un objeto, etc.</li> </ul> <p>Ejemplos:</p> <pre><code># Imprimir una cadena de texto\nprint(\"Hola mundo!\")\n# Imprimir una variable\nnombre = \"Ana\"\nprint(nombre)\n# Imprimir una expresi\u00f3n\nsuma = 1 + 2\nprint(suma)\n# Imprimir m\u00faltiples objetos\nprint(\"El resultado es:\", suma, \"y el nombre es:\", nombre)\n</code></pre> <p>Opciones adicionales:</p> <ul> <li>Separador:\u00a0Se puede usar el argumento\u00a0<code>sep</code>\u00a0para especificar el separador entre los objetos que se imprimen. El valor por defecto es un espacio.</li> </ul> <pre><code>print(\"a\", \"b\", \"c\", sep=\", \")\n</code></pre> <p>Salida: <pre><code>a, b, c\n</code></pre></p> <ul> <li>Fin de l\u00ednea:\u00a0El argumento\u00a0<code>end</code>\u00a0define el car\u00e1cter que se imprime al final de la salida. El valor por defecto es un salto de l\u00ednea (<code>\\n</code>).</li> </ul> <pre><code>print(\"Primera l\u00ednea\", end=\" \")\nprint(\"Segunda l\u00ednea\")\n</code></pre> <p>Salida:</p> <pre><code>Primera l\u00ednea Segunda l\u00ednea\n</code></pre> <ul> <li>Formateo de cadenas f:\u00a0Python 3.6 introdujo las cadenas f, que permiten formatear cadenas de forma m\u00e1s elegante.</li> </ul> <pre><code>edad = 25\nprint(f\"Hola, me llamo {nombre} y tengo {edad} a\u00f1os.\")\n</code></pre> <p>Salida:</p> <pre><code>Hola, me llamo Ana y tengo 25 a\u00f1os.\n</code></pre>"},{"location":"tutorial/p1/#la-funcion-input-en-python","title":"La funci\u00f3n\u00a0<code>input()</code>\u00a0en Python","text":"<p>La funci\u00f3n <code>input()</code> en Python es indispensable para interactuar con el usuario y obtener informaci\u00f3n que introduzca por teclado.</p> <p>Sintaxis:</p> <pre><code>entrada = input(prompt)\n</code></pre> <p>Par\u00e1metros:</p> <ul> <li>prompt (opcional):\u00a0Es una cadena de texto que se muestra al usuario antes de que introduzca la informaci\u00f3n. Esta cadena sirve para guiar al usuario sobre qu\u00e9 tipo de informaci\u00f3n se espera.</li> </ul> <p>Retorno:</p> <p>La funci\u00f3n <code>input()</code> siempre devuelve un string, incluso si el usuario introduce un n\u00famero. Esto significa que si necesita trabajar con la informaci\u00f3n como un n\u00famero, deber\u00e1 convertirla expl\u00edcitamente usando funciones como <code>int()</code>, <code>float()</code>, etc.</p> <p>Ejemplos:</p> <pre><code># Pedir el nombre del usuario\nnombre = input(\"\u00bfC\u00f3mo te llamas? \")\nprint(f\"Hola, {nombre}!\")\n# Solicitar dos n\u00fameros y sumarlos\nnum1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\nsuma = num1 + num2\nprint(f\"La suma es: {suma}\")\n</code></pre> <p>Puntos a tener en cuenta:</p> <ul> <li> <p>La funci\u00f3n\u00a0<code>input()</code>\u00a0siempre espera que el usuario pulse la tecla\u00a0<code>Enter</code>\u00a0para finalizar la entrada.</p> </li> <li> <p>Si no se proporciona un\u00a0<code>prompt</code>, la funci\u00f3n muestra un mensaje gen\u00e9rico como\u00a0<code>Introduce un valor:</code>.</p> </li> <li> <p>Se recomienda usar el\u00a0<code>prompt</code>\u00a0para guiar al usuario y evitar confusiones.</p> </li> <li> <p>Para procesar la entrada como un tipo de dato espec\u00edfico, use funciones de conversi\u00f3n como\u00a0<code>int()</code>,\u00a0<code>float()</code>, etc.</p> </li> </ul>"},{"location":"tutorial/p1/#estructuras-de-control-condicionales","title":"Estructuras de control condicionales","text":"<p>Los condicionales en Python permiten ejecutar c\u00f3digo solo si se cumple una determinada condici\u00f3n. Esto es muy \u00fatil para controlar el flujo de un programa y tomar decisiones basadas en diferentes situaciones.</p>"},{"location":"tutorial/p1/#la-estructura-if","title":"La estructura if","text":"<p>La estructura if es la estructura condicional m\u00e1s b\u00e1sica en Python. Se utiliza para evaluar una condici\u00f3n y ejecutar un bloque de c\u00f3digo si la condici\u00f3n es verdadera.</p> <p>La sintaxis de la estructura if es la siguiente:</p> <pre><code>if condici\u00f3n:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n es verdadera\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres mayor de edad\" si la variable edad es mayor o igual a 18:</p> <pre><code>edad = 18\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\n</code></pre>"},{"location":"tutorial/p1/#la-estructura-elif","title":"La estructura elif","text":"<p>La estructura elif se utiliza para agregar condiciones adicionales a una estructura if. Se eval\u00faan secuencialmente, y el bloque de c\u00f3digo correspondiente a la primera condici\u00f3n que se cumple se ejecuta.</p> <p>La sintaxis de la estructura elif es la siguiente:</p> <pre><code>if condici\u00f3n 1:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 1 es verdadera\nelif condici\u00f3n 2:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 2 es verdadera\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres mayor de edad\", \"Eres adolescente\" o \"Eres menor de edad\", dependiendo de la edad del usuario:</p> <pre><code>edad = 17\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\nelif edad &gt;= 16:\n print(\"Eres adolescente\")\nelse:\n print(\"Eres menor de edad\")\n</code></pre>"},{"location":"tutorial/p1/#la-estructura-else","title":"La estructura else","text":"<p>La estructura else se utiliza para ejecutar un bloque de c\u00f3digo si ninguna de las condiciones anteriores se cumple.</p> <p>La sintaxis de la estructura else es la siguiente:</p> <pre><code>if condici\u00f3n 1:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 1 es verdadera\nelif condici\u00f3n 2:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 2 es verdadera\nelse:\n # Bloque de c\u00f3digo que se ejecuta si ninguna de las condiciones anteriores se cumple\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres menor de edad\" si la variable edad no es mayor o igual a 18:</p> <pre><code>edad = 17\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\nelse:\n print(\"Eres menor de edad\")\n</code></pre>"},{"location":"tutorial/p1/#ejemplos-de-estructuras-de-control-condicionales","title":"Ejemplos de estructuras de control condicionales","text":"<ol> <li>Comparar dos n\u00fameros</li> </ol> <pre><code>a = 10\nb = 20\nif a &gt; b:\n print(\"a es mayor que b\")\nelif a &lt; b:\n print(\"b es mayor que a\")\nelse:\n print(\"a y b son iguales\")\n</code></pre> <ol> <li>Comparar una cadena con un valor</li> </ol> <pre><code>cadena = \"Hola\"\nif cadena == \"Hola\":\n print(\"La cadena es 'Hola'\")\nelse:\n print(\"La cadena no es 'Hola'\")\n</code></pre> <ol> <li>Validar un n\u00famero</li> </ol> <pre><code>numero = input(\"Introduce un n\u00famero: \")\ntry:\n    numero = int(numero)\n    if numero &gt; 0:\n        print(\"El n\u00famero es positivo\")\n    else:\n        print(\"El n\u00famero es negativo\")\nexcept  ValueError:\n    print(\"El n\u00famero introducido no es v\u00e1lido\")\n</code></pre>"},{"location":"tutorial/p1/#libro-recomendado-de-python","title":"Libro recomendado de Python","text":"<p>Bienvenid@ a El Libro De Python</p>"},{"location":"tutorial/p2/","title":"\ud83d\udcd8 Ciclos en Python","text":""},{"location":"tutorial/p2/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Los ciclos (o bucles) permiten ejecutar un bloque de c\u00f3digo repetidamente sin necesidad de reescribirlo. En Python existen dos construcciones b\u00e1sicas:</p> Construcci\u00f3n Uso t\u00edpico \u00bfTermina autom\u00e1ticamente? <code>for</code> Recorrer iterables S\u00ed, cuando el iterable se agota <code>while</code> Repetir mientras se cumpla una condici\u00f3n No, puede ser infinito si no se actualiza la condici\u00f3n <p>A su vez, cada construcci\u00f3n admite flujos de control (<code>break</code>, <code>continue</code>, <code>else</code>) y combinaciones avanzadas (<code>else</code>, <code>else</code> + <code>continue</code>, <code>else</code> + <code>break</code>).  </p>"},{"location":"tutorial/p2/#2-ciclo-for","title":"2. Ciclo <code>for</code>","text":""},{"location":"tutorial/p2/#21-sintaxis-basica","title":"2.1 Sintaxis b\u00e1sica","text":"<pre><code>for variable in iterable:\n    # bloque a repetir\nelse:          # opcional\n    # se ejecuta si NO hubo break\n</code></pre>"},{"location":"tutorial/p2/#22-objetos-iterables-mas-usados","title":"2.2 Objetos iterables m\u00e1s usados","text":"Iterable Ejemplo \u00bfQu\u00e9 recorre? <code>range()</code> <code>range(5)</code> N\u00fameros enteros <code>list</code> <code>[1, 2, 3]</code> Elementos de la lista <code>str</code> <code>\"abc\"</code> Caracteres <code>dict</code> <code>{\"a\": 1, \"b\": 2}</code> Claves (por defecto) <code>enumerate()</code> <code>enumerate([\"x\", \"y\"])</code> Pares (\u00edndice, elemento) <code>zip()</code> <code>zip(l1, l2)</code> Tuplas emparejadas Generador <code>(x**2 for x in range(3))</code> Valores producidos bajo demanda"},{"location":"tutorial/p2/#23-ejemplos-paso-a-paso","title":"2.3 Ejemplos paso a paso","text":""},{"location":"tutorial/p2/#231-recorrer-un-rango","title":"2.3.1 Recorrer un rango","text":"<pre><code>for n in range(1, 6):      # 1,2,3,4,5\n    print(\"n =\", n)\n</code></pre>"},{"location":"tutorial/p2/#232-recorrer-una-lista-con-desempaquetado","title":"2.3.2 Recorrer una lista con desempaquetado","text":"<pre><code>productos = [(\"Manzanas\", 3), (\"Peras\", 5)]\nfor nombre, cantidad in productos:\n    print(f\"{nombre}: {cantidad} kg\")\n</code></pre>"},{"location":"tutorial/p2/#233-recorrer-diccionarios","title":"2.3.3 Recorrer diccionarios","text":"<pre><code>precios = {\"manzana\": 1.2, \"pera\": 0.9}\nfor fruta, precio in precios.items():\n    print(f\"{fruta} cuesta ${precio}\")\n</code></pre>"},{"location":"tutorial/p2/#234-usar-enumerate-para-indice-valor","title":"2.3.4 Usar <code>enumerate</code> para \u00edndice + valor","text":"<pre><code>palabras = [\"sol\", \"luna\", \"estrella\"]\nfor idx, pal in enumerate(palabras, start=1):\n    print(f\"{idx}. {pal}\")\n</code></pre>"},{"location":"tutorial/p2/#235-recorrer-dos-listas-al-mismo-tiempo-zip","title":"2.3.5 Recorrer dos listas al mismo tiempo (<code>zip</code>)","text":"<pre><code>nombres = [\"Ana\", \"Luis\", \"Eva\"]\nedades = [25, 30, 22]\nfor nom, ed in zip(nombres, edades):\n    print(f\"{nom} tiene {ed} a\u00f1os\")\n</code></pre>"},{"location":"tutorial/p2/#236-bucle-anidado-nested-for","title":"2.3.6 Bucle anidado (nested for)","text":"<pre><code>for i in range(1, 4):\n    for j in range(1, 3):\n        print(f\"i={i}, j={j}\")\n</code></pre>"},{"location":"tutorial/p2/#237-comprension-de-listas-for-en-una-sola-linea","title":"2.3.7 Comprensi\u00f3n de listas (for en una sola l\u00ednea)","text":"<pre><code>cuadrados = [x**2 for x in range(5)]   # [0, 1, 4, 9, 16]\n</code></pre>"},{"location":"tutorial/p2/#3-ciclo-while","title":"3. Ciclo <code>while</code>","text":""},{"location":"tutorial/p2/#31-sintaxis-basica","title":"3.1 Sintaxis b\u00e1sica","text":"<pre><code>while condici\u00f3n:\n    # bloque a repetir\nelse:          # opcional\n    # se ejecuta si la condici\u00f3n es falsa y NO hubo break\n</code></pre>"},{"location":"tutorial/p2/#32-ejemplos-paso-a-paso","title":"3.2 Ejemplos paso a paso","text":""},{"location":"tutorial/p2/#321-contador-simple","title":"3.2.1 Contador simple","text":"<pre><code>cont = 0\nwhile cont &lt; 3:\n    print(cont)\n    cont += 1\n</code></pre>"},{"location":"tutorial/p2/#322-lectura-hasta-sentinela","title":"3.2.2 Lectura hasta sentinela","text":"<pre><code>total = 0\nwhile True:\n    n = input(\"N\u00famero (q para salir): \")\n    if n == \"q\":\n        break\n    total += float(n)\nprint(\"Total:\", total)\n</code></pre>"},{"location":"tutorial/p2/#323-re-try-con-continue","title":"3.2.3 Re-try con <code>continue</code>","text":"<pre><code>import random\nwhile True:\n    dado = random.randint(1, 6)\n    if dado == 6:\n        continue           # volver a tirar\n    print(\"Sacaste\", dado)\n    break                  # terminar\n</code></pre>"},{"location":"tutorial/p2/#324-else-en-while","title":"3.2.4 <code>else</code> en while","text":"<pre><code>i = 0\nwhile i &lt; 3:\n    print(i)\n    i += 1\nelse:\n    print(\"Termin\u00f3 sin break\")\n</code></pre>"},{"location":"tutorial/p2/#4-flujos-de-control-dentro-de-ciclos","title":"4. Flujos de control dentro de ciclos","text":"Sentencia Qu\u00e9 hace Ejemplo <code>break</code> Salir del ciclo inmediatamente <code>if x &lt; 0: break</code> <code>continue</code> Saltar al siguiente ciclo <code>if x % 2 == 0: continue</code> <code>else</code> Ejecutar solo si no hubo <code>break</code> Ver secciones anteriores"},{"location":"tutorial/p2/#5-ciclos-infinitos-y-sus-formas-de-salir","title":"5. Ciclos \u201cinfinitos\u201d y sus formas de salir","text":"<pre><code># Opci\u00f3n 1: while True + break\nwhile True:\n    opcion = input(\"&gt; \")\n    if opcion == \"salir\":\n        break\n\n# Opci\u00f3n 2: flag externa\nseguir = True\nwhile seguir:\n    ...\n    if condicion:\n        seguir = False\n</code></pre>"},{"location":"tutorial/p2/#6-iteradores-y-generadores-avanzado","title":"6. Iteradores y generadores (avanzado)","text":""},{"location":"tutorial/p2/#61-uso-de-iter-y-next","title":"6.1 Uso de <code>iter()</code> y <code>next()</code>","text":"<pre><code>it = iter([10, 20, 30])\nprint(next(it))  # 10\nprint(next(it))  # 20\n</code></pre>"},{"location":"tutorial/p2/#7-resumen-visual","title":"7. Resumen visual","text":"<pre><code>graph TD\n    A[Ciclo] --&gt;|determinista| B[for]\n    A --&gt;|condicional| C[while]\n    B --&gt; D[range]\n    B --&gt; E[listas]\n    B --&gt; F[dict]\n    B --&gt; G[enumerate/zip]\n    C --&gt; H[condici\u00f3n]\n    C --&gt; I[break/continue]</code></pre>"},{"location":"tutorial/p2/#8-mejores-practicas-y-recomendaciones","title":"8. Mejores pr\u00e1cticas y recomendaciones","text":"<ol> <li>Preferir <code>for</code> sobre <code>while</code> cuando se conoce la cantidad de iteraciones.</li> <li>Evitar ciclos infinitos sin mecanismo de salida claro.</li> <li>Usar nombres descriptivos para variables de control.</li> <li>Aprovechar <code>enumerate</code> y <code>zip</code> para c\u00f3digo m\u00e1s legible.</li> </ol>"},{"location":"tutorial/p3/","title":"\ud83d\udcd8 Estructuras de control (bucles) y Estructuras de datos - Colecciones en Python","text":"<p>En Python, las estructuras de control repetitivas se utilizan para ejecutar una o m\u00e1s instrucciones de manera repetitiva mientras se cumpla una condici\u00f3n determinada. Las estructuras de control repetitivas en Python son: Bucle while, Bucle for</p>"},{"location":"tutorial/p3/#bucle-while","title":"Bucle while","text":"<p>Bucle while: El bucle while se utiliza para ejecutar un conjunto de instrucciones mientras se cumpla una determinada condici\u00f3n. La sintaxis del bucle while en Python es la siguiente:</p> <pre><code>while condici\u00f3n:\n    # bloque de instrucciones a ejecutar mientras la condici\u00f3n sea verdadera\n</code></pre>"},{"location":"tutorial/p3/#formas-de-usar-el-bucle-for-en-python","title":"Formas de usar el bucle for en Python:","text":""},{"location":"tutorial/p3/#bucle-while-basico","title":"Bucle while b\u00e1sico","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    print(contador)\n    contador += 1\n</code></pre>"},{"location":"tutorial/p3/#while-infinito","title":"While infinito","text":"<pre><code>while True:\n    pass\n</code></pre>"},{"location":"tutorial/p3/#romper-el-bucle","title":"Romper el bucle","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    print(contador)\n    if contador == 2:\n        break\n    contador += 1\n</code></pre>"},{"location":"tutorial/p3/#continuar-la-iteracion","title":"Continuar la iteraci\u00f3n","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    contador += 1\n    if contador == 2:\n        continue\n    print(contador)\n</code></pre>"},{"location":"tutorial/p3/#while-con-else","title":"While con else","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    print(contador)\n    contador += 1\nelse:\n    print(\"Fin del bucle while\")\n</code></pre>"},{"location":"tutorial/p3/#while-anidado","title":"While anidado","text":"<pre><code>contador1 = 2\nwhile contador1 &lt; 5:\n    contador2 = 0\n    while contador2 &lt; 5:\n        print(contador1, contador2)\n        contador2 += 1\n    contador1 += 1\n</code></pre>"},{"location":"tutorial/p3/#ejercicios-resueltos-bucle-while","title":"Ejercicios resueltos bucle while","text":"<ol> <li>Pedir al usuario que adivine un n\u00famero secreto. El usuario tendr\u00e1 un n\u00famero limitado de intentos para adivinar el n\u00famero. Si no lo adivina en ese n\u00famero de intentos, el programa le dir\u00e1 que perdi\u00f3.</li> </ol> <pre><code>import random\n\nnumero_secreto = random.randint(1, 20)\nintentos = 0\nmax_intentos = 5\nadivinado = False\n\nprint(\"Estoy pensando en un n\u00famero entre 1 y 20.\")\nwhile intentos &lt; max_intentos and not adivinado:\n    intento = int(input(\"Intenta adivinar el n\u00famero: \"))\n    intentos += 1\n    if intento == numero_secreto:\n        print(\"\u00a1Correcto! Adivinaste el n\u00famero en\", intentos, \"intentos.\")\n        adivinado = True\n    elif intento &lt; numero_secreto:\n        print(\"El n\u00famero es mayor que\", intento)\n    else:\n        print(\"El n\u00famero es menor que\", intento)\n\nif not adivinado:\n    print(\"Lo siento, no adivinaste el n\u00famero en el n\u00famero m\u00e1ximo de intentos.\")\n    print(\"El n\u00famero secreto era\", numero_secreto)\n</code></pre> <ol> <li>Pedir al usuario que ingrese una cadena y contar la cantidad de letras que contiene.</li> </ol> <pre><code>cadena = input(\"Ingresa una cadena: \")\ni = 0\ncontador = 0\nwhile i &lt; len(cadena):\n    if cadena[i].isalpha():\n        contador += 1\n    i += 1\nprint(\"La cadena tiene\", contador, \"letras.\")\n</code></pre> <ol> <li>Pedir al usuario que ingrese un n\u00famero entero positivo y mostrar su tabla de multiplicar.</li> </ol> <pre><code>numero = int(input(\"Ingresa un n\u00famero entero positivo: \"))\ni = 1\nwhile i &lt;= 10:\n    print(numero, \"x\", i, \"=\", numero*i)\n    i += 1\n</code></pre> <ol> <li>Pedir al usuario que ingrese una lista de n\u00fameros y calcular su promedio.</li> </ol> <pre><code>lista = input(\"Ingresa una lista de n\u00fameros separados por comas: \")\nlista = lista.split(\",\")\ni = 0\nsuma = 0\nwhile i &lt; len(lista):\n    suma += int(lista[i])\n    i += 1\n\npromedio = suma / len(lista)\nprint(\"El promedio de la lista es\", promedio)\n</code></pre>"},{"location":"tutorial/p3/#bucle-for","title":"Bucle for","text":"<p>El bucle for se utiliza para recorrer una secuencia de elementos, como una lista o una cadena, y ejecutar un conjunto de instrucciones para cada elemento. La sintaxis del bucle for en Python es la siguiente:</p> <pre><code>for variable in secuencia:\n    # bloque de instrucciones a ejecutar para cada elemento de la secuencia\n</code></pre>"},{"location":"tutorial/p3/#formas-de-usar-el-bucle-for-en-python_1","title":"Formas de usar el bucle for en Python:","text":""},{"location":"tutorial/p3/#bucle-for-basico","title":"Bucle for b\u00e1sico","text":"<pre><code>for i in range(1, 6):\n    print(i)\n</code></pre>"},{"location":"tutorial/p3/#recorrer-una-lista","title":"Recorrer una lista","text":"<pre><code>frutas = ['manzana', 'banana', 'zanahoria']\nfor fruta in frutas:\n    print(fruta)\n</code></pre>"},{"location":"tutorial/p3/#iterar-sobre-una-cadena","title":"Iterar sobre una cadena","text":"<pre><code>for letra in \"Hola\":\n    print(letra)\n</code></pre>"},{"location":"tutorial/p3/#iterar-en-pasos","title":"Iterar en pasos","text":"<pre><code>for i in range(0, 10, 2):\n    print(i)\n</code></pre>"},{"location":"tutorial/p3/#iterar-sobre-diccionarios","title":"Iterar sobre diccionarios","text":"<pre><code>dicc = {'a': 1, 'b': 2, 'c': 3}\nfor llave in dicc:\n    print(llave)\n\nfor llave in dicc.keys():\n    print(llave)\n\nfor valor in dicc.values():\n    print(valor)\n\nfor llave, valor in dicc.items():\n    print(llave, valor)\n</code></pre>"},{"location":"tutorial/p3/#rango-personalizado","title":"Rango personalizado","text":"<pre><code>import random\n\nmi_lista = [random.randint(1, 10) for i in range(10)]\nfor i in mi_lista:\n    print(i)\n</code></pre>"},{"location":"tutorial/p3/#break","title":"Break","text":"<pre><code>for i in range(1, 11):\n    if i == 5:\n        break\n    print(i)\n</code></pre>"},{"location":"tutorial/p3/#continue","title":"Continue","text":"<pre><code>for i in range(1, 11):\n    if i % 2 == 0:\n        continue\n    print(i)\n</code></pre>"},{"location":"tutorial/p3/#ejercicios-resueltos-bucle-for","title":"Ejercicios resueltos bucle for","text":"<ol> <li>Pedir al usuario que ingrese una palabra y mostrarla en orden inverso.</li> </ol> <pre><code>palabra = input(\"Ingresa una palabra: \")\ninverso = \"\"\nfor letra in palabra:\n    inverso = letra + inverso\nprint(\"La palabra en orden inverso es:\", inverso)\n</code></pre> <ol> <li>Pedir al usuario que ingrese una cadena de texto y mostrar solamente las letras may\u00fasculas utilizando un ciclo for.</li> </ol> <pre><code>cadena = input(\"Ingresa una cadena de texto: \")\nfor letra in cadena:\n    if letra.isupper():\n        print(letra)\n</code></pre> <ol> <li>Pedir al usuario que ingrese una cadena de texto y contar cu\u00e1ntas palabras tiene utilizando un ciclo for</li> </ol> <pre><code>cadena = input(\"Ingresa una cadena de texto: \")\npalabras = cadena.split()\ncontador = 0\nfor palabra in palabras:\n    contador += 1\nprint(\"La cadena de texto ingresada tiene\", contador, \"palabras.\")\n</code></pre> <ol> <li>Imprime los m\u00faltiplos de 7 entre 0 y 100:</li> </ol> <pre><code>for i in range(0,101):\n    if i % 7 == 0:\n        print(i)\n</code></pre>"},{"location":"tutorial/p3/#estructuras-de-datos-colecciones-en-python","title":"Estructuras de datos - Colecciones en Python","text":"<p>En Python, una colecci\u00f3n es una estructura de datos que puede almacenar varios elementos. Hay varios tipos de colecciones en Python, cada una con diferentes propiedades y usos.</p> <p>Aqu\u00ed hay una breve descripci\u00f3n de las principales colecciones en Python:</p> <ul> <li>Listas: son colecciones ordenadas y modificables que pueden contener elementos de diferentes tipos de datos.</li> <li>Tuplas: son colecciones ordenadas e inmutables que pueden contener elementos de diferentes tipos de datos.</li> <li>Conjuntos: son colecciones no ordenadas y no indexadas que no permiten elementos duplicados.</li> <li>Diccionarios: son colecciones no ordenadas pero modificables que consisten en pares clave-valor. Aqu\u00ed hay algunos ejemplos de c\u00f3mo crear e interactuar con estas colecciones:</li> </ul> <pre><code># Creamos una lista con algunos elementos\nmy_list = [1, 2, 3, 'cuatro', 'cinco']\n\n# Accedemos a un elemento de la lista\nprint(my_list[0])  # Salida: 1\n\n# Creamos una tupla con algunos elementos\nmy_tuple = (1, 2, 3, 'cuatro', 'cinco')\n\n# Accedemos a un elemento de la tupla\nprint(my_tuple[0])  # Salida: 1\n\n# Creamos un conjunto con algunos elementos\nmy_set = {1, 2, 3, 4, 5}\n\n# Accedemos a un elemento del conjunto (no es posible porque los conjuntos no tienen \u00edndices)\n# En cambio, podemos verificar si un elemento est\u00e1 en el conjunto\nprint(3 in my_set)  # Salida: True\n\n# Creamos un diccionario con algunas claves y valores\nmy_dict = {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Buenos Aires'}\n\n# Accedemos a un valor del diccionario mediante su clave\nprint(my_dict['nombre'])  # Salida: Juan\n</code></pre>"},{"location":"tutorial/p3/#listas","title":"Listas","text":"<p>En Python, una lista es una colecci\u00f3n ordenada y modificable de elementos. Las listas pueden contener elementos de diferentes tipos de datos, como n\u00fameros, cadenas, booleanos, entre otros. Las listas en Python son muy \u00fatiles para almacenar y manipular grandes cantidades de datos.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo crear y utilizar una lista en Python, que incluye algunas de las caracter\u00edsticas y m\u00e9todos m\u00e1s comunes de las listas:</p> <p><pre><code># Creamos una lista con algunos elementos\nmy_list = [1, 2, 3, 'cuatro', 'cinco', 6.7, True]\n\n# Accedemos a un elemento de la lista\nprint(my_list[0])  # Salida: 1\n\n# Podemos utilizar \u00edndices negativos para acceder a los elementos desde el final de la lista\nprint(my_list[-1])  # Salida: True\n\n# Podemos reemplazar un elemento de la lista asignando un nuevo valor a su \u00edndice\nmy_list[2] = 'tres'\nprint(my_list)  # Salida: [1, 2, 'tres', 'cuatro', 'cinco', 6.7, True]\n\n# Podemos agregar un nuevo elemento al final de la lista con el m\u00e9todo append()\nmy_list.append('seis')\nprint(my_list)  # Salida: [1, 2, 'tres', 'cuatro', 'cinco', 6.7, True, 'seis']\n\n# Podemos insertar un nuevo elemento en una posici\u00f3n espec\u00edfica de la lista con el m\u00e9todo insert()\nmy_list.insert(4, '4.5')\nprint(my_list)  # Salida: [1, 2, 'tres', 'cuatro', '4.5', 'cinco', 6.7, True, 'seis']\n\n# Podemos eliminar un elemento de la lista con el m\u00e9todo remove()\nmy_list.remove('tres')\nprint(my_list)  # Salida: [1, 2, 'cuatro', '4.5', 'cinco', 6.7, True, 'seis']\n\n# Podemos ordenar los elementos de la lista con el m\u00e9todo sort()\nmy_list.sort()\nprint(my_list)  # Salida: [1, True, 2, 4.5, 6.7, 'cinco', 'cuatro', 'seis']\n\n# Podemos contar la cantidad de veces que aparece un elemento en la lista con el m\u00e9todo count()\nprint(my_list.count(1))  # Salida: 1\n\n# Podemos encontrar el \u00edndice de un elemento en la lista con el m\u00e9todo index()\nprint(my_list.index('cuatro'))  # Salida: 6\n\n# Podemos eliminar el \u00faltimo elemento de la lista con el m\u00e9todo pop()\nmy_list.pop()\nprint(my_list)  # Salida: [1, True, 2, 4.5, 6.7, 'cinco', 'cuatro']\n\n# Podemos obtener la longitud de la lista con la funci\u00f3n len()\nprint(len(my_list))  # Salida: 7\n</code></pre> Estos son solo algunos de los m\u00e9todos y caracter\u00edsticas m\u00e1s comunes de las listas en Python. Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#</p>"},{"location":"tutorial/p3/#metodos-de-las-listas","title":"M\u00e9todos de las listas","text":"<ul> <li>append() - Agrega un elemento al final de la lista.</li> <li>extend() - Agrega los elementos de otra lista al final de la lista actual.</li> <li>insert() - Inserta un elemento en una posici\u00f3n espec\u00edfica de la lista.</li> <li>pop() - Elimina un elemento del final de la lista y lo devuelve.</li> <li>remove() - Elimina el primer elemento de la lista que coincide con el argumento dado.</li> <li>count() - Cuenta el n\u00famero de veces que aparece un elemento en la lista.</li> <li>index() - Devuelve el \u00edndice de la primera aparici\u00f3n de un elemento en la lista.</li> <li>sort() - Ordena los elementos de la lista en orden ascendente.</li> <li>reverse() - Ordena los elementos de la lista en orden descendente.</li> <li>clear() - Elimina todos los elementos de la lista.</li> </ul>"},{"location":"tutorial/p3/#ejercicios-de-listas","title":"Ejercicios de listas","text":"<ol> <li>Dada una lista de n\u00fameros enteros, escribe una funci\u00f3n que devuelva una nueva lista con los n\u00fameros pares de la lista original.</li> </ol> <p><pre><code>def numeros_pares(lista):\n    pares = []\n    for num in lista:\n        if num % 2 == 0:\n            pares.append(num)\n    return pares\n\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(numeros_pares(numeros))  # Salida: [2, 4, 6, 8]\n</code></pre> 2. Dada una lista de palabras, escribe una funci\u00f3n que devuelva una nueva lista con las palabras que tienen m\u00e1s de 5 letras.</p> <p><pre><code>def palabras_largas(lista):\n    largas = []\n    for palabra in lista:\n        if len(palabra) &gt; 5:\n            largas.append(palabra)\n    return largas\n\npalabras = ['manzana', 'banana', 'naranja', 'pera', 'sand\u00eda', 'kiwi']\nprint(palabras_largas(palabras))  # Salida: ['manzana', 'banana', 'naranja', 'sand\u00eda']\n</code></pre> Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#more-on-lists</p>"},{"location":"tutorial/p3/#tuplas","title":"Tuplas","text":"<p>En Python, una tupla es una colecci\u00f3n ordenada e inmutable de elementos que pueden ser de diferentes tipos de datos. La principal diferencia entre las tuplas y las listas es que las tuplas no se pueden modificar una vez creadas, mientras que las listas pueden ser modificadas.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo crear y usar una tupla en Python:</p> <p><pre><code># Creamos una tupla con algunos elementos\nmi_tupla = (1, 2, 'tres', True)\n\n# Accedemos a un elemento de la tupla\nprint(mi_tupla[0])  # Salida: 1\n\n# Intentamos modificar un elemento de la tupla (esto dar\u00e1 un error porque las tuplas son inmutables)\n# mi_tupla[0] = 5  # TypeError: 'tuple' object does not support item assignment\n\n# Convertimos la tupla en una lista para poder modificarla\nmi_lista = list(mi_tupla)\n\n# Modificamos un elemento de la lista\nmi_lista[0] = 5\n\n# Convertimos la lista de nuevo en una tupla\nmi_tupla = tuple(mi_lista)\n\n# Accedemos a un elemento de la tupla modificado\nprint(mi_tupla[0])  # Salida: 5\n\n# Contamos cu\u00e1ntas veces aparece un elemento en la tupla\nprint(mi_tupla.count(2))  # Salida: 1\n\n# Encontramos el \u00edndice de la primera aparici\u00f3n de un elemento en la tupla\nprint(mi_tupla.index('tres'))  # Salida: 2\n</code></pre> En este ejemplo, creamos una tupla mi_tupla con cuatro elementos, y luego intentamos modificar un elemento de la tupla, lo cual da un error porque las tuplas son inmutables. En cambio, convertimos la tupla en una lista, modificamos un elemento de la lista, y luego convertimos la lista de nuevo en una tupla. Luego, utilizamos los m\u00e9todos count e index para contar cu\u00e1ntas veces aparece un elemento en la tupla y encontrar el \u00edndice de la primera aparici\u00f3n de un elemento en la tupla, respectivamente. Es importante tener en cuenta que las tuplas son \u00fatiles cuando se desea tener una colecci\u00f3n ordenada e inmutable de elementos. Si se desea modificar los elementos de la colecci\u00f3n, es mejor utilizar una lista en su lugar.</p>"},{"location":"tutorial/p3/#metodos-de-las-tuplas","title":"M\u00e9todos de las tuplas","text":"<ul> <li>count() - Cuenta el n\u00famero de veces que un elemento aparece en la tupla.</li> <li>index() - Devuelve el \u00edndice de la primera aparici\u00f3n de un elemento en la tupla.</li> <li>len() - Devuelve la longitud de la tupla.</li> <li>min() - Devuelve el elemento m\u00e1s peque\u00f1o en la tupla.</li> <li>max() - Devuelve el elemento m\u00e1s grande en la tupla.</li> <li>sorted() - Ordena los elementos de la tupla en orden ascendente.</li> <li>sum() - Suma los elementos de la tupla.</li> </ul>"},{"location":"tutorial/p3/#ejercicios-de-tuplas","title":"Ejercicios de tuplas","text":"<ol> <li>Dadas dos tuplas de n\u00fameros enteros del mismo tama\u00f1o, escribe una funci\u00f3n que devuelva una nueva tupla con la suma de cada par de n\u00fameros correspondientes en las dos tuplas.</li> </ol> <p><pre><code>def suma_tuplas(tupla1, tupla2):\n    suma = ()\n    for i in range(len(tupla1)):\n        suma += (tupla1[i] + tupla2[i],)\n    return suma\n\ntupla1 = (1, 2, 3)\ntupla2 = (4, 5, 6)\nprint(suma_tuplas(tupla1, tupla2))  # Salida: (5, 7, 9)\n</code></pre> 2. Dada una tupla de cadenas de texto, escribe una funci\u00f3n que devuelva una nueva tupla con las cadenas de texto que tienen m\u00e1s de 5 caracteres.</p> <p><pre><code>def tupla_palabras_largas(tupla):\n    largas = ()\n    for palabra in tupla:\n        if len(palabra) &gt; 5:\n            largas += (palabra,)\n    return largas\n\ntupla = ('manzana', 'banana', 'naranja', 'pera', 'sand\u00eda', 'kiwi')\nprint(tupla_palabras_largas(tupla)) \n</code></pre> Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#tuples-and-sequences</p>"},{"location":"tutorial/p3/#conjuntos","title":"Conjuntos","text":"<p>Los conjuntos de datos en Python son una colecci\u00f3n no ordenada y no indexada de elementos \u00fanicos e inmutables. Es decir, los conjuntos no pueden contener elementos duplicados y sus elementos no se pueden modificar despu\u00e9s de haber sido agregados al conjunto. Los conjuntos son muy \u00fatiles para realizar operaciones matem\u00e1ticas como uni\u00f3n, intersecci\u00f3n y diferencia de conjuntos.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo utilizar conjuntos en Python, utilizando algunos de sus m\u00e9todos y caracter\u00edsticas:</p> <p><pre><code># Creamos un conjunto con algunos elementos\nmy_set = {1, 2, 3, 4, 5}\n\n# Agregamos un elemento al conjunto\nmy_set.add(6)\n\n# Eliminamos un elemento del conjunto\nmy_set.remove(2)\n\n# Verificamos si un elemento est\u00e1 en el conjunto\nprint(3 in my_set)  # Salida: True\n\n# Creamos otro conjunto con algunos elementos\nother_set = {4, 5, 6, 7}\n\n# Realizamos la uni\u00f3n de dos conjuntos\nunion_set = my_set.union(other_set)\nprint(union_set)  # Salida: {1, 3, 4, 5, 6, 7}\n\n# Realizamos la intersecci\u00f3n de dos conjuntos\nintersection_set = my_set.intersection(other_set)\nprint(intersection_set)  # Salida: {4, 5, 6}\n\n# Realizamos la diferencia de dos conjuntos\ndifference_set = my_set.difference(other_set)\nprint(difference_set)  # Salida: {1, 3}\n\n# Vaciamos el conjunto\nmy_set.clear()\nprint(my_set)  # Salida: set()\n</code></pre> Como se puede ver en el ejemplo anterior, los conjuntos de datos en Python ofrecen una serie de m\u00e9todos \u00fatiles para trabajar con elementos \u00fanicos e inmutables. Algunos de los m\u00e9todos comunes de los conjuntos incluyen add(), remove(), union(), intersection(), difference() y clear().</p>"},{"location":"tutorial/p3/#metodos-de-los-conjuntos","title":"M\u00e9todos de los conjuntos","text":"<ul> <li>add() - Agrega un elemento al conjunto.</li> <li>update() - Agrega los elementos de otro conjunto al conjunto actual.</li> <li>remove() - Elimina un elemento del conjunto.</li> <li>discard() - Elimina un elemento del conjunto si est\u00e1 presente.</li> <li>pop() - Elimina un elemento aleatorio del conjunto.</li> <li>clear() - Elimina todos los elementos del conjunto.</li> <li>isdisjoint() - Comprueba si dos conjuntos son disjuntos.</li> <li>issubset() - Comprueba si un conjunto es subconjunto de otro conjunto.</li> <li>issuperset() - Comprueba si un conjunto es superconjunto de otro conjunto.</li> <li>union() - Devuelve la uni\u00f3n de dos conjuntos.</li> <li>intersection() - Devuelve la intersecci\u00f3n de dos conjuntos.</li> <li>difference() - Devuelve la diferencia de dos conjuntos.</li> <li>symmetric_difference() - Devuelve la diferencia sim\u00e9trica de dos conjuntos.</li> </ul>"},{"location":"tutorial/p3/#ejercicios-de-conjuntos","title":"Ejercicios de conjuntos","text":"<ol> <li>Dadas dos listas de n\u00fameros enteros, escribe una funci\u00f3n que devuelva un conjunto con los n\u00fameros que aparecen en ambas listas.</li> </ol> <p><pre><code>def numeros_comunes(lista1, lista2):\n    set1 = set(lista1)\n    set2 = set(lista2)\n    comunes = set1.intersection(set2)\n    return comunes\n\nlista1 = [1, 2, 3, 4, 5]\nlista2 = [4, 5, 6, 7, 8]\nprint(numeros_comunes(lista1, lista2))  # Salida: {4, 5}\n</code></pre> 2. Dada una lista de n\u00fameros enteros, escribe una funci\u00f3n que devuelva un conjunto con los n\u00fameros \u00fanicos en la lista.</p> <p><pre><code>def numeros_unicos(lista):\n    unicos = set(lista)\n    return unicos\n\nlista = [1, 2, 3, 3, 4, 4, 5, 5, 5]\nprint(numeros_unicos(lista))  # Salida: {1, 2, 3, 4, 5}\n</code></pre> Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#sets</p>"},{"location":"tutorial/p3/#diccionarios","title":"Diccionarios","text":"<p>Los diccionarios en Python son una estructura de datos que nos permiten almacenar informaci\u00f3n en forma de pares de clave-valor. Cada clave es \u00fanica y se utiliza para acceder a su valor correspondiente. Los diccionarios son mutables, lo que significa que podemos agregar, eliminar y actualizar elementos en ellos.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo crear y utilizar un diccionario en Python, con algunas de sus caracter\u00edsticas y m\u00e9todos:</p> <pre><code># Creamos un diccionario con algunos datos\npersona = {'nombre': 'Mar\u00eda', 'edad': 25, 'ciudad': 'Madrid'}\n\n# Accedemos a un valor del diccionario mediante su clave\nprint(persona['edad'])  # Salida: 25\n\n# Agregamos una nueva clave-valor al diccionario\npersona['profesion'] = 'Programadora'\nprint(persona)  # Salida: {'nombre': 'Mar\u00eda', 'edad': 25, 'ciudad': 'Madrid', 'profesion': 'Programadora'}\n\n# Eliminamos una clave-valor del diccionario\ndel persona['ciudad']\nprint(persona)  # Salida: {'nombre': 'Mar\u00eda', 'edad': 25, 'profesion': 'Programadora'}\n\n# Verificamos si una clave est\u00e1 en el diccionario\nprint('nombre' in persona)  # Salida: True\n\n# Obtenemos todas las claves del diccionario\nprint(persona.keys())  # Salida: dict_keys(['nombre', 'edad', 'profesion'])\n\n# Obtenemos todos los valores del diccionario\nprint(persona.values())  # Salida: dict_values(['Mar\u00eda', 25, 'Programadora'])\n\n# Obtenemos todos los pares clave-valor del diccionario\nprint(persona.items())  # Salida: dict_items([('nombre', 'Mar\u00eda'), ('edad', 25), ('profesion', 'Programadora')])\n</code></pre> <p>En este ejemplo, creamos un diccionario llamado persona con tres claves (nombre, edad y ciudad) y sus respectivos valores. Luego, accedimos al valor de la clave edad utilizando la sintaxis de indexaci\u00f3n de diccionario (persona['edad']).</p> <p>A continuaci\u00f3n, agregamos una nueva clave-valor al diccionario utilizando la sintaxis de asignaci\u00f3n de diccionario (persona['profesion'] = 'Programadora'). Tambi\u00e9n eliminamos la clave-valor ciudad utilizando el operador del.</p> <p>Luego, utilizamos algunos m\u00e9todos de diccionario para verificar si una clave est\u00e1 en el diccionario ('nombre' in persona), obtener todas las claves del diccionario (persona.keys()), todos los valores del diccionario (persona.values()) y todos los pares clave-valor del diccionario (persona.items()).</p> <p>Es importante tener en cuenta que los diccionarios en Python son muy \u00fatiles y vers\u00e1tiles, y que hay muchas formas diferentes de utilizarlos. Se recomienda leer la documentaci\u00f3n de Python para obtener m\u00e1s informaci\u00f3n sobre c\u00f3mo utilizar los diccionarios y sus m\u00e9todos.</p>"},{"location":"tutorial/p3/#metodos-de-los-diccionarios","title":"M\u00e9todos de los diccionarios","text":"<ul> <li>get() - Obtiene el valor asociado con la clave dada.</li> <li>setdefault() - Asigna el valor dado a la clave dada, si la clave no existe.</li> <li>pop() - Elimina la clave y su valor asociado.</li> <li>popitem() - Elimina cualquier clave y su valor asociado del diccionario.</li> <li>update() - Actualiza el diccionario con los valores de otro diccionario.</li> <li>keys() - Devuelve una lista de las claves del diccionario.</li> <li>values() - Devuelve una lista de los valores del diccionario.</li> <li>items() - Devuelve una lista de tuplas, donde cada tupla contiene una clave y su valor asociado.</li> <li>len() - Devuelve el n\u00famero de elementos en el diccionario.</li> <li>clear() - Elimina todos los elementos del diccionario.</li> </ul>"},{"location":"tutorial/p3/#ejercicios-de-diccionarios","title":"Ejercicios de diccionarios","text":"<ol> <li>Dado un diccionario que contiene nombres de personas y sus edades, escribe una funci\u00f3n que devuelva el nombre de la persona m\u00e1s joven.</li> </ol> <p><pre><code>def persona_mas_joven(diccionario):\n    edad_min = float('inf')\n    nombre = ''\n    for clave, valor in diccionario.items():\n        if valor &lt; edad_min:\n            edad_min = valor\n            nombre = clave\n    return nombre\n\nedades = {'Juan': 25, 'Mar\u00eda': 30, 'Pedro': 20, 'Ana': 28}\nprint(persona_mas_joven(edades))  # Salida: 'Pedro'\n</code></pre> 2. Dada una lista de diccionarios que contienen informaci\u00f3n de productos, escribe una funci\u00f3n que calcule el precio total de la lista.</p> <pre><code>def precio_total(productos):\n    total = 0\n    for producto in productos:\n        total += producto['precio'] * producto['cantidad']\n    return total\n\nproductos = [\n    {'nombre': 'Camisa', 'precio': 50, 'cantidad': 2},\n    {'nombre': 'Pantal\u00f3n', 'precio': 80, 'cantidad': 1},\n    {'nombre': 'Zapatillas', 'precio': 120, 'cantidad': 1}\n]\nprint(precio_total(productos))  # Salida: 300\n</code></pre>"},{"location":"tutorial/p3/#tecnicas-para-iterar-sobre-los-elementos-de-un-diccionario","title":"T\u00e9cnicas para iterar sobre los elementos de un diccionario.","text":"<ol> <li>Iterar sobre las claves del diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nfor clave in diccionario:\n    print(clave)\n</code></pre> Este c\u00f3digo imprimir\u00e1 las claves 'a', 'b' y 'c'.</p> <ol> <li>Iterar sobre los valores del diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nfor valor in diccionario.values():\n    print(valor)\n</code></pre> Este c\u00f3digo imprimir\u00e1 los valores 1, 2 y 3.</p> <ol> <li>Iterar sobre las tuplas (clave, valor) del diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nfor clave, valor in diccionario.items():\n    print(clave, valor)\n</code></pre> Este c\u00f3digo imprimir\u00e1 las tuplas ('a', 1), ('b', 2) y ('c', 3).</p> <ol> <li>Usar una comprensi\u00f3n de diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nnuevo_diccionario = {clave: valor ** 2 for clave, valor in diccionario.items()}\n</code></pre> Este c\u00f3digo crear\u00e1 un nuevo diccionario con las mismas claves que el original y los valores elevados al cuadrado.</p> <p>Es importante tener en cuenta que los diccionarios en Python no est\u00e1n ordenados, por lo que el orden de las claves, valores y tuplas (clave, valor) puede variar de una ejecuci\u00f3n a otra.</p> <p>Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#dictionaries</p>"},{"location":"tutorial/p3/#funciones","title":"Funciones","text":"<p>En Python, una funci\u00f3n es un bloque de c\u00f3digo reutilizable que realiza una tarea espec\u00edfica cuando se llama. Las funciones son una parte fundamental de la programaci\u00f3n en Python y son utilizadas para modular y organizar el c\u00f3digo en tareas m\u00e1s peque\u00f1as y manejables. Aqu\u00ed tienes una explicaci\u00f3n detallada de las funciones en Python:</p>"},{"location":"tutorial/p3/#definicion-de-una-funcion","title":"Definici\u00f3n de una funci\u00f3n","text":"<p>Para definir una funci\u00f3n en Python, puedes usar la palabra clave def, seguida del nombre de la funci\u00f3n y los par\u00e1metros entre par\u00e9ntesis. Luego, un bloque de c\u00f3digo indentado define lo que hace la funci\u00f3n. Aqu\u00ed tienes un ejemplo simple:</p> <pre><code>def saludar(nombre):\n    print(\"Hola,\", nombre)\n</code></pre>"},{"location":"tutorial/p3/#llamando-a-una-funcion","title":"Llamando a una funci\u00f3n","text":"<p>Para ejecutar o \"llamar\" una funci\u00f3n, simplemente escribes su nombre seguido de par\u00e9ntesis que pueden contener los argumentos necesarios. Por ejemplo:</p> <pre><code>saludar(\"Juan\")\n</code></pre> <p>Esto imprimir\u00e1 \"Hola, Juan\" en la pantalla.</p>"},{"location":"tutorial/p3/#parametros","title":"Par\u00e1metros","text":"<p>Los par\u00e1metros son valores que se pasan a una funci\u00f3n cuando se llama. Los par\u00e1metros se utilizan para que una funci\u00f3n pueda aceptar datos de entrada y trabajar con ellos. En el ejemplo anterior, \"nombre\" es un par\u00e1metro de la funci\u00f3n \"saludar\".</p>"},{"location":"tutorial/p3/#valor-de-retorno","title":"Valor de retorno","text":"<p>Una funci\u00f3n puede devolver un valor utilizando la palabra clave return. Esto es \u00fatil cuando quieres que una funci\u00f3n realice un c\u00e1lculo y devuelva el resultado. Por ejemplo:</p> <pre><code>def suma(a, b):\n    resultado = a + b\n    return resultado\n</code></pre> <p>Puedes llamar a esta funci\u00f3n y almacenar el valor de retorno en una variable:</p> <pre><code>resultado_suma = suma(3, 5)\n</code></pre> <p>En este caso, resultado_suma contendr\u00eda el valor 8.</p>"},{"location":"tutorial/p3/#documentacion-de-funciones","title":"Documentaci\u00f3n de funciones","text":"<p>Es una buena pr\u00e1ctica incluir documentaci\u00f3n en tus funciones para explicar qu\u00e9 hace la funci\u00f3n, qu\u00e9 par\u00e1metros espera y qu\u00e9 valor devuelve. Puedes usar comentarios de cadena de documentaci\u00f3n (docstrings) para esto:</p> <pre><code>def suma(a, b):\n    \"\"\"\n    Esta funci\u00f3n suma dos n\u00fameros y devuelve el resultado.\n    :param a: El primer n\u00famero a sumar.\n    :param b: El segundo n\u00famero a sumar.\n    :return: La suma de a y b.\n    \"\"\"\n    resultado = a + b\n    return resultado\n</code></pre> <p>Puedes acceder a esta documentaci\u00f3n utilizando la funci\u00f3n help en Python.</p>"},{"location":"tutorial/p3/#funciones-sin-retorno","title":"Funciones sin retorno","text":"<p>No todas las funciones necesitan devolver un valor. Algunas funciones simplemente realizan una tarea sin necesidad de un valor de retorno. En ese caso, la funci\u00f3n puede no tener una instrucci\u00f3n return o puede tener return sin un valor despu\u00e9s de \u00e9l.</p> <pre><code>def saludar(nombre):\n    print(\"Hola,\", nombre)\n\n### \u00c1mbito de las variables\n\nLas variables definidas dentro de una funci\u00f3n tienen un alcance local, lo significa que solo est\u00e1n disponibles dentro de esa funci\u00f3n. Las variables definidas fuera de una funci\u00f3n tienen un alcance global y se pueden acceder desde cualquier parte del programa.\n\n```python  \nx = 10\n\ndef imprimir_x():\n    x = 5  # Esta variable x es local a la funci\u00f3n\n    print(\"x dentro de la funci\u00f3n:\", x)\n\nimprimir_x()\nprint(\"x fuera de la funci\u00f3n:\", x)\n</code></pre> <p>Esto imprimir\u00e1 \"x dentro de la funci\u00f3n: 5\" y \"x fuera de la funci\u00f3n: 10\".</p>"},{"location":"tutorial/p3/#variables-globales","title":"Variables Globales","text":"<p>Las variables globales en Python son variables declaradas fuera de cualquier funci\u00f3n, permitiendo que sean accesibles desde cualquier parte del c\u00f3digo.  Aqu\u00ed una explicaci\u00f3n detallada:</p>"},{"location":"tutorial/p3/#1-por-que-utilizar-variables-globales","title":"1. \u00bfPor qu\u00e9 utilizar variables globales?","text":"<ul> <li>Acceso universal:  Las variables globales son visibles y modificables desde cualquier funci\u00f3n dentro del script. </li> <li>Almacenamiento de informaci\u00f3n compartida:  Son \u00fatiles para compartir datos entre diferentes partes del c\u00f3digo.</li> <li>Configuraci\u00f3n global:  Se pueden usar para establecer valores predeterminados o constantes que se utilizan a lo largo del programa.</li> </ul>"},{"location":"tutorial/p3/#2-declaracion-y-acceso","title":"2. Declaraci\u00f3n y Acceso:","text":"<ul> <li>Declaraci\u00f3n:  Se declara una variable global simplemente asign\u00e1ndole un valor fuera de cualquier funci\u00f3n:</li> </ul> <pre><code>global_variable = \"Hola mundo!\"\n</code></pre> <ul> <li>Acceso:  Para acceder a una variable global dentro de una funci\u00f3n, se utiliza la palabra clave <code>global</code>:</li> </ul> <pre><code>def my_function():\n    global global_variable\n    print(global_variable) \n</code></pre>"},{"location":"tutorial/p3/#3-importancia-de-la-palabra-clave-global","title":"3. Importancia de la palabra clave <code>global</code>:","text":"<ul> <li>Ambig\u00fcedad:  Python asume que cualquier variable utilizada dentro de una funci\u00f3n es una variable local. Si se intenta modificar una variable global sin utilizar <code>global</code>, Python crear\u00e1 una nueva variable local con el mismo nombre, dejando la variable global sin cambios.</li> <li>Control de acceso:  La palabra clave <code>global</code> le dice a Python que la variable que se va a usar es la variable global, no una variable local.</li> </ul>"},{"location":"tutorial/p3/#4-ejemplos","title":"4. Ejemplos:","text":"<p>Ejemplo 1:  Contador global</p> <pre><code>global_counter = 0 \n\ndef increment_counter():\n    global global_counter \n    global_counter += 1\n    print(f\"Contador incrementado a: {global_counter}\")\n\nincrement_counter() # Salida: Contador incrementado a: 1\nincrement_counter() # Salida: Contador incrementado a: 2\n</code></pre> <p>Ejemplo 2:  Configuraci\u00f3n global</p> <pre><code>global_config = {\n    \"nombre\": \"Mi aplicaci\u00f3n\",\n    \"version\": \"1.0\"\n}\n\ndef mostrar_config():\n    print(f\"Nombre: {global_config['nombre']}\")\n    print(f\"Versi\u00f3n: {global_config['version']}\")\n\nmostrar_config() # Salida: Nombre: Mi aplicaci\u00f3n\n                #        Versi\u00f3n: 1.0\n</code></pre>"},{"location":"tutorial/p3/#5-precauciones","title":"5. Precauciones:","text":"<ul> <li>Evite el uso excesivo:  Las variables globales pueden hacer que el c\u00f3digo sea dif\u00edcil de entender y mantener, especialmente en programas grandes. Es preferible utilizar variables locales y pasar datos entre funciones cuando sea posible.</li> <li>Posibles errores:  Modificar variables globales desde diferentes partes del c\u00f3digo puede llevar a errores dif\u00edciles de rastrear.</li> <li>Limitaciones:  Las variables globales no se pueden usar para compartir informaci\u00f3n entre diferentes scripts o m\u00f3dulos.</li> </ul>"},{"location":"tutorial/p4/","title":"\ud83d\udcd8 Tutorial Detallado, Extensivo y Completo de Pydantic en Espa\u00f1ol","text":""},{"location":"tutorial/p4/#1-que-es-pydantic","title":"1. \u00bfQu\u00e9 es Pydantic?","text":"<p>Pydantic es una biblioteca de validaci\u00f3n y configuraci\u00f3n de datos en tiempo de ejecuci\u00f3n para Python, basada en anotaciones de tipo (type hints). Es ampliamente utilizada en aplicaciones modernas de Python, especialmente con frameworks como FastAPI, Starlette, y Django Ninja.</p>"},{"location":"tutorial/p4/#caracteristicas-principales","title":"Caracter\u00edsticas principales:","text":"<ul> <li>Validaci\u00f3n autom\u00e1tica de datos basada en tipos.</li> <li>Generaci\u00f3n de documentaci\u00f3n autom\u00e1tica (como JSON Schema).</li> <li>Conversi\u00f3n autom\u00e1tica de tipos (casting).</li> <li>Soporte para modelos anidados, listas, diccionarios, y m\u00e1s.</li> <li>Integraci\u00f3n perfecta con herramientas de desarrollo (IDEs, mypy, etc.).</li> <li>Compatible con Python 3.7+ (y versiones m\u00e1s recientes).</li> </ul> <p>Pydantic ayuda a evitar errores comunes en la manipulaci\u00f3n de datos, especialmente en APIs, formularios, archivos de configuraci\u00f3n o bases de datos.</p>"},{"location":"tutorial/p4/#2-instalacion-y-requisitos","title":"2. Instalaci\u00f3n y Requisitos","text":""},{"location":"tutorial/p4/#instalacion","title":"Instalaci\u00f3n","text":"<pre><code>pip install pydantic\n</code></pre> <p>Para Pydantic v2 (recomendado desde 2023):</p> <pre><code>pip install \"pydantic&gt;=2.0.0\"\n</code></pre> <p>\u26a0\ufe0f Nota: Pydantic v2 fue lanzado en 2023 y trae cambios importantes. Este tutorial cubre principalmente v2, pero se indicar\u00e1n diferencias con v1 cuando sea relevante.</p>"},{"location":"tutorial/p4/#requisitos","title":"Requisitos","text":"<ul> <li>Python 3.7 o superior</li> <li>Bibliotecas est\u00e1ndar de Python</li> </ul>"},{"location":"tutorial/p4/#3-modelos-basicos-con-basemodel","title":"3. Modelos B\u00e1sicos con <code>BaseModel</code>","text":"<p>La clase base de Pydantic es <code>BaseModel</code>. Define modelos de datos con campos tipados.</p>"},{"location":"tutorial/p4/#ejemplo-basico","title":"Ejemplo b\u00e1sico","text":"<pre><code>from pydantic import BaseModel\n\nclass Usuario(BaseModel):\n    nombre: str\n    edad: int\n    email: str\n\n# Crear una instancia\nusuario = Usuario(nombre=\"Ana\", edad=30, email=\"ana@example.com\")\n\nprint(usuario)\n# salida: nombre='Ana' edad=30 email='ana@example.com'\n</code></pre>"},{"location":"tutorial/p4/#que-hace-pydantic-aqui","title":"\u00bfQu\u00e9 hace Pydantic aqu\u00ed?","text":"<ul> <li>Valida que <code>edad</code> sea un entero.</li> <li>Convierte tipos si es posible (ej. cadena <code>\"30\"</code> \u2192 entero <code>30</code>).</li> <li>Lanza error si falta un campo obligatorio.</li> </ul>"},{"location":"tutorial/p4/#4-validacion-de-datos","title":"4. Validaci\u00f3n de Datos","text":"<p>Pydantic valida autom\u00e1ticamente los tipos y valores al instanciar un modelo.</p>"},{"location":"tutorial/p4/#ejemplo-de-validacion","title":"Ejemplo de validaci\u00f3n","text":"<pre><code>from pydantic import BaseModel, ValidationError\n\nclass Producto(BaseModel):\n    nombre: str\n    precio: float\n    disponible: bool\n\n# Intento con datos inv\u00e1lidos\ntry:\n    p = Producto(nombre=\"Laptop\", precio=\"abc\", disponible=\"no\")\nexcept ValidationError as e:\n    print(e)\n</code></pre> <p>Salida: <pre><code>2 validation errors for Producto\nprecio\n  Input should be a valid number [type=float_type, ...]\ndisponible\n  Input should be a valid boolean [type=bool_type, ...]\n</code></pre></p>"},{"location":"tutorial/p4/#5-tipos-de-datos-soportados","title":"5. Tipos de Datos Soportados","text":"<p>Pydantic soporta todos los tipos est\u00e1ndar de Python y muchos adicionales del m\u00f3dulo <code>typing</code>.</p>"},{"location":"tutorial/p4/#tipos-comunes","title":"Tipos comunes","text":"Tipo Descripci\u00f3n <code>str</code> Cadenas de texto <code>int</code> Enteros <code>float</code> N\u00fameros decimales <code>bool</code> Booleanos (<code>True</code>/<code>False</code>) <code>list</code> Listas <code>dict</code> Diccionarios <code>tuple</code> Tuplas <code>set</code> Conjuntos <code>datetime.datetime</code> Fecha y hora <code>datetime.date</code> Solo fecha <code>datetime.time</code> Solo hora <code>uuid.UUID</code> Identificadores \u00fanicos"},{"location":"tutorial/p4/#ejemplo-con-tipos-complejos","title":"Ejemplo con tipos complejos","text":"<pre><code>from datetime import datetime, date\nfrom uuid import UUID\nfrom typing import List\nfrom pydantic import BaseModel\n\nclass Pedido(BaseModel):\n    id: UUID\n    fecha: datetime\n    cliente: str\n    productos: List[str]\n    fecha_entrega: date\n</code></pre> <p>\u2705 Pydantic puede convertir cadenas a <code>datetime</code>, <code>date</code>, <code>UUID</code>, etc., autom\u00e1ticamente.</p>"},{"location":"tutorial/p4/#6-campos-opcionales-y-valores-por-defecto","title":"6. Campos Opcionales y Valores por Defecto","text":""},{"location":"tutorial/p4/#campos-opcionales","title":"Campos opcionales","text":"<p>Usa <code>Optional[]</code> o el operador <code>|</code> (Python 3.10+) con <code>None</code>.</p> <pre><code>from typing import Optional\nfrom pydantic import BaseModel\n\nclass Empleado(BaseModel):\n    nombre: str\n    edad: Optional[int] = None  # Opcional con valor por defecto None\n    departamento: str = \"General\"  # Valor por defecto\n</code></pre>"},{"location":"tutorial/p4/#uso","title":"Uso","text":"<pre><code>emp1 = Empleado(nombre=\"Luis\")  # edad=None, departamento=\"General\"\nemp2 = Empleado(nombre=\"Mar\u00eda\", edad=28, departamento=\"IT\")\n</code></pre> <p>\ud83d\udd39 En Pydantic v2, tambi\u00e9n puedes usar <code>Annotated</code> con <code>Field(default=None)</code> para mayor control.</p>"},{"location":"tutorial/p4/#7-campos-anotados-con-field","title":"7. Campos Anotados con <code>Field</code>","text":"<p><code>Field</code> permite a\u00f1adir metadatos a los campos: valores por defecto, restricciones, descripciones, etc.</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import Optional\n\nclass Libro(BaseModel):\n    titulo: str = Field(..., min_length=1, max_length=100, description=\"T\u00edtulo del libro\")\n    autor: str = Field(..., min_length=2)\n    paginas: int = Field(..., gt=0, le=10000)  # &gt;0 y &lt;=10000\n    isbn: Optional[str] = Field(\n        default=None,\n        pattern=r\"^\\d{3}-\\d{10}$\",  # Ej: 978-1234567890\n        description=\"ISBN en formato 13 d\u00edgitos con gui\u00f3n\"\n    )\n</code></pre>"},{"location":"tutorial/p4/#parametros-comunes-de-field","title":"Par\u00e1metros comunes de <code>Field</code>:","text":"Par\u00e1metro Descripci\u00f3n <code>default</code> Valor por defecto <code>default_factory</code> Funci\u00f3n que genera el valor por defecto <code>...</code> (Ellipsis) Indica que el campo es obligatorio <code>min_length</code>, <code>max_length</code> Longitud m\u00ednima/m\u00e1xima (para str, list) <code>gt</code>, <code>ge</code>, <code>lt</code>, <code>le</code> Mayor que, mayor o igual, menor que, menor o igual <code>pattern</code> Expresi\u00f3n regular <code>description</code> Descripci\u00f3n del campo <code>examples</code> Ejemplos de uso"},{"location":"tutorial/p4/#8-validadores-personalizados","title":"8. Validadores Personalizados","text":"<p>Puedes definir validadores usando decoradores <code>@field_validator</code> (v2) o <code>@validator</code> (v1).</p>"},{"location":"tutorial/p4/#validador-de-campo","title":"Validador de campo","text":"<pre><code>from pydantic import BaseModel, Field, field_validator\nfrom typing import List\n\nclass Estudiante(BaseModel):\n    nombre: str\n    materias: List[str]\n    promedio: float\n\n    @field_validator('nombre')\n    @classmethod\n    def nombre_no_vacio(cls, v):\n        if not v or v.strip() == \"\":\n            raise ValueError('El nombre no puede estar vac\u00edo')\n        return v.strip()\n\n    @field_validator('promedio')\n    @classmethod\n    def promedio_valido(cls, v):\n        if v &lt; 0 or v &gt; 10:\n            raise ValueError('El promedio debe estar entre 0 y 10')\n        return v\n</code></pre>"},{"location":"tutorial/p4/#validador-de-modelo-completo","title":"Validador de modelo completo","text":"<pre><code>from pydantic import BaseModel, model_validator\n\nclass Rectangulo(BaseModel):\n    ancho: float\n    alto: float\n    area: float = None\n\n    @model_validator(mode='after')\n    def calcular_area(cls, model):\n        model.area = model.ancho * model.alto\n        return model\n</code></pre> <p>\ud83d\udd39 <code>mode='after'</code>: se ejecuta despu\u00e9s de la validaci\u00f3n de campos. \ud83d\udd39 <code>mode='before'</code>: se ejecuta antes.</p>"},{"location":"tutorial/p4/#9-modelos-anidados-y-composicion","title":"9. Modelos Anidados y Composici\u00f3n","text":"<p>Puedes usar modelos como tipos de campo.</p> <pre><code>from pydantic import BaseModel\nfrom typing import List\n\nclass Direccion(BaseModel):\n    calle: str\n    ciudad: str\n    codigo_postal: str\n\nclass Persona(BaseModel):\n    nombre: str\n    direccion: Direccion\n    telefonos: List[str] = []\n\n# Uso\ndir = Direccion(calle=\"Av. Siempre Viva 123\", ciudad=\"Springfield\", codigo_postal=\"12345\")\npersona = Persona(nombre=\"Homero\", direccion=dir, telefonos=[\"555-1234\"])\n\nprint(persona.direccion.ciudad)  # Springfield\n</code></pre>"},{"location":"tutorial/p4/#10-listas-dicts-y-colecciones","title":"10. Listas, Dicts y Colecciones","text":"<p>Pydantic soporta colecciones con validaci\u00f3n interna.</p>"},{"location":"tutorial/p4/#listas-con-tipo-especifico","title":"Listas con tipo espec\u00edfico","text":"<pre><code>from typing import List\n\nclass Inventario(BaseModel):\n    productos: List[str]\n    precios: List[float]\n</code></pre>"},{"location":"tutorial/p4/#diccionarios","title":"Diccionarios","text":"<pre><code>from typing import Dict\n\nclass Configuracion(BaseModel):\n    variables: Dict[str, str]  # claves y valores como str\n</code></pre>"},{"location":"tutorial/p4/#listas-de-modelos","title":"Listas de modelos","text":"<pre><code>class Tarea(BaseModel):\n    titulo: str\n    completada: bool\n\nclass ListaTareas(BaseModel):\n    nombre: str\n    tareas: List[Tarea]\n</code></pre>"},{"location":"tutorial/p4/#11-uso-de-alias-campos-con-nombres-diferentes","title":"11. Uso de Alias (Campos con Nombres Diferentes)","text":"<p>A veces los nombres de campo en Python no coinciden con los de JSON (ej: <code>user_id</code> vs <code>userId</code>).</p>"},{"location":"tutorial/p4/#alias-y-validation_alias","title":"<code>alias</code> y <code>validation_alias</code>","text":"<pre><code>from pydantic import BaseModel, Field\n\nclass UsuarioAPI(BaseModel):\n    usuario_id: int = Field(..., alias=\"userId\")\n    nombre_completo: str = Field(..., alias=\"fullName\")\n\n    class Config:\n        populate_by_name = True  # Permite usar nombre de campo o alias\n</code></pre> <p>\ud83d\udd39 En Pydantic v2, <code>populate_by_name</code> se llama <code>populate_by_name=True</code> en <code>model_config</code>.</p>"},{"location":"tutorial/p4/#uso-con-json","title":"Uso con JSON","text":"<pre><code>json_data = '{\"userId\": 123, \"fullName\": \"Ana P\u00e9rez\"}'\nusuario = UsuarioAPI.model_validate_json(json_data)\nprint(usuario.usuario_id)  # 123\n</code></pre>"},{"location":"tutorial/p4/#12-serializacion-y-deserializacion","title":"12. Serializaci\u00f3n y Deserializaci\u00f3n","text":""},{"location":"tutorial/p4/#deserializacion-de-dict-o-json-a-modelo","title":"Deserializaci\u00f3n (de dict o JSON a modelo)","text":"<pre><code>data = {\"nombre\": \"Carlos\", \"edad\": 25, \"email\": \"carlos@example.com\"}\nusuario = Usuario.model_validate(data)  # v2 (antes: parse_obj)\n</code></pre>"},{"location":"tutorial/p4/#serializacion-modelo-a-dict-o-json","title":"Serializaci\u00f3n (modelo a dict o JSON)","text":"<pre><code>usuario_dict = usuario.model_dump()  # v2 (antes: dict())\nusuario_json = usuario.model_dump_json(indent=2)\n</code></pre>"},{"location":"tutorial/p4/#opciones-comunes","title":"Opciones comunes","text":"<pre><code>usuario.model_dump(\n    include={'nombre', 'email'},  # Solo incluir estos campos\n    exclude={'edad'},             # Excluir campo\n    by_alias=True,                # Usar alias en salida\n    exclude_none=True,            # No incluir valores None\n)\n</code></pre>"},{"location":"tutorial/p4/#13-configuracion-del-modelo-config","title":"13. Configuraci\u00f3n del Modelo (<code>Config</code>)","text":"<p>En Pydantic v2, se usa <code>model_config</code> como atributo de clase.</p> <pre><code>from pydantic import BaseModel\n\nclass Producto(BaseModel):\n    nombre: str\n    precio: float\n\n    model_config = {\n        \"frozen\": True,                # Inmutabilidad\n        \"str_strip_whitespace\": True,  # Eliminar espacios en str\n        \"validate_assignment\": True,   # Validar al asignar\n        \"extra\": \"forbid\",             # No permitir campos extra\n    }\n</code></pre>"},{"location":"tutorial/p4/#opciones-clave-de-model_config","title":"Opciones clave de <code>model_config</code>:","text":"Opci\u00f3n Descripci\u00f3n <code>frozen</code> Hace el modelo inmutable (como un namedtuple) <code>extra</code> <code>'allow'</code>, <code>'ignore'</code>, <code>'forbid'</code> (campos no definidos) <code>validate_assignment</code> Valida al cambiar un atributo <code>str_strip_whitespace</code> Recorta espacios en cadenas <code>arbitrary_types_allowed</code> Permite tipos no est\u00e1ndar (con precauci\u00f3n)"},{"location":"tutorial/p4/#14-uso-con-fastapi","title":"14. Uso con FastAPI","text":"<p>Pydantic es el coraz\u00f3n de FastAPI para validaci\u00f3n de entrada/salida.</p> <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import List\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    nombre: str\n    precio: float\n\nclass Pedido(BaseModel):\n    id: int\n    items: List[Item]\n    activo: bool\n\n@app.post(\"/pedidos/\")\ndef crear_pedido(pedido: Pedido):\n    return {\"mensaje\": \"Pedido creado\", \"id\": pedido.id}\n</code></pre> <p>FastAPI: - Valida autom\u00e1ticamente el JSON entrante. - Genera documentaci\u00f3n OpenAPI (Swagger). - Devuelve errores claros si falla la validaci\u00f3n.</p>"},{"location":"tutorial/p4/#15-manejo-de-errores-y-excepciones","title":"15. Manejo de Errores y Excepciones","text":"<p>Pydantic lanza <code>ValidationError</code> cuando falla la validaci\u00f3n.</p> <pre><code>from pydantic import ValidationError\n\ntry:\n    modelo = MiModelo(**datos_invalidos)\nexcept ValidationError as e:\n    for error in e.errors():\n        print(f\"Error en campo {error['loc']}: {error['msg']}\")\n</code></pre>"},{"location":"tutorial/p4/#estructura-de-error","title":"Estructura de error","text":"<pre><code>[\n  {\n    \"type\": \"missing\",\n    \"loc\": [\"nombre\"],\n    \"msg\": \"Field required\",\n    \"input\": {\"edad\": 25}\n  }\n]\n</code></pre>"},{"location":"tutorial/p4/#16-modelos-genericos","title":"16. Modelos Gen\u00e9ricos","text":"<p>Puedes crear modelos reutilizables con tipos gen\u00e9ricos.</p> <pre><code>from typing import Generic, TypeVar, List\nfrom pydantic import BaseModel\n\nT = TypeVar('T')\n\nclass RespuestaPaginada(BaseModel, Generic[T]):\n    items: List[T]\n    total: int\n    pagina: int\n    hay_mas: bool\n\n# Uso\nclass Usuario(BaseModel):\n    id: int\n    nombre: str\n\nrespuesta = RespuestaPaginada[Usuario](\n    items=[Usuario(id=1, nombre=\"Ana\")],\n    total=1,\n    pagina=1,\n    hay_mas=False\n)\n</code></pre>"},{"location":"tutorial/p4/#17-modelos-dinamicos-y-create_model","title":"17. Modelos Din\u00e1micos y <code>create_model</code>","text":"<p>Crea modelos en tiempo de ejecuci\u00f3n.</p> <pre><code>from pydantic import create_model\n\nDynamicModel = create_model(\n    'DynamicModel',\n    nombre=(str, ...),\n    edad=(int, Field(gt=0)),\n    email=(str, None)\n)\n\ninstancia = DynamicModel(nombre=\"Juan\", edad=30)\n</code></pre> <p>\u00datil para configuraciones din\u00e1micas, APIs gen\u00e9ricas, etc.</p>"},{"location":"tutorial/p4/#18-uso-con-pydantic-v2-actualizaciones-clave","title":"18. Uso con Pydantic v2 (Actualizaciones Clave)","text":"<p>Pydantic v2 (2023) trae cambios importantes:</p>"},{"location":"tutorial/p4/#cambios-principales","title":"Cambios principales:","text":"v1 v2 <code>parse_obj()</code> <code>model_validate()</code> <code>dict()</code> <code>model_dump()</code> <code>json()</code> <code>model_dump_json()</code> <code>@validator</code> <code>@field_validator</code> <code>@root_validator</code> <code>@model_validator(mode='before'/'after')</code> <code>config</code> como clase <code>model_config</code> como dict"},{"location":"tutorial/p4/#ejemplo-v2","title":"Ejemplo v2","text":"<pre><code>from pydantic import BaseModel, field_validator, Field\n\nclass User(BaseModel):\n    name: str = Field(..., min_length=2)\n    age: int\n\n    @field_validator('age')\n    @classmethod\n    def check_age(cls, v):\n        if v &lt; 0:\n            raise ValueError('Age must be positive')\n        return v\n\n    model_config = {\"extra\": \"forbid\"}\n</code></pre>"},{"location":"tutorial/p4/#19-mejores-practicas-y-consejos","title":"19. Mejores Pr\u00e1cticas y Consejos","text":"<ol> <li>\u2705 Usa <code>Field</code> para documentar y restringir campos.</li> <li>\u2705 Define modelos peque\u00f1os y reutilizables.</li> <li>\u2705 Usa <code>model_config</code> para configurar comportamiento global.</li> <li>\u2705 Evita l\u00f3gica compleja en validadores; mant\u00e9nlos simples.</li> <li>\u2705 Usa <code>default_factory</code> para valores mutables (listas, dict):</li> </ol> <pre><code>from typing import List\nfrom pydantic import BaseModel, Field\n\nclass Grupo(BaseModel):\n    miembros: List[str] = Field(default_factory=list)\n</code></pre> <ol> <li>\u2705 Usa <code>exclude_none=True</code> al serializar para JSON limpio.</li> <li>\u2705 Combina con <code>mypy</code> para detecci\u00f3n temprana de errores.</li> </ol>"},{"location":"tutorial/p4/#20-ejemplo-completo-api-rest-con-pydantic-fastapi","title":"20. Ejemplo Completo: API REST con Pydantic + FastAPI","text":"<pre><code># main.py\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel, Field, field_validator\nfrom typing import List, Optional\nfrom datetime import datetime\n\napp = FastAPI(title=\"API de Tareas\", version=\"1.0\")\n\n# Modelos\nclass TareaBase(BaseModel):\n    titulo: str = Field(..., min_length=1, max_length=100)\n    descripcion: Optional[str] = None\n\nclass TareaCrear(TareaBase):\n    @field_validator('titulo')\n    @classmethod\n    def no_contiene_prohibido(cls, v):\n        prohibidas = [\"spam\", \"malware\"]\n        if any(p in v.lower() for p in prohibidas):\n            raise ValueError(\"T\u00edtulo no permitido\")\n        return v\n\nclass Tarea(TareaBase):\n    id: int\n    completada: bool = False\n    fecha_creacion: datetime\n\n    model_config = {\"from_attributes\": True}  # Para ORM\n\n# Base de datos simulada\ntareas_db = []\nnext_id = 1\n\n@app.post(\"/tareas/\", response_model=Tarea, status_code=201)\ndef crear_tarea(tarea: TareaCrear):\n    global next_id\n    nueva = Tarea(\n        id=next_id,\n        **tarea.model_dump(),\n        fecha_creacion=datetime.now()\n    )\n    tareas_db.append(nueva)\n    next_id += 1\n    return nueva\n\n@app.get(\"/tareas/\", response_model=List[Tarea])\ndef listar_tareas():\n    return tareas_db\n\n@app.get(\"/tareas/{tarea_id}\", response_model=Tarea)\ndef obtener_tarea(tarea_id: int):\n    for t in tareas_db:\n        if t.id == tarea_id:\n            return t\n    raise HTTPException(status_code=404, detail=\"Tarea no encontrada\")\n</code></pre> <p>Inicia con: <pre><code>uvicorn main:app --reload\n</code></pre></p> <p>Accede a: - <code>http://localhost:8000/docs</code> \u2192 Documentaci\u00f3n autom\u00e1tica - <code>http://localhost:8000/openapi.json</code> \u2192 Esquema OpenAPI</p>"},{"location":"tutorial/p5/","title":"\ud83d\udcd8 Tutorial de Fork en GitHub y Comandos B\u00e1sicos de Git","text":"<p>Este tutorial explica c\u00f3mo hacer un fork de un repositorio en GitHub, configurar credenciales en Git, y los comandos b\u00e1sicos para trabajar con un fork, utilizando MkDocs con el tema Material.</p>"},{"location":"tutorial/p5/#requisitos-previos","title":"Requisitos Previos","text":"<ul> <li>Tener una cuenta en GitHub.</li> <li>Tener instalado Git en tu m\u00e1quina.</li> <li>Un editor de texto o IDE (como VS Code).</li> <li>Acceso a una terminal (como Bash, PowerShell o la terminal de tu IDE).</li> </ul>"},{"location":"tutorial/p5/#que-es-un-fork","title":"\u00bfQu\u00e9 es un Fork?","text":"<p>Un fork es una copia de un repositorio de GitHub en tu propia cuenta. Te permite trabajar en el proyecto sin afectar el repositorio original. Es \u00fatil para contribuir a proyectos de c\u00f3digo abierto o experimentar con cambios.</p>"},{"location":"tutorial/p5/#paso-1-hacer-un-fork-en-github","title":"Paso 1: Hacer un Fork en GitHub","text":"<ol> <li> <p>Accede al repositorio original:</p> <ul> <li>Ve al repositorio en GitHub que deseas copiar (por ejemplo, <code>https://github.com/usuario/repositorio</code>).</li> </ul> </li> <li> <p>Haz un fork:</p> <ul> <li>En la esquina superior derecha, haz clic en el bot\u00f3n Fork.</li> <li>Selecciona tu cuenta como destino del fork. Esto crear\u00e1 una copia del repositorio en <code>https://github.com/tu-usuario/repositorio</code>.</li> </ul> </li> <li> <p>Clona tu fork:</p> <ul> <li>Copia la URL de tu fork (por ejemplo, <code>https://github.com/tu-usuario/repositorio.git</code>).</li> <li>En tu terminal, ejecuta:     <pre><code>git clone https://github.com/tu-usuario/repositorio.git\n</code></pre></li> <li>Esto descargar\u00e1 el repositorio a tu m\u00e1quina local.</li> </ul> </li> <li> <p>Entra al directorio del proyecto:    <pre><code>cd repositorio\n</code></pre></p> </li> </ol>"},{"location":"tutorial/p5/#paso-2-configurar-git-credenciales","title":"Paso 2: Configurar Git Credenciales","text":"<p>Para interactuar con GitHub, necesitas configurar tus credenciales en Git.</p> <ol> <li> <p>Configurar nombre y correo:    <pre><code>git config --global user.name \"Tu Nombre\"\ngit config --global user.email \"tu-correo@ejemplo.com\"\n</code></pre></p> </li> <li> <p>Verificar configuraci\u00f3n:    <pre><code>git config --global --list\n</code></pre></p> </li> </ol>"},{"location":"tutorial/p5/#paso-3-comandos-basicos-de-git","title":"Paso 3: Comandos B\u00e1sicos de Git","text":"<p>A continuaci\u00f3n, los comandos b\u00e1sicos para trabajar con Git:</p> Comando Descripci\u00f3n <code>git init</code> Inicializa un nuevo repositorio Git. <code>git add .</code> Agrega todos los archivo al \u00e1rea de preparaci\u00f3n (staging). <code>git add .</code> Agrega todos los archivos modificados al \u00e1rea de preparaci\u00f3n. <code>git commit -m \"Mensaje\"</code> Crea un commit con los cambios en el \u00e1rea de preparaci\u00f3n. <code>git status</code> Muestra el estado actual del repositorio. <code>git push</code> Sube los cambios a la rama especificada en el repositorio remoto. <code>git pull</code> Descarga y fusiona los cambios de la rama remota. <code>git clone &lt;url&gt;</code> Clona un repositorio remoto a tu m\u00e1quina local."},{"location":"tutorial/api1/01-introduccion-fastapi/","title":"Introducci\u00f3n a FastAPI","text":""},{"location":"tutorial/api1/01-introduccion-fastapi/#que-es-fastapi","title":"\u00bfQu\u00e9 es FastAPI?","text":"<p>FastAPI es un framework web moderno y de alto rendimiento para construir APIs con Python 3.7+ basado en las anotaciones de tipo est\u00e1ndar de Python.</p>"},{"location":"tutorial/api1/01-introduccion-fastapi/#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<ul> <li>R\u00e1pido: Muy alto rendimiento, a la par con NodeJS y Go (gracias a Starlette y Pydantic)</li> <li>R\u00e1pido de codificar: Aumenta la velocidad de desarrollo entre 200% y 300%</li> <li>Menos errores: Reduce aproximadamente un 40% de errores inducidos por humanos</li> <li>Intuitivo: Gran soporte del editor con autocompletado en todas partes</li> <li>F\u00e1cil: Dise\u00f1ado para ser f\u00e1cil de usar y aprender</li> <li>Corto: Minimiza la duplicaci\u00f3n de c\u00f3digo</li> <li>Robusto: Obt\u00e9n c\u00f3digo listo para producci\u00f3n con documentaci\u00f3n autom\u00e1tica interactiva</li> <li>Basado en est\u00e1ndares: Basado en (y totalmente compatible con) los est\u00e1ndares abiertos para APIs: OpenAPI y JSON Schema</li> </ul>"},{"location":"tutorial/api1/01-introduccion-fastapi/#por-que-fastapi","title":"\u00bfPor qu\u00e9 FastAPI?","text":""},{"location":"tutorial/api1/01-introduccion-fastapi/#1-documentacion-automatica","title":"1. Documentaci\u00f3n Autom\u00e1tica","text":"<p>FastAPI genera autom\u00e1ticamente documentaci\u00f3n interactiva para tu API usando: - Swagger UI (disponible en <code>/docs</code>) - ReDoc (disponible en <code>/redoc</code>)</p>"},{"location":"tutorial/api1/01-introduccion-fastapi/#2-validacion-de-datos","title":"2. Validaci\u00f3n de Datos","text":"<p>Utiliza Pydantic para validaci\u00f3n autom\u00e1tica de datos de entrada y salida: - Validaci\u00f3n de tipos - Validaci\u00f3n de formato - Mensajes de error claros</p>"},{"location":"tutorial/api1/01-introduccion-fastapi/#3-tipado-estatico","title":"3. Tipado Est\u00e1tico","text":"<p>Aprovecha las anotaciones de tipo de Python para: - Mejor soporte del IDE - Detecci\u00f3n temprana de errores - C\u00f3digo m\u00e1s legible y mantenible</p>"},{"location":"tutorial/api1/01-introduccion-fastapi/#4-rendimiento","title":"4. Rendimiento","text":"<ul> <li>Uno de los frameworks Python m\u00e1s r\u00e1pidos disponibles</li> <li>Comparable con frameworks de Node.js y Go</li> <li>Basado en Starlette para la parte web y Pydantic para la parte de datos</li> </ul>"},{"location":"tutorial/api1/01-introduccion-fastapi/#comparacion-con-otros-frameworks","title":"Comparaci\u00f3n con otros frameworks","text":"Caracter\u00edstica FastAPI Flask Django REST Rendimiento \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50 Documentaci\u00f3n autom\u00e1tica \u2705 \u274c \u274c Validaci\u00f3n autom\u00e1tica \u2705 \u274c \u2705 Tipado est\u00e1tico \u2705 \u274c \u274c Curva de aprendizaje \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50 Async/await nativo \u2705 \u2705 \u2705"},{"location":"tutorial/api1/01-introduccion-fastapi/#conceptos-clave","title":"Conceptos clave","text":""},{"location":"tutorial/api1/01-introduccion-fastapi/#1-path-operations","title":"1. Path Operations","text":"<p>Las operaciones de ruta son las funciones que manejan las peticiones HTTP:</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre>"},{"location":"tutorial/api1/01-introduccion-fastapi/#2-path-parameters","title":"2. Path Parameters","text":"<p>Par\u00e1metros que forman parte de la URL:</p> <pre><code>@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre>"},{"location":"tutorial/api1/01-introduccion-fastapi/#3-query-parameters","title":"3. Query Parameters","text":"<p>Par\u00e1metros que van despu\u00e9s del <code>?</code> en la URL:</p> <pre><code>@app.get(\"/items/\")\ndef read_items(skip: int = 0, limit: int = 10):\n    return {\"skip\": skip, \"limit\": limit}\n</code></pre>"},{"location":"tutorial/api1/01-introduccion-fastapi/#4-request-body","title":"4. Request Body","text":"<p>Datos enviados en el cuerpo de la petici\u00f3n:</p> <pre><code>from pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: bool = False\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n</code></pre>"},{"location":"tutorial/api1/01-introduccion-fastapi/#estructura-basica-de-una-aplicacion-fastapi","title":"Estructura b\u00e1sica de una aplicaci\u00f3n FastAPI","text":"<pre><code>from fastapi import FastAPI\n\n# Crear instancia de la aplicaci\u00f3n\napp = FastAPI(\n    title=\"Mi API\",\n    description=\"Una API de ejemplo\",\n    version=\"1.0.0\"\n)\n\n# Definir rutas\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"\u00a1Hola Mundo!\"}\n\n# Ejecutar con: uvicorn main:app --reload\n</code></pre>"},{"location":"tutorial/api1/01-introduccion-fastapi/#ventajas-para-el-desarrollo","title":"Ventajas para el desarrollo","text":""},{"location":"tutorial/api1/01-introduccion-fastapi/#1-desarrollo-rapido","title":"1. Desarrollo r\u00e1pido","text":"<ul> <li>Menos c\u00f3digo repetitivo</li> <li>Validaci\u00f3n autom\u00e1tica</li> <li>Documentaci\u00f3n autom\u00e1tica</li> <li>Excelente soporte del IDE</li> </ul>"},{"location":"tutorial/api1/01-introduccion-fastapi/#2-mantenibilidad","title":"2. Mantenibilidad","text":"<ul> <li>C\u00f3digo m\u00e1s limpio y legible</li> <li>Tipado est\u00e1tico reduce errores</li> <li>Estructura clara y organizada</li> </ul>"},{"location":"tutorial/api1/01-introduccion-fastapi/#3-escalabilidad","title":"3. Escalabilidad","text":"<ul> <li>Soporte nativo para async/await</li> <li>Alto rendimiento</li> <li>F\u00e1cil de testear</li> </ul>"},{"location":"tutorial/api1/01-introduccion-fastapi/#cuando-usar-fastapi","title":"\u00bfCu\u00e1ndo usar FastAPI?","text":"<p>FastAPI es ideal para:</p> <ul> <li>APIs REST modernas: Especialmente cuando necesitas documentaci\u00f3n autom\u00e1tica</li> <li>Microservicios: Por su rendimiento y facilidad de despliegue</li> <li>Prototipado r\u00e1pido: Desarrollo r\u00e1pido con validaci\u00f3n autom\u00e1tica</li> <li>APIs con validaci\u00f3n compleja: Pydantic hace la validaci\u00f3n muy f\u00e1cil</li> <li>Proyectos que requieren alto rendimiento: Comparable con frameworks de otros lenguajes</li> </ul>"},{"location":"tutorial/api1/01-introduccion-fastapi/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<p>En el siguiente tema aprenderemos c\u00f3mo instalar y configurar FastAPI para comenzar a desarrollar nuestra API de inventario.</p> <p>\ud83d\udca1 Tip: FastAPI est\u00e1 basado en est\u00e1ndares abiertos como OpenAPI y JSON Schema, lo que significa que tu API ser\u00e1 compatible con muchas herramientas y servicios existentes.</p> <p>\ud83d\udd17 Enlaces \u00fatiles: - Documentaci\u00f3n oficial de FastAPI - Tutorial oficial - Repositorio en GitHub</p>"},{"location":"tutorial/api1/02-instalacion-configuracion/","title":"Instalaci\u00f3n y Configuraci\u00f3n","text":""},{"location":"tutorial/api1/02-instalacion-configuracion/#prerrequisitos","title":"Prerrequisitos","text":"<p>Antes de comenzar, aseg\u00farate de tener instalado:</p> <ul> <li>Python 3.7 o superior (recomendado Python 3.9+)</li> <li>pip (gestor de paquetes de Python)</li> <li>Editor de c\u00f3digo (VS Code, PyCharm, etc.)</li> </ul>"},{"location":"tutorial/api1/02-instalacion-configuracion/#verificar-la-instalacion-de-python","title":"Verificar la instalaci\u00f3n de Python","text":"<pre><code># Verificar versi\u00f3n de Python\npython --version\n# o\npython3 --version\n\n# Verificar pip\npip --version\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#configuracion-del-entorno-de-desarrollo","title":"Configuraci\u00f3n del entorno de desarrollo","text":""},{"location":"tutorial/api1/02-instalacion-configuracion/#1-crear-directorio-del-proyecto","title":"1. Crear directorio del proyecto","text":"<pre><code># Crear directorio\nmkdir fastapi-inventory\ncd fastapi-inventory\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#2-crear-entorno-virtual","title":"2. Crear entorno virtual","text":"<p>Un entorno virtual a\u00edsla las dependencias de tu proyecto:</p> <pre><code># Crear entorno virtual\npython -m venv .venv\n\n# Activar entorno virtual\n# En Windows:\n.venv\\Scripts\\activate\n\n# En macOS/Linux:\nsource .venv/bin/activate\n</code></pre> <p>\ud83d\udca1 Tip: Siempre activa el entorno virtual antes de trabajar en el proyecto.</p>"},{"location":"tutorial/api1/02-instalacion-configuracion/#3-actualizar-pip","title":"3. Actualizar pip","text":"<pre><code># Actualizar pip a la \u00faltima versi\u00f3n\npip install --upgrade pip\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#instalacion-de-fastapi","title":"Instalaci\u00f3n de FastAPI","text":""},{"location":"tutorial/api1/02-instalacion-configuracion/#instalacion-basica","title":"Instalaci\u00f3n b\u00e1sica","text":"<pre><code># Instalar FastAPI\npip install fastapi\n\n# Instalar servidor ASGI (Uvicorn)\npip install \"uvicorn[standard]\"\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#instalacion-completa-para-el-proyecto","title":"Instalaci\u00f3n completa para el proyecto","text":"<p>Para nuestro proyecto de inventario, necesitamos dependencias adicionales:</p> <pre><code># Instalar todas las dependencias necesarias\npip install fastapi uvicorn[standard] sqlalchemy aiosqlite pydantic[email] python-multipart python-dotenv\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#crear-archivo-requirementstxt","title":"Crear archivo requirements.txt","text":"<p>Es una buena pr\u00e1ctica mantener un registro de las dependencias:</p> <pre><code># Crear archivo requirements.txt\npip freeze &gt; requirements.txt\n</code></pre> <p>El archivo <code>requirements.txt</code> deber\u00eda verse as\u00ed:</p> <pre><code>fastapi&gt;=0.104.1\nuvicorn[standard]&gt;=0.24.0\nsqlalchemy&gt;=2.0.23\naiosqlite&gt;=0.19.0\npydantic&gt;=2.5.0\npython-multipart&gt;=0.0.6\npython-dotenv&gt;=1.0.0\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#primera-aplicacion-fastapi","title":"Primera aplicaci\u00f3n FastAPI","text":""},{"location":"tutorial/api1/02-instalacion-configuracion/#1-crear-archivo-mainpy","title":"1. Crear archivo main.py","text":"<p>Crea un archivo llamado <code>main.py</code> en el directorio ra\u00edz:</p> <pre><code>from fastapi import FastAPI\n\n# Crear instancia de FastAPI\napp = FastAPI(\n    title=\"Inventory API\",\n    description=\"API REST para gesti\u00f3n de inventario\",\n    version=\"1.0.0\"\n)\n\n# Ruta ra\u00edz\n@app.get(\"/\")\ndef read_root():\n    return {\n        \"message\": \"\u00a1Bienvenido a la API de Inventario!\",\n        \"version\": \"1.0.0\",\n        \"docs\": \"/docs\"\n    }\n\n# Ruta de ejemplo\n@app.get(\"/health\")\ndef health_check():\n    return {\"status\": \"OK\", \"message\": \"API funcionando correctamente\"}\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#2-ejecutar-la-aplicacion","title":"2. Ejecutar la aplicaci\u00f3n","text":"<pre><code># Ejecutar servidor de desarrollo\nuvicorn main:app --reload\n</code></pre> <p>Par\u00e1metros explicados: - <code>main:app</code>: archivo <code>main.py</code> y variable <code>app</code> - <code>--reload</code>: reinicia autom\u00e1ticamente cuando detecta cambios</p>"},{"location":"tutorial/api1/02-instalacion-configuracion/#3-verificar-que-funciona","title":"3. Verificar que funciona","text":"<p>Abre tu navegador y visita:</p> <ul> <li>API: http://localhost:8000</li> <li>Documentaci\u00f3n Swagger: http://localhost:8000/docs</li> <li>Documentaci\u00f3n ReDoc: http://localhost:8000/redoc</li> </ul>"},{"location":"tutorial/api1/02-instalacion-configuracion/#configuracion-avanzada","title":"Configuraci\u00f3n avanzada","text":""},{"location":"tutorial/api1/02-instalacion-configuracion/#1-variables-de-entorno","title":"1. Variables de entorno","text":"<p>Crea un archivo <code>.env</code> para configuraciones:</p> <pre><code># .env\nDATABASE_URL=sqlite:///./inventory.db\nDEBUG=True\nSECRET_KEY=your-secret-key-here\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#2-archivo-de-configuracion","title":"2. Archivo de configuraci\u00f3n","text":"<p>Crea <code>app/config.py</code>:</p> <pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass Settings:\n    # Base de datos\n    DATABASE_URL: str = os.getenv(\"DATABASE_URL\", \"sqlite:///./inventory.db\")\n\n    # Configuraci\u00f3n de la aplicaci\u00f3n\n    DEBUG: bool = os.getenv(\"DEBUG\", \"False\").lower() == \"true\"\n    SECRET_KEY: str = os.getenv(\"SECRET_KEY\", \"your-secret-key\")\n\n    # Configuraci\u00f3n de CORS\n    ALLOWED_ORIGINS: list = [\n        \"http://localhost:3000\",\n        \"http://localhost:8080\",\n    ]\n\n    # Configuraci\u00f3n de paginaci\u00f3n\n    DEFAULT_PAGE_SIZE: int = 20\n    MAX_PAGE_SIZE: int = 100\n\nsettings = Settings()\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#3-configuracion-de-cors","title":"3. Configuraci\u00f3n de CORS","text":"<p>Para permitir peticiones desde el frontend:</p> <pre><code>from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom app.config import settings\n\napp = FastAPI(\n    title=\"Inventory API\",\n    description=\"API REST para gesti\u00f3n de inventario\",\n    version=\"1.0.0\"\n)\n\n# Configurar CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.ALLOWED_ORIGINS,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#estructura-de-directorios-recomendada","title":"Estructura de directorios recomendada","text":"<pre><code>fastapi-inventory/\n\u251c\u2500\u2500 .venv/                 # Entorno virtual\n\u251c\u2500\u2500 app/                   # C\u00f3digo de la aplicaci\u00f3n\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py           # Aplicaci\u00f3n principal\n\u2502   \u251c\u2500\u2500 config.py         # Configuraciones\n\u2502   \u251c\u2500\u2500 database/         # Configuraci\u00f3n de BD\n\u2502   \u251c\u2500\u2500 models/           # Modelos SQLAlchemy\n\u2502   \u251c\u2500\u2500 schemas/          # Esquemas Pydantic\n\u2502   \u251c\u2500\u2500 crud/             # Operaciones CRUD\n\u2502   \u251c\u2500\u2500 routers/          # Rutas de la API\n\u2502   \u2514\u2500\u2500 utils/            # Utilidades\n\u251c\u2500\u2500 .env                  # Variables de entorno\n\u251c\u2500\u2500 .gitignore           # Archivos a ignorar en Git\n\u251c\u2500\u2500 requirements.txt     # Dependencias\n\u2514\u2500\u2500 README.md           # Documentaci\u00f3n\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#comandos-utiles-para-desarrollo","title":"Comandos \u00fatiles para desarrollo","text":""},{"location":"tutorial/api1/02-instalacion-configuracion/#ejecutar-servidor","title":"Ejecutar servidor","text":"<pre><code># Desarrollo (con recarga autom\u00e1tica)\nuvicorn app.main:app --reload\n\n# Especificar host y puerto\nuvicorn app.main:app --host 0.0.0.0 --port 8000 --reload\n\n# Producci\u00f3n (sin recarga)\nuvicorn app.main:app --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#gestion-de-dependencias","title":"Gesti\u00f3n de dependencias","text":"<pre><code># Instalar desde requirements.txt\npip install -r requirements.txt\n\n# Actualizar requirements.txt\npip freeze &gt; requirements.txt\n\n# Instalar nueva dependencia\npip install nueva-dependencia\npip freeze &gt; requirements.txt\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#configuracion-del-editor-vs-code","title":"Configuraci\u00f3n del editor (VS Code)","text":""},{"location":"tutorial/api1/02-instalacion-configuracion/#extensiones-recomendadas","title":"Extensiones recomendadas","text":"<ul> <li>Python (Microsoft)</li> <li>Pylance (Microsoft)</li> <li>Python Docstring Generator</li> <li>REST Client (para probar APIs)</li> </ul>"},{"location":"tutorial/api1/02-instalacion-configuracion/#configuracion-de-workspace","title":"Configuraci\u00f3n de workspace","text":"<p>Crea <code>.vscode/settings.json</code>:</p> <pre><code>{\n    \"python.defaultInterpreterPath\": \"./.venv/bin/python\",\n    \"python.linting.enabled\": true,\n    \"python.linting.pylintEnabled\": true,\n    \"python.formatting.provider\": \"black\",\n    \"python.sortImports.args\": [\"--profile\", \"black\"],\n    \"editor.formatOnSave\": true\n}\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#solucion-de-problemas-comunes","title":"Soluci\u00f3n de problemas comunes","text":""},{"location":"tutorial/api1/02-instalacion-configuracion/#error-uvicorn-command-not-found","title":"Error: \"uvicorn: command not found\"","text":"<pre><code># Aseg\u00farate de que el entorno virtual est\u00e9 activado\nsource .venv/bin/activate  # macOS/Linux\n.venv\\Scripts\\activate     # Windows\n\n# Reinstalar uvicorn\npip install uvicorn[standard]\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#error-modulenotfounderror","title":"Error: \"ModuleNotFoundError\"","text":"<pre><code># Verificar que est\u00e9s en el directorio correcto\npwd\n\n# Verificar que el entorno virtual est\u00e9 activado\nwhich python  # macOS/Linux\nwhere python  # Windows\n\n# Reinstalar dependencias\npip install -r requirements.txt\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#puerto-en-uso","title":"Puerto en uso","text":"<pre><code># Usar otro puerto\nuvicorn app.main:app --port 8001 --reload\n\n# Encontrar proceso usando el puerto (Linux/macOS)\nlsof -i :8000\n\n# Matar proceso (Linux/macOS)\nkill -9 &lt;PID&gt;\n</code></pre>"},{"location":"tutorial/api1/02-instalacion-configuracion/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<p>Ahora que tienes FastAPI instalado y configurado, en el siguiente tema aprenderemos sobre la estructura del proyecto y c\u00f3mo organizar el c\u00f3digo de manera eficiente.</p> <p>\ud83d\udca1 Tips importantes:</p> <ol> <li>Siempre usa entornos virtuales para evitar conflictos de dependencias</li> <li>Mant\u00e9n actualizado requirements.txt para facilitar la colaboraci\u00f3n</li> <li>Usa variables de entorno para configuraciones sensibles</li> <li>Aprovecha la documentaci\u00f3n autom\u00e1tica en <code>/docs</code> para probar tu API</li> </ol> <p>\ud83d\udd17 Enlaces \u00fatiles: - Documentaci\u00f3n de Uvicorn - Gu\u00eda de entornos virtuales - Variables de entorno con python-dotenv</p>"},{"location":"tutorial/api1/03-estructura-proyecto/","title":"Estructura del Proyecto","text":""},{"location":"tutorial/api1/03-estructura-proyecto/#introduccion","title":"Introducci\u00f3n","text":"<p>Una estructura de proyecto bien organizada es fundamental para el mantenimiento, escalabilidad y colaboraci\u00f3n en el desarrollo. En este tema aprenderemos c\u00f3mo organizar un proyecto FastAPI siguiendo las mejores pr\u00e1cticas.</p>"},{"location":"tutorial/api1/03-estructura-proyecto/#estructura-recomendada","title":"Estructura recomendada","text":"<pre><code>fastapi-inventory/\n\u251c\u2500\u2500 .venv/                    # Entorno virtual (no versionar)\n\u251c\u2500\u2500 app/                      # C\u00f3digo principal de la aplicaci\u00f3n\n\u2502   \u251c\u2500\u2500 __init__.py          # Hace que app sea un paquete Python\n\u2502   \u251c\u2500\u2500 main.py              # Punto de entrada de la aplicaci\u00f3n\n\u2502   \u251c\u2500\u2500 config.py            # Configuraciones globales\n\u2502   \u251c\u2500\u2500 database/            # Configuraci\u00f3n de base de datos\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 base.py          # Clase base para modelos\n\u2502   \u2502   \u251c\u2500\u2500 connection.py    # Configuraci\u00f3n de conexi\u00f3n\n\u2502   \u2502   \u2514\u2500\u2500 database.py      # Funciones de base de datos\n\u2502   \u251c\u2500\u2500 models/              # Modelos SQLAlchemy (ORM)\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 user.py\n\u2502   \u2502   \u251c\u2500\u2500 category.py\n\u2502   \u2502   \u251c\u2500\u2500 item.py\n\u2502   \u2502   \u2514\u2500\u2500 loan.py\n\u2502   \u251c\u2500\u2500 schemas/             # Esquemas Pydantic (validaci\u00f3n)\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 user.py\n\u2502   \u2502   \u251c\u2500\u2500 category.py\n\u2502   \u2502   \u251c\u2500\u2500 item.py\n\u2502   \u2502   \u2514\u2500\u2500 loan.py\n\u2502   \u251c\u2500\u2500 crud/                # Operaciones CRUD\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 users.py\n\u2502   \u2502   \u251c\u2500\u2500 categories.py\n\u2502   \u2502   \u251c\u2500\u2500 items.py\n\u2502   \u2502   \u2514\u2500\u2500 loans.py\n\u2502   \u251c\u2500\u2500 routers/             # Rutas de la API\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 users.py\n\u2502   \u2502   \u251c\u2500\u2500 categories.py\n\u2502   \u2502   \u251c\u2500\u2500 items.py\n\u2502   \u2502   \u2514\u2500\u2500 loans.py\n\u2502   \u2514\u2500\u2500 utils/               # Utilidades y helpers\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 dependencies.py  # Dependencias comunes\n\u2502       \u2514\u2500\u2500 exceptions.py    # Excepciones personalizadas\n\u251c\u2500\u2500 tests/                   # Pruebas unitarias e integraci\u00f3n\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_users.py\n\u2502   \u251c\u2500\u2500 test_items.py\n\u2502   \u2514\u2500\u2500 conftest.py\n\u251c\u2500\u2500 docs/                    # Documentaci\u00f3n adicional\n\u251c\u2500\u2500 .env                     # Variables de entorno (no versionar)\n\u251c\u2500\u2500 .env.example             # Ejemplo de variables de entorno\n\u251c\u2500\u2500 .gitignore              # Archivos a ignorar en Git\n\u251c\u2500\u2500 requirements.txt        # Dependencias de producci\u00f3n\n\u251c\u2500\u2500 requirements-dev.txt    # Dependencias de desarrollo\n\u2514\u2500\u2500 README.md              # Documentaci\u00f3n del proyecto\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#explicacion-de-cada-directorio","title":"Explicaci\u00f3n de cada directorio","text":""},{"location":"tutorial/api1/03-estructura-proyecto/#1-directorio-app","title":"1. Directorio <code>app/</code>","text":"<p>Contiene todo el c\u00f3digo de la aplicaci\u00f3n:</p>"},{"location":"tutorial/api1/03-estructura-proyecto/#mainpy-punto-de-entrada","title":"<code>main.py</code> - Punto de entrada","text":"<pre><code>from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\nfrom app.database.connection import engine\nfrom app.database.base import Base\nfrom app.routers import users, items, categories, loans\nfrom app.config import settings\n\n# Crear tablas en la base de datos\nBase.metadata.create_all(bind=engine)\n\n# Crear instancia de FastAPI\napp = FastAPI(\n    title=\"Inventory API\",\n    description=\"API REST para gesti\u00f3n de inventario\",\n    version=\"1.0.0\",\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\"\n)\n\n# CORS Middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.ALLOWED_ORIGINS,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Incluir routers\napp.include_router(users.router, prefix=\"/api/v1/users\", tags=[\"users\"])\napp.include_router(items.router, prefix=\"/api/v1/items\", tags=[\"items\"])\napp.include_router(categories.router, prefix=\"/api/v1/categories\", tags=[\"categories\"])\napp.include_router(loans.router, prefix=\"/api/v1/loans\", tags=[\"loans\"])\n\n@app.get(\"/\")\ndef read_root():\n    return {\n        \"message\": \"Inventory API\",\n        \"version\": \"1.0.0\",\n        \"docs\": \"/docs\"\n    }\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#configpy-configuraciones","title":"<code>config.py</code> - Configuraciones","text":"<pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass Settings:\n    # Base de datos\n    DATABASE_URL: str = os.getenv(\"DATABASE_URL\", \"sqlite:///./inventory.db\")\n\n    # Configuraci\u00f3n de la aplicaci\u00f3n\n    DEBUG: bool = os.getenv(\"DEBUG\", \"False\").lower() == \"true\"\n    SECRET_KEY: str = os.getenv(\"SECRET_KEY\", \"your-secret-key\")\n\n    # Configuraci\u00f3n de CORS\n    ALLOWED_ORIGINS: list = [\n        \"http://localhost:3000\",\n        \"http://localhost:8080\",\n    ]\n\n    # Configuraci\u00f3n de paginaci\u00f3n\n    DEFAULT_PAGE_SIZE: int = 20\n    MAX_PAGE_SIZE: int = 100\n\nsettings = Settings()\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#2-directorio-database","title":"2. Directorio <code>database/</code>","text":"<p>Maneja toda la configuraci\u00f3n de la base de datos:</p>"},{"location":"tutorial/api1/03-estructura-proyecto/#basepy-modelo-base","title":"<code>base.py</code> - Modelo base","text":"<pre><code>from sqlalchemy import Column, Integer, DateTime\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom datetime import datetime\n\nBase = declarative_base()\n\nclass BaseModel(Base):\n    \"\"\"Clase base para todos los modelos\"\"\"\n    __abstract__ = True\n\n    id = Column(Integer, primary_key=True, index=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#connectionpy-configuracion-de-conexion","title":"<code>connection.py</code> - Configuraci\u00f3n de conexi\u00f3n","text":"<pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom app.config import settings\n\n# Crear engine de SQLAlchemy\nengine = create_engine(\n    settings.DATABASE_URL,\n    connect_args={\"check_same_thread\": False}  # Solo para SQLite\n)\n\n# Crear SessionLocal\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#databasepy-funciones-de-base-de-datos","title":"<code>database.py</code> - Funciones de base de datos","text":"<pre><code>from app.database.connection import SessionLocal\n\ndef get_db():\n    \"\"\"Dependencia para obtener sesi\u00f3n de base de datos\"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#3-directorio-models","title":"3. Directorio <code>models/</code>","text":"<p>Contiene los modelos SQLAlchemy (representaci\u00f3n de tablas):</p> <pre><code># models/user.py\nfrom sqlalchemy import Column, String, Boolean\nfrom sqlalchemy.orm import relationship\nfrom app.database.base import BaseModel\n\nclass User(BaseModel):\n    __tablename__ = \"users\"\n\n    username = Column(String(50), unique=True, index=True, nullable=False)\n    email = Column(String(255), unique=True, index=True, nullable=False)\n    full_name = Column(String(100), nullable=True)\n    is_active = Column(Boolean, default=True, nullable=False)\n\n    # Relaciones\n    loans = relationship(\"Loan\", back_populates=\"user\")\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#4-directorio-schemas","title":"4. Directorio <code>schemas/</code>","text":"<p>Contiene los esquemas Pydantic (validaci\u00f3n y serializaci\u00f3n):</p> <pre><code># schemas/user.py\nfrom pydantic import BaseModel, EmailStr\nfrom typing import Optional\nfrom datetime import datetime\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Optional[str] = None\n    is_active: bool = True\n\nclass UserCreate(UserBase):\n    pass\n\nclass UserUpdate(BaseModel):\n    username: Optional[str] = None\n    email: Optional[EmailStr] = None\n    full_name: Optional[str] = None\n    is_active: Optional[bool] = None\n\nclass UserResponse(UserBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#5-directorio-crud","title":"5. Directorio <code>crud/</code>","text":"<p>Contiene las operaciones CRUD (Create, Read, Update, Delete):</p> <pre><code># crud/users.py\nfrom sqlalchemy.orm import Session\nfrom app.models.user import User\nfrom app.schemas.user import UserCreate, UserUpdate\n\ndef get_user(db: Session, user_id: int):\n    return db.query(User).filter(User.id == user_id).first()\n\ndef get_users(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(User).offset(skip).limit(limit).all()\n\ndef create_user(db: Session, user: UserCreate):\n    db_user = User(**user.dict())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#6-directorio-routers","title":"6. Directorio <code>routers/</code>","text":"<p>Contiene las rutas de la API:</p> <pre><code># routers/users.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom typing import List\n\nfrom app.crud import users as crud_users\nfrom app.schemas import user as user_schemas\nfrom app.database.database import get_db\n\nrouter = APIRouter()\n\n@router.post(\"/\", response_model=user_schemas.UserResponse, status_code=201)\ndef create_user(user: user_schemas.UserCreate, db: Session = Depends(get_db)):\n    return crud_users.create_user(db=db, user=user)\n\n@router.get(\"/\", response_model=List[user_schemas.UserResponse])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    return crud_users.get_users(db, skip=skip, limit=limit)\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#7-directorio-utils","title":"7. Directorio <code>utils/</code>","text":"<p>Contiene utilidades y helpers:</p> <pre><code># utils/dependencies.py\nfrom fastapi import Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom app.database.database import get_db\n\ndef get_database_session() -&gt; Session:\n    \"\"\"Dependencia para obtener sesi\u00f3n de base de datos\"\"\"\n    return Depends(get_db)\n</code></pre> <pre><code># utils/exceptions.py\nfrom fastapi import HTTPException, status\n\nclass InventoryException(HTTPException):\n    \"\"\"Excepci\u00f3n base para el sistema de inventario\"\"\"\n    def __init__(self, status_code: int, detail: str):\n        super().__init__(status_code, detail)\n\nclass UserNotFoundException(InventoryException):\n    def __init__(self):\n        super().__init__(status.HTTP_404_NOT_FOUND, \"Usuario no encontrado\")\n\nclass ItemNotFoundException(InventoryException):\n    def __init__(self):\n        super().__init__(status.HTTP_404_NOT_FOUND, \"Art\u00edculo no encontrado\")\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#archivos-de-configuracion-importantes","title":"Archivos de configuraci\u00f3n importantes","text":""},{"location":"tutorial/api1/03-estructura-proyecto/#env-variables-de-entorno","title":"<code>.env</code> - Variables de entorno","text":"<pre><code># Base de datos\nDATABASE_URL=sqlite:///./inventory.db\n\n# Configuraci\u00f3n de la aplicaci\u00f3n\nDEBUG=True\nSECRET_KEY=your-super-secret-key-here\n\n# Configuraci\u00f3n de CORS\nALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#gitignore-archivos-a-ignorar","title":"<code>.gitignore</code> - Archivos a ignorar","text":"<pre><code># Entorno virtual\n.venv/\nvenv/\nenv/\n\n# Variables de entorno\n.env\n\n# Base de datos\n*.db\n*.sqlite\n*.sqlite3\n\n# Python\n__pycache__/\n*.py[cod]\n*.pyo\n*.pyd\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n*~\n\n# Logs\n*.log\nlogs/\n\n# OS\n.DS_Store\nThumbs.db\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#principios-de-organizacion","title":"Principios de organizaci\u00f3n","text":""},{"location":"tutorial/api1/03-estructura-proyecto/#1-separacion-de-responsabilidades","title":"1. Separaci\u00f3n de responsabilidades","text":"<ul> <li>Models: Representan la estructura de datos</li> <li>Schemas: Validan entrada y salida</li> <li>CRUD: Operaciones de base de datos</li> <li>Routers: L\u00f3gica de endpoints</li> <li>Utils: Funciones auxiliares</li> </ul>"},{"location":"tutorial/api1/03-estructura-proyecto/#2-importaciones-claras","title":"2. Importaciones claras","text":"<pre><code># \u2705 Bueno: importaciones espec\u00edficas\nfrom app.models.user import User\nfrom app.schemas.user import UserCreate, UserResponse\nfrom app.crud.users import create_user, get_user\n\n# \u274c Malo: importaciones gen\u00e9ricas\nfrom app.models import *\nfrom app.schemas import *\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#3-nomenclatura-consistente","title":"3. Nomenclatura consistente","text":"<ul> <li>Archivos: snake_case (user.py, item_category.py)</li> <li>Clases: PascalCase (User, ItemCategory)</li> <li>Funciones: snake_case (get_user, create_item)</li> <li>Variables: snake_case (user_id, item_name)</li> </ul>"},{"location":"tutorial/api1/03-estructura-proyecto/#4-documentacion-en-codigo","title":"4. Documentaci\u00f3n en c\u00f3digo","text":"<pre><code>def create_user(db: Session, user: UserCreate) -&gt; User:\n    \"\"\"\n    Crear un nuevo usuario en la base de datos.\n\n    Args:\n        db: Sesi\u00f3n de base de datos\n        user: Datos del usuario a crear\n\n    Returns:\n        Usuario creado con ID asignado\n\n    Raises:\n        ValueError: Si el email ya existe\n    \"\"\"\n    # Implementaci\u00f3n...\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#ventajas-de-esta-estructura","title":"Ventajas de esta estructura","text":""},{"location":"tutorial/api1/03-estructura-proyecto/#1-mantenibilidad","title":"1. Mantenibilidad","text":"<ul> <li>C\u00f3digo organizado y f\u00e1cil de encontrar</li> <li>Cambios localizados en m\u00f3dulos espec\u00edficos</li> <li>F\u00e1cil de entender para nuevos desarrolladores</li> </ul>"},{"location":"tutorial/api1/03-estructura-proyecto/#2-escalabilidad","title":"2. Escalabilidad","text":"<ul> <li>F\u00e1cil agregar nuevos modelos y endpoints</li> <li>Estructura modular permite crecimiento</li> <li>Separaci\u00f3n clara de responsabilidades</li> </ul>"},{"location":"tutorial/api1/03-estructura-proyecto/#3-testabilidad","title":"3. Testabilidad","text":"<ul> <li>Cada m\u00f3dulo se puede testear independientemente</li> <li>Mocking m\u00e1s f\u00e1cil con dependencias claras</li> <li>Pruebas unitarias e integraci\u00f3n separadas</li> </ul>"},{"location":"tutorial/api1/03-estructura-proyecto/#4-reutilizacion","title":"4. Reutilizaci\u00f3n","text":"<ul> <li>Funciones CRUD reutilizables</li> <li>Esquemas compartidos entre endpoints</li> <li>Utilidades comunes centralizadas</li> </ul>"},{"location":"tutorial/api1/03-estructura-proyecto/#comandos-para-crear-la-estructura","title":"Comandos para crear la estructura","text":"<pre><code># Crear directorios\nmkdir -p app/{database,models,schemas,crud,routers,utils}\nmkdir tests docs\n\n# Crear archivos __init__.py\ntouch app/__init__.py\ntouch app/database/__init__.py\ntouch app/models/__init__.py\ntouch app/schemas/__init__.py\ntouch app/crud/__init__.py\ntouch app/routers/__init__.py\ntouch app/utils/__init__.py\ntouch tests/__init__.py\n\n# Crear archivos principales\ntouch app/main.py\ntouch app/config.py\ntouch .env\ntouch .gitignore\ntouch requirements.txt\ntouch README.md\n</code></pre>"},{"location":"tutorial/api1/03-estructura-proyecto/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<p>En el siguiente tema aprenderemos sobre la configuraci\u00f3n de la base de datos y SQLAlchemy, donde implementaremos los modelos que representar\u00e1n nuestras tablas.</p> <p>\ud83d\udca1 Tips importantes:</p> <ol> <li>Mant\u00e9n la estructura consistente - facilita la navegaci\u00f3n y mantenimiento</li> <li>Usa nombres descriptivos - el c\u00f3digo debe ser auto-documentado</li> <li>Separa responsabilidades - cada archivo debe tener un prop\u00f3sito claro</li> <li>Documenta tu c\u00f3digo - especialmente funciones p\u00fablicas y complejas</li> </ol> <p>\ud83d\udd17 Enlaces \u00fatiles: - Gu\u00eda de estructura de proyectos Python - FastAPI Project Structure - PEP 8 - Style Guide for Python Code</p>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/","title":"Base de Datos y SQLAlchemy","text":""},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#introduccion","title":"Introducci\u00f3n","text":"<p>SQLAlchemy es el ORM (Object-Relational Mapping) m\u00e1s popular de Python. Nos permite trabajar con bases de datos usando objetos Python en lugar de escribir SQL directamente. En este tema aprenderemos a configurar SQLAlchemy con FastAPI.</p>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#que-es-un-orm","title":"\u00bfQu\u00e9 es un ORM?","text":"<p>Un ORM es una t\u00e9cnica que permite mapear objetos de programaci\u00f3n a tablas de base de datos:</p> <pre><code># Sin ORM (SQL directo)\nresult = cursor.execute(\"SELECT * FROM users WHERE id = ?\", (user_id,))\nuser_data = result.fetchone()\n\n# Con ORM (SQLAlchemy)\nuser = db.query(User).filter(User.id == user_id).first()\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#ventajas-del-orm","title":"Ventajas del ORM","text":"<ul> <li>Abstracci\u00f3n: No necesitas escribir SQL</li> <li>Portabilidad: Funciona con diferentes bases de datos</li> <li>Seguridad: Previene inyecci\u00f3n SQL autom\u00e1ticamente</li> <li>Productividad: Menos c\u00f3digo, m\u00e1s funcionalidad</li> <li>Mantenimiento: Cambios de esquema m\u00e1s f\u00e1ciles</li> </ul>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#instalacion-de-dependencias","title":"Instalaci\u00f3n de dependencias","text":"<pre><code>pip install sqlalchemy\npip install databases[sqlite]  # Para SQLite\npip install psycopg2-binary    # Para PostgreSQL\npip install pymysql            # Para MySQL\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#configuracion-de-la-base-de-datos","title":"Configuraci\u00f3n de la base de datos","text":""},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#1-archivo-de-configuracion-appconfigpy","title":"1. Archivo de configuraci\u00f3n (<code>app/config.py</code>)","text":"<pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclass Settings:\n    # Configuraci\u00f3n de base de datos\n    DATABASE_URL: str = os.getenv(\n        \"DATABASE_URL\", \n        \"sqlite:///./inventory.db\"\n    )\n\n    # Para PostgreSQL en producci\u00f3n\n    # DATABASE_URL: str = os.getenv(\n    #     \"DATABASE_URL\", \n    #     \"postgresql://user:password@localhost/inventory\"\n    # )\n\n    # Configuraci\u00f3n SQLAlchemy\n    SQLALCHEMY_ECHO: bool = os.getenv(\"DEBUG\", \"False\").lower() == \"true\"\n\nsettings = Settings()\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#2-configuracion-de-conexion-appdatabaseconnectionpy","title":"2. Configuraci\u00f3n de conexi\u00f3n (<code>app/database/connection.py</code>)","text":"<pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom app.config import settings\n\n# Crear engine de SQLAlchemy\nengine = create_engine(\n    settings.DATABASE_URL,\n    # Configuraciones espec\u00edficas para SQLite\n    connect_args={\"check_same_thread\": False} if \"sqlite\" in settings.DATABASE_URL else {},\n    # Mostrar SQL en consola (\u00fatil para desarrollo)\n    echo=settings.SQLALCHEMY_ECHO\n)\n\n# Crear SessionLocal para manejar sesiones de base de datos\nSessionLocal = sessionmaker(\n    autocommit=False,  # No hacer commit autom\u00e1tico\n    autoflush=False,   # No hacer flush autom\u00e1tico\n    bind=engine        # Vincular al engine\n)\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#3-funciones-de-base-de-datos-appdatabasedatabasepy","title":"3. Funciones de base de datos (<code>app/database/database.py</code>)","text":"<pre><code>from sqlalchemy.orm import Session\nfrom app.database.connection import SessionLocal\n\ndef get_db() -&gt; Session:\n    \"\"\"\n    Dependencia para obtener una sesi\u00f3n de base de datos.\n\n    Esta funci\u00f3n se usa como dependencia en FastAPI para inyectar\n    una sesi\u00f3n de base de datos en los endpoints.\n\n    Yields:\n        Session: Sesi\u00f3n de SQLAlchemy\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\ndef create_tables():\n    \"\"\"\n    Crear todas las tablas en la base de datos.\n\n    Esta funci\u00f3n debe llamarse al iniciar la aplicaci\u00f3n\n    para asegurar que todas las tablas existan.\n    \"\"\"\n    from app.database.base import Base\n    Base.metadata.create_all(bind=engine)\n\ndef drop_tables():\n    \"\"\"\n    Eliminar todas las tablas de la base de datos.\n\n    \u26a0\ufe0f CUIDADO: Esta funci\u00f3n elimina todos los datos.\n    Solo usar en desarrollo o testing.\n    \"\"\"\n    from app.database.base import Base\n    Base.metadata.drop_all(bind=engine)\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#modelo-base","title":"Modelo base","text":""},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#creando-la-clase-base-appdatabasebasepy","title":"Creando la clase base (<code>app/database/base.py</code>)","text":"<pre><code>from sqlalchemy import Column, Integer, DateTime\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom datetime import datetime\n\n# Crear la clase base para todos los modelos\nBase = declarative_base()\n\nclass BaseModel(Base):\n    \"\"\"\n    Clase base para todos los modelos de la aplicaci\u00f3n.\n\n    Proporciona campos comunes que todos los modelos necesitan:\n    - id: Clave primaria\n    - created_at: Fecha de creaci\u00f3n\n    - updated_at: Fecha de \u00faltima actualizaci\u00f3n\n    \"\"\"\n    __abstract__ = True  # No crear tabla para esta clase\n\n    # Clave primaria auto-incremental\n    id = Column(\n        Integer, \n        primary_key=True, \n        index=True,\n        comment=\"Identificador \u00fanico del registro\"\n    )\n\n    # Timestamp de creaci\u00f3n\n    created_at = Column(\n        DateTime, \n        default=datetime.utcnow,\n        nullable=False,\n        comment=\"Fecha y hora de creaci\u00f3n del registro\"\n    )\n\n    # Timestamp de \u00faltima actualizaci\u00f3n\n    updated_at = Column(\n        DateTime, \n        default=datetime.utcnow, \n        onupdate=datetime.utcnow,\n        nullable=False,\n        comment=\"Fecha y hora de \u00faltima actualizaci\u00f3n\"\n    )\n\n    def __repr__(self):\n        \"\"\"\n        Representaci\u00f3n string del objeto para debugging.\n        \"\"\"\n        return f\"&lt;{self.__class__.__name__}(id={self.id})&gt;\"\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#creando-modelos","title":"Creando modelos","text":""},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#1-modelo-de-usuario-appmodelsuserpy","title":"1. Modelo de Usuario (<code>app/models/user.py</code>)","text":"<pre><code>from sqlalchemy import Column, String, Boolean, Text\nfrom sqlalchemy.orm import relationship\nfrom app.database.base import BaseModel\n\nclass User(BaseModel):\n    \"\"\"\n    Modelo para representar usuarios del sistema.\n\n    Attributes:\n        username: Nombre de usuario \u00fanico\n        email: Correo electr\u00f3nico \u00fanico\n        full_name: Nombre completo del usuario\n        is_active: Si el usuario est\u00e1 activo\n        loans: Relaci\u00f3n con pr\u00e9stamos del usuario\n    \"\"\"\n    __tablename__ = \"users\"\n\n    # Campos del usuario\n    username = Column(\n        String(50), \n        unique=True, \n        index=True, \n        nullable=False,\n        comment=\"Nombre de usuario \u00fanico\"\n    )\n\n    email = Column(\n        String(255), \n        unique=True, \n        index=True, \n        nullable=False,\n        comment=\"Correo electr\u00f3nico del usuario\"\n    )\n\n    full_name = Column(\n        String(100), \n        nullable=True,\n        comment=\"Nombre completo del usuario\"\n    )\n\n    is_active = Column(\n        Boolean, \n        default=True, \n        nullable=False,\n        comment=\"Indica si el usuario est\u00e1 activo\"\n    )\n\n    # Relaciones\n    loans = relationship(\n        \"Loan\", \n        back_populates=\"user\",\n        cascade=\"all, delete-orphan\",\n        lazy=\"dynamic\"  # Carga bajo demanda\n    )\n\n    def __str__(self):\n        return f\"{self.username} ({self.email})\"\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#2-modelo-de-categoria-appmodelscategorypy","title":"2. Modelo de Categor\u00eda (<code>app/models/category.py</code>)","text":"<pre><code>from sqlalchemy import Column, String, Text\nfrom sqlalchemy.orm import relationship\nfrom app.database.base import BaseModel\n\nclass Category(BaseModel):\n    \"\"\"\n    Modelo para representar categor\u00edas de art\u00edculos.\n\n    Attributes:\n        name: Nombre de la categor\u00eda\n        description: Descripci\u00f3n de la categor\u00eda\n        items: Relaci\u00f3n con art\u00edculos de esta categor\u00eda\n    \"\"\"\n    __tablename__ = \"categories\"\n\n    # Campos de la categor\u00eda\n    name = Column(\n        String(100), \n        unique=True, \n        index=True, \n        nullable=False,\n        comment=\"Nombre \u00fanico de la categor\u00eda\"\n    )\n\n    description = Column(\n        Text, \n        nullable=True,\n        comment=\"Descripci\u00f3n detallada de la categor\u00eda\"\n    )\n\n    # Relaciones\n    items = relationship(\n        \"Item\", \n        back_populates=\"category\",\n        cascade=\"all, delete-orphan\",\n        lazy=\"dynamic\"\n    )\n\n    def __str__(self):\n        return self.name\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#3-modelo-de-articulo-appmodelsitempy","title":"3. Modelo de Art\u00edculo (<code>app/models/item.py</code>)","text":"<pre><code>from sqlalchemy import Column, String, Text, Integer, ForeignKey, Enum as SQLEnum\nfrom sqlalchemy.orm import relationship\nfrom enum import Enum\nfrom app.database.base import BaseModel\n\nclass ItemStatus(str, Enum):\n    \"\"\"\n    Estados posibles de un art\u00edculo.\n    \"\"\"\n    AVAILABLE = \"available\"      # Disponible\n    LOANED = \"loaned\"           # Prestado\n    MAINTENANCE = \"maintenance\" # En mantenimiento\n    RETIRED = \"retired\"         # Retirado\n\nclass Item(BaseModel):\n    \"\"\"\n    Modelo para representar art\u00edculos del inventario.\n\n    Attributes:\n        name: Nombre del art\u00edculo\n        description: Descripci\u00f3n del art\u00edculo\n        serial_number: N\u00famero de serie \u00fanico\n        status: Estado actual del art\u00edculo\n        category_id: ID de la categor\u00eda\n        category: Relaci\u00f3n con la categor\u00eda\n        loans: Relaci\u00f3n con pr\u00e9stamos del art\u00edculo\n    \"\"\"\n    __tablename__ = \"items\"\n\n    # Campos del art\u00edculo\n    name = Column(\n        String(200), \n        nullable=False, \n        index=True,\n        comment=\"Nombre del art\u00edculo\"\n    )\n\n    description = Column(\n        Text, \n        nullable=True,\n        comment=\"Descripci\u00f3n detallada del art\u00edculo\"\n    )\n\n    serial_number = Column(\n        String(100), \n        unique=True, \n        index=True, \n        nullable=False,\n        comment=\"N\u00famero de serie \u00fanico del art\u00edculo\"\n    )\n\n    status = Column(\n        SQLEnum(ItemStatus), \n        default=ItemStatus.AVAILABLE, \n        nullable=False,\n        comment=\"Estado actual del art\u00edculo\"\n    )\n\n    # Clave for\u00e1nea a categor\u00eda\n    category_id = Column(\n        Integer, \n        ForeignKey(\"categories.id\"), \n        nullable=False,\n        comment=\"ID de la categor\u00eda del art\u00edculo\"\n    )\n\n    # Relaciones\n    category = relationship(\n        \"Category\", \n        back_populates=\"items\"\n    )\n\n    loans = relationship(\n        \"Loan\", \n        back_populates=\"item\",\n        cascade=\"all, delete-orphan\",\n        lazy=\"dynamic\"\n    )\n\n    def __str__(self):\n        return f\"{self.name} ({self.serial_number})\"\n\n    @property\n    def is_available(self) -&gt; bool:\n        \"\"\"Verifica si el art\u00edculo est\u00e1 disponible para pr\u00e9stamo.\"\"\"\n        return self.status == ItemStatus.AVAILABLE\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#4-modelo-de-prestamo-appmodelsloanpy","title":"4. Modelo de Pr\u00e9stamo (<code>app/models/loan.py</code>)","text":"<pre><code>from sqlalchemy import Column, Integer, ForeignKey, DateTime, Text, Enum as SQLEnum\nfrom sqlalchemy.orm import relationship\nfrom datetime import datetime, timedelta\nfrom enum import Enum\nfrom app.database.base import BaseModel\n\nclass LoanStatus(str, Enum):\n    \"\"\"\n    Estados posibles de un pr\u00e9stamo.\n    \"\"\"\n    ACTIVE = \"active\"       # Pr\u00e9stamo activo\n    RETURNED = \"returned\"   # Devuelto\n    OVERDUE = \"overdue\"     # Vencido\n    CANCELLED = \"cancelled\" # Cancelado\n\nclass Loan(BaseModel):\n    \"\"\"\n    Modelo para representar pr\u00e9stamos de art\u00edculos.\n\n    Attributes:\n        loan_date: Fecha del pr\u00e9stamo\n        due_date: Fecha de vencimiento\n        return_date: Fecha de devoluci\u00f3n (si aplica)\n        status: Estado del pr\u00e9stamo\n        notes: Notas adicionales\n        user_id: ID del usuario que solicita\n        item_id: ID del art\u00edculo prestado\n        user: Relaci\u00f3n con el usuario\n        item: Relaci\u00f3n con el art\u00edculo\n    \"\"\"\n    __tablename__ = \"loans\"\n\n    # Fechas del pr\u00e9stamo\n    loan_date = Column(\n        DateTime, \n        default=datetime.utcnow, \n        nullable=False,\n        comment=\"Fecha y hora del pr\u00e9stamo\"\n    )\n\n    due_date = Column(\n        DateTime, \n        nullable=False,\n        comment=\"Fecha y hora de vencimiento\"\n    )\n\n    return_date = Column(\n        DateTime, \n        nullable=True,\n        comment=\"Fecha y hora de devoluci\u00f3n\"\n    )\n\n    # Estado y notas\n    status = Column(\n        SQLEnum(LoanStatus), \n        default=LoanStatus.ACTIVE, \n        nullable=False,\n        comment=\"Estado actual del pr\u00e9stamo\"\n    )\n\n    notes = Column(\n        Text, \n        nullable=True,\n        comment=\"Notas adicionales sobre el pr\u00e9stamo\"\n    )\n\n    # Claves for\u00e1neas\n    user_id = Column(\n        Integer, \n        ForeignKey(\"users.id\"), \n        nullable=False,\n        comment=\"ID del usuario que solicita el pr\u00e9stamo\"\n    )\n\n    item_id = Column(\n        Integer, \n        ForeignKey(\"items.id\"), \n        nullable=False,\n        comment=\"ID del art\u00edculo prestado\"\n    )\n\n    # Relaciones\n    user = relationship(\n        \"User\", \n        back_populates=\"loans\"\n    )\n\n    item = relationship(\n        \"Item\", \n        back_populates=\"loans\"\n    )\n\n    def __str__(self):\n        return f\"Pr\u00e9stamo {self.id}: {self.item.name} a {self.user.username}\"\n\n    @property\n    def is_overdue(self) -&gt; bool:\n        \"\"\"Verifica si el pr\u00e9stamo est\u00e1 vencido.\"\"\"\n        if self.status != LoanStatus.ACTIVE:\n            return False\n        return datetime.utcnow() &gt; self.due_date\n\n    @property\n    def days_until_due(self) -&gt; int:\n        \"\"\"Calcula d\u00edas hasta el vencimiento.\"\"\"\n        if self.status != LoanStatus.ACTIVE:\n            return 0\n        delta = self.due_date - datetime.utcnow()\n        return delta.days\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#inicializacion-en-mainpy","title":"Inicializaci\u00f3n en main.py","text":"<pre><code># app/main.py\nfrom fastapi import FastAPI\nfrom app.database.connection import engine\nfrom app.database.base import Base\n\n# Importar todos los modelos para que SQLAlchemy los registre\nfrom app.models import user, category, item, loan\n\n# Crear todas las tablas\nBase.metadata.create_all(bind=engine)\n\napp = FastAPI(title=\"Inventory API\")\n\n# ... resto de la configuraci\u00f3n\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#conceptos-importantes-de-sqlalchemy","title":"Conceptos importantes de SQLAlchemy","text":""},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#1-relaciones","title":"1. Relaciones","text":""},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#one-to-many-uno-a-muchos","title":"One-to-Many (Uno a Muchos)","text":"<pre><code># Una categor\u00eda tiene muchos art\u00edculos\nclass Category(BaseModel):\n    items = relationship(\"Item\", back_populates=\"category\")\n\nclass Item(BaseModel):\n    category_id = Column(Integer, ForeignKey(\"categories.id\"))\n    category = relationship(\"Category\", back_populates=\"items\")\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#many-to-one-muchos-a-uno","title":"Many-to-One (Muchos a Uno)","text":"<pre><code># Muchos pr\u00e9stamos pertenecen a un usuario\nclass Loan(BaseModel):\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    user = relationship(\"User\", back_populates=\"loans\")\n\nclass User(BaseModel):\n    loans = relationship(\"Loan\", back_populates=\"user\")\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#2-lazy-loading","title":"2. Lazy Loading","text":"<pre><code># Diferentes estrategias de carga\nloans = relationship(\"Loan\", lazy=\"select\")     # Carga cuando se accede\nloans = relationship(\"Loan\", lazy=\"joined\")     # Carga con JOIN\nloans = relationship(\"Loan\", lazy=\"dynamic\")    # Retorna query object\nloans = relationship(\"Loan\", lazy=\"subquery\")   # Carga con subquery\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#3-cascade","title":"3. Cascade","text":"<pre><code># Operaciones en cascada\nloans = relationship(\n    \"Loan\", \n    cascade=\"all, delete-orphan\"  # Elimina pr\u00e9stamos si se elimina usuario\n)\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#4-indices","title":"4. \u00cdndices","text":"<pre><code># Crear \u00edndices para mejorar rendimiento\nemail = Column(String(255), index=True)  # \u00cdndice simple\nusername = Column(String(50), unique=True, index=True)  # \u00cdndice \u00fanico\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#comandos-utiles-para-desarrollo","title":"Comandos \u00fatiles para desarrollo","text":""},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#crear-tablas-manualmente","title":"Crear tablas manualmente","text":"<pre><code># En Python shell\nfrom app.database.connection import engine\nfrom app.database.base import Base\nfrom app.models import user, category, item, loan\n\n# Crear todas las tablas\nBase.metadata.create_all(bind=engine)\n\n# Eliminar todas las tablas (\u00a1CUIDADO!)\nBase.metadata.drop_all(bind=engine)\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#inspeccionar-base-de-datos","title":"Inspeccionar base de datos","text":"<pre><code># Ver tablas creadas\nfrom sqlalchemy import inspect\nfrom app.database.connection import engine\n\ninspector = inspect(engine)\nprint(inspector.get_table_names())\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#mejores-practicas","title":"Mejores pr\u00e1cticas","text":""},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#1-nomenclatura","title":"1. Nomenclatura","text":"<ul> <li>Tablas: snake_case plural (users, loan_items)</li> <li>Columnas: snake_case (user_id, created_at)</li> <li>Modelos: PascalCase singular (User, LoanItem)</li> </ul>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#2-validaciones","title":"2. Validaciones","text":"<pre><code>from sqlalchemy import CheckConstraint\n\nclass Item(BaseModel):\n    price = Column(Numeric(10, 2), CheckConstraint('price &gt; 0'))\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#3-comentarios","title":"3. Comentarios","text":"<pre><code>username = Column(\n    String(50), \n    comment=\"Nombre de usuario \u00fanico del sistema\"\n)\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#4-valores-por-defecto","title":"4. Valores por defecto","text":"<pre><code>is_active = Column(Boolean, default=True)\ncreated_at = Column(DateTime, default=datetime.utcnow)\n</code></pre>"},{"location":"tutorial/api1/04-base-datos-sqlalchemy/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<p>En el siguiente tema aprenderemos sobre esquemas Pydantic, que nos permitir\u00e1n validar y serializar los datos que entran y salen de nuestra API.</p> <p>\ud83d\udca1 Tips importantes:</p> <ol> <li>Siempre usa migraciones en producci\u00f3n (Alembic)</li> <li>\u00cdndices en columnas frecuentemente consultadas mejoran el rendimiento</li> <li>Relaciones lazy='dynamic' para colecciones grandes</li> <li>Usa enums para campos con valores limitados</li> <li>Comentarios en columnas facilitan el mantenimiento</li> </ol> <p>\ud83d\udd17 Enlaces \u00fatiles: - SQLAlchemy Documentation - SQLAlchemy ORM Tutorial - FastAPI with SQLAlchemy</p>"},{"location":"tutorial/api1/05-esquemas-pydantic/","title":"Esquemas Pydantic","text":""},{"location":"tutorial/api1/05-esquemas-pydantic/#introduccion","title":"Introducci\u00f3n","text":"<p>Pydantic es una librer\u00eda de validaci\u00f3n de datos que utiliza type hints de Python. En FastAPI, Pydantic se usa para:</p> <ul> <li>Validar datos de entrada (request body, query parameters)</li> <li>Serializar datos de salida (response models)</li> <li>Documentar autom\u00e1ticamente la API (OpenAPI/Swagger)</li> <li>Convertir tipos de datos autom\u00e1ticamente</li> </ul>"},{"location":"tutorial/api1/05-esquemas-pydantic/#por-que-usar-esquemas","title":"\u00bfPor qu\u00e9 usar esquemas?","text":""},{"location":"tutorial/api1/05-esquemas-pydantic/#sin-esquemas-problematico","title":"Sin esquemas (problem\u00e1tico)","text":"<pre><code>@app.post(\"/users/\")\ndef create_user(user_data: dict):\n    # \u00bfQu\u00e9 campos tiene user_data?\n    # \u00bfSon v\u00e1lidos los datos?\n    # \u00bfQu\u00e9 tipo de datos esperamos?\n    return {\"message\": \"Usuario creado\"}\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#con-esquemas-recomendado","title":"Con esquemas (recomendado)","text":"<pre><code>@app.post(\"/users/\", response_model=UserResponse)\ndef create_user(user: UserCreate):\n    # Datos validados autom\u00e1ticamente\n    # Tipos garantizados\n    # Documentaci\u00f3n autom\u00e1tica\n    return created_user\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#instalacion","title":"Instalaci\u00f3n","text":"<pre><code>pip install pydantic[email]  # Incluye validaci\u00f3n de email\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#conceptos-basicos-de-pydantic","title":"Conceptos b\u00e1sicos de Pydantic","text":""},{"location":"tutorial/api1/05-esquemas-pydantic/#1-modelo-basico","title":"1. Modelo b\u00e1sico","text":"<pre><code>from pydantic import BaseModel\nfrom typing import Optional\nfrom datetime import datetime\n\nclass User(BaseModel):\n    name: str\n    email: str\n    age: Optional[int] = None\n    is_active: bool = True\n    created_at: datetime = datetime.now()\n\n# Uso\nuser_data = {\n    \"name\": \"Juan P\u00e9rez\",\n    \"email\": \"juan@example.com\",\n    \"age\": 25\n}\n\nuser = User(**user_data)\nprint(user.name)  # Juan P\u00e9rez\nprint(user.dict())  # Convierte a diccionario\nprint(user.json())  # Convierte a JSON\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#2-validacion-automatica","title":"2. Validaci\u00f3n autom\u00e1tica","text":"<pre><code>from pydantic import BaseModel, validator, EmailStr\n\nclass User(BaseModel):\n    name: str\n    email: EmailStr  # Valida formato de email\n    age: int\n\n    @validator('age')\n    def validate_age(cls, v):\n        if v &lt; 0 or v &gt; 120:\n            raise ValueError('La edad debe estar entre 0 y 120')\n        return v\n\n    @validator('name')\n    def validate_name(cls, v):\n        if len(v.strip()) &lt; 2:\n            raise ValueError('El nombre debe tener al menos 2 caracteres')\n        return v.strip().title()\n\n# Esto lanzar\u00e1 una excepci\u00f3n\ntry:\n    user = User(name=\"A\", email=\"invalid-email\", age=-5)\nexcept ValueError as e:\n    print(e)\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#esquemas-para-el-proyecto-de-inventario","title":"Esquemas para el proyecto de inventario","text":""},{"location":"tutorial/api1/05-esquemas-pydantic/#1-esquemas-base","title":"1. Esquemas base","text":"<pre><code># app/schemas/base.py\nfrom pydantic import BaseModel\nfrom datetime import datetime\nfrom typing import Optional\n\nclass BaseSchema(BaseModel):\n    \"\"\"\n    Esquema base con configuraci\u00f3n com\u00fan.\n    \"\"\"\n    class Config:\n        # Permite crear instancias desde objetos SQLAlchemy\n        from_attributes = True\n        # Valida asignaciones\n        validate_assignment = True\n        # Usa enums por valor\n        use_enum_values = True\n\nclass TimestampSchema(BaseSchema):\n    \"\"\"\n    Esquema base con timestamps.\n    \"\"\"\n    id: int\n    created_at: datetime\n    updated_at: datetime\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#2-esquemas-de-usuario-appschemasuserpy","title":"2. Esquemas de Usuario (<code>app/schemas/user.py</code>)","text":"<pre><code>from pydantic import BaseModel, EmailStr, validator\nfrom typing import Optional, List\nfrom datetime import datetime\nfrom app.schemas.base import BaseSchema, TimestampSchema\n\nclass UserBase(BaseSchema):\n    \"\"\"\n    Campos base compartidos entre esquemas de usuario.\n    \"\"\"\n    username: str\n    email: EmailStr\n    full_name: Optional[str] = None\n    is_active: bool = True\n\n    @validator('username')\n    def validate_username(cls, v):\n        if len(v) &lt; 3:\n            raise ValueError('El nombre de usuario debe tener al menos 3 caracteres')\n        if len(v) &gt; 50:\n            raise ValueError('El nombre de usuario no puede exceder 50 caracteres')\n        if not v.isalnum():\n            raise ValueError('El nombre de usuario solo puede contener letras y n\u00fameros')\n        return v.lower()\n\n    @validator('full_name')\n    def validate_full_name(cls, v):\n        if v is not None:\n            v = v.strip()\n            if len(v) &lt; 2:\n                raise ValueError('El nombre completo debe tener al menos 2 caracteres')\n            if len(v) &gt; 100:\n                raise ValueError('El nombre completo no puede exceder 100 caracteres')\n            return v.title()\n        return v\n\nclass UserCreate(UserBase):\n    \"\"\"\n    Esquema para crear un usuario.\n    Solo incluye los campos necesarios para la creaci\u00f3n.\n    \"\"\"\n    pass\n\nclass UserUpdate(BaseSchema):\n    \"\"\"\n    Esquema para actualizar un usuario.\n    Todos los campos son opcionales.\n    \"\"\"\n    username: Optional[str] = None\n    email: Optional[EmailStr] = None\n    full_name: Optional[str] = None\n    is_active: Optional[bool] = None\n\n    @validator('username')\n    def validate_username(cls, v):\n        if v is not None:\n            if len(v) &lt; 3 or len(v) &gt; 50 or not v.isalnum():\n                raise ValueError('Nombre de usuario inv\u00e1lido')\n            return v.lower()\n        return v\n\nclass UserResponse(UserBase, TimestampSchema):\n    \"\"\"\n    Esquema para respuestas que incluyen un usuario.\n    Incluye todos los campos del usuario m\u00e1s timestamps.\n    \"\"\"\n    pass\n\nclass UserWithLoans(UserResponse):\n    \"\"\"\n    Esquema de usuario que incluye sus pr\u00e9stamos.\n    \"\"\"\n    from app.schemas.loan import LoanResponse\n    loans: List[LoanResponse] = []\n\n# Esquemas para listas y paginaci\u00f3n\nclass UserList(BaseSchema):\n    \"\"\"\n    Esquema para listas de usuarios con paginaci\u00f3n.\n    \"\"\"\n    users: List[UserResponse]\n    total: int\n    page: int\n    size: int\n    pages: int\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#3-esquemas-de-categoria-appschemascategorypy","title":"3. Esquemas de Categor\u00eda (<code>app/schemas/category.py</code>)","text":"<pre><code>from pydantic import validator\nfrom typing import Optional, List\nfrom app.schemas.base import BaseSchema, TimestampSchema\n\nclass CategoryBase(BaseSchema):\n    \"\"\"\n    Campos base de categor\u00eda.\n    \"\"\"\n    name: str\n    description: Optional[str] = None\n\n    @validator('name')\n    def validate_name(cls, v):\n        v = v.strip()\n        if len(v) &lt; 2:\n            raise ValueError('El nombre debe tener al menos 2 caracteres')\n        if len(v) &gt; 100:\n            raise ValueError('El nombre no puede exceder 100 caracteres')\n        return v.title()\n\n    @validator('description')\n    def validate_description(cls, v):\n        if v is not None:\n            v = v.strip()\n            if len(v) &gt; 500:\n                raise ValueError('La descripci\u00f3n no puede exceder 500 caracteres')\n            return v if v else None\n        return v\n\nclass CategoryCreate(CategoryBase):\n    \"\"\"\n    Esquema para crear categor\u00eda.\n    \"\"\"\n    pass\n\nclass CategoryUpdate(BaseSchema):\n    \"\"\"\n    Esquema para actualizar categor\u00eda.\n    \"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None\n\n    @validator('name')\n    def validate_name(cls, v):\n        if v is not None:\n            v = v.strip()\n            if len(v) &lt; 2 or len(v) &gt; 100:\n                raise ValueError('Nombre inv\u00e1lido')\n            return v.title()\n        return v\n\nclass CategoryResponse(CategoryBase, TimestampSchema):\n    \"\"\"\n    Esquema de respuesta de categor\u00eda.\n    \"\"\"\n    pass\n\nclass CategoryWithItems(CategoryResponse):\n    \"\"\"\n    Categor\u00eda con sus art\u00edculos.\n    \"\"\"\n    from app.schemas.item import ItemResponse\n    items: List[ItemResponse] = []\n    items_count: int = 0\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#4-esquemas-de-articulo-appschemasitempy","title":"4. Esquemas de Art\u00edculo (<code>app/schemas/item.py</code>)","text":"<pre><code>from pydantic import validator\nfrom typing import Optional, List\nfrom enum import Enum\nfrom app.schemas.base import BaseSchema, TimestampSchema\n\nclass ItemStatus(str, Enum):\n    \"\"\"\n    Estados posibles de un art\u00edculo.\n    \"\"\"\n    AVAILABLE = \"available\"\n    LOANED = \"loaned\"\n    MAINTENANCE = \"maintenance\"\n    RETIRED = \"retired\"\n\nclass ItemBase(BaseSchema):\n    \"\"\"\n    Campos base de art\u00edculo.\n    \"\"\"\n    name: str\n    description: Optional[str] = None\n    serial_number: str\n    status: ItemStatus = ItemStatus.AVAILABLE\n    category_id: int\n\n    @validator('name')\n    def validate_name(cls, v):\n        v = v.strip()\n        if len(v) &lt; 2:\n            raise ValueError('El nombre debe tener al menos 2 caracteres')\n        if len(v) &gt; 200:\n            raise ValueError('El nombre no puede exceder 200 caracteres')\n        return v.title()\n\n    @validator('serial_number')\n    def validate_serial_number(cls, v):\n        v = v.strip().upper()\n        if len(v) &lt; 3:\n            raise ValueError('El n\u00famero de serie debe tener al menos 3 caracteres')\n        if len(v) &gt; 100:\n            raise ValueError('El n\u00famero de serie no puede exceder 100 caracteres')\n        # Validar formato alfanum\u00e9rico\n        if not v.replace('-', '').replace('_', '').isalnum():\n            raise ValueError('El n\u00famero de serie solo puede contener letras, n\u00fameros, guiones y guiones bajos')\n        return v\n\n    @validator('description')\n    def validate_description(cls, v):\n        if v is not None:\n            v = v.strip()\n            if len(v) &gt; 1000:\n                raise ValueError('La descripci\u00f3n no puede exceder 1000 caracteres')\n            return v if v else None\n        return v\n\nclass ItemCreate(ItemBase):\n    \"\"\"\n    Esquema para crear art\u00edculo.\n    \"\"\"\n    pass\n\nclass ItemUpdate(BaseSchema):\n    \"\"\"\n    Esquema para actualizar art\u00edculo.\n    \"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None\n    serial_number: Optional[str] = None\n    status: Optional[ItemStatus] = None\n    category_id: Optional[int] = None\n\n    @validator('name')\n    def validate_name(cls, v):\n        if v is not None:\n            v = v.strip()\n            if len(v) &lt; 2 or len(v) &gt; 200:\n                raise ValueError('Nombre inv\u00e1lido')\n            return v.title()\n        return v\n\n    @validator('serial_number')\n    def validate_serial_number(cls, v):\n        if v is not None:\n            v = v.strip().upper()\n            if len(v) &lt; 3 or len(v) &gt; 100:\n                raise ValueError('N\u00famero de serie inv\u00e1lido')\n            return v\n        return v\n\nclass ItemResponse(ItemBase, TimestampSchema):\n    \"\"\"\n    Esquema de respuesta de art\u00edculo.\n    \"\"\"\n    from app.schemas.category import CategoryResponse\n    category: CategoryResponse\n\nclass ItemWithLoans(ItemResponse):\n    \"\"\"\n    Art\u00edculo con sus pr\u00e9stamos.\n    \"\"\"\n    from app.schemas.loan import LoanResponse\n    loans: List[LoanResponse] = []\n    current_loan: Optional[LoanResponse] = None\n\nclass ItemSearch(BaseSchema):\n    \"\"\"\n    Esquema para b\u00fasqueda de art\u00edculos.\n    \"\"\"\n    name: Optional[str] = None\n    category_id: Optional[int] = None\n    status: Optional[ItemStatus] = None\n    serial_number: Optional[str] = None\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#5-esquemas-de-prestamo-appschemasloanpy","title":"5. Esquemas de Pr\u00e9stamo (<code>app/schemas/loan.py</code>)","text":"<pre><code>from pydantic import validator, root_validator\nfrom typing import Optional, List\nfrom datetime import datetime, timedelta\nfrom enum import Enum\nfrom app.schemas.base import BaseSchema, TimestampSchema\n\nclass LoanStatus(str, Enum):\n    \"\"\"\n    Estados posibles de un pr\u00e9stamo.\n    \"\"\"\n    ACTIVE = \"active\"\n    RETURNED = \"returned\"\n    OVERDUE = \"overdue\"\n    CANCELLED = \"cancelled\"\n\nclass LoanBase(BaseSchema):\n    \"\"\"\n    Campos base de pr\u00e9stamo.\n    \"\"\"\n    due_date: datetime\n    notes: Optional[str] = None\n    user_id: int\n    item_id: int\n\n    @validator('due_date')\n    def validate_due_date(cls, v):\n        # La fecha de vencimiento debe ser futura\n        if v &lt;= datetime.utcnow():\n            raise ValueError('La fecha de vencimiento debe ser futura')\n        # No m\u00e1s de 1 a\u00f1o en el futuro\n        max_date = datetime.utcnow() + timedelta(days=365)\n        if v &gt; max_date:\n            raise ValueError('La fecha de vencimiento no puede ser m\u00e1s de 1 a\u00f1o en el futuro')\n        return v\n\n    @validator('notes')\n    def validate_notes(cls, v):\n        if v is not None:\n            v = v.strip()\n            if len(v) &gt; 500:\n                raise ValueError('Las notas no pueden exceder 500 caracteres')\n            return v if v else None\n        return v\n\nclass LoanCreate(LoanBase):\n    \"\"\"\n    Esquema para crear pr\u00e9stamo.\n    \"\"\"\n    pass\n\nclass LoanUpdate(BaseSchema):\n    \"\"\"\n    Esquema para actualizar pr\u00e9stamo.\n    \"\"\"\n    due_date: Optional[datetime] = None\n    return_date: Optional[datetime] = None\n    status: Optional[LoanStatus] = None\n    notes: Optional[str] = None\n\n    @root_validator\n    def validate_return_and_status(cls, values):\n        return_date = values.get('return_date')\n        status = values.get('status')\n\n        # Si se establece fecha de retorno, el estado debe ser RETURNED\n        if return_date and status != LoanStatus.RETURNED:\n            values['status'] = LoanStatus.RETURNED\n\n        # Si el estado es RETURNED, debe haber fecha de retorno\n        if status == LoanStatus.RETURNED and not return_date:\n            values['return_date'] = datetime.utcnow()\n\n        return values\n\nclass LoanReturn(BaseSchema):\n    \"\"\"\n    Esquema espec\u00edfico para devolver un pr\u00e9stamo.\n    \"\"\"\n    return_date: Optional[datetime] = None\n    notes: Optional[str] = None\n\n    @validator('return_date', pre=True, always=True)\n    def set_return_date(cls, v):\n        return v or datetime.utcnow()\n\nclass LoanResponse(LoanBase, TimestampSchema):\n    \"\"\"\n    Esquema de respuesta de pr\u00e9stamo.\n    \"\"\"\n    loan_date: datetime\n    return_date: Optional[datetime] = None\n    status: LoanStatus\n\n    # Campos calculados\n    is_overdue: bool = False\n    days_until_due: int = 0\n\n    @validator('is_overdue', pre=False, always=True)\n    def calculate_is_overdue(cls, v, values):\n        if values.get('status') != LoanStatus.ACTIVE:\n            return False\n        due_date = values.get('due_date')\n        return due_date &lt; datetime.utcnow() if due_date else False\n\n    @validator('days_until_due', pre=False, always=True)\n    def calculate_days_until_due(cls, v, values):\n        if values.get('status') != LoanStatus.ACTIVE:\n            return 0\n        due_date = values.get('due_date')\n        if due_date:\n            delta = due_date - datetime.utcnow()\n            return max(0, delta.days)\n        return 0\n\nclass LoanWithDetails(LoanResponse):\n    \"\"\"\n    Pr\u00e9stamo con detalles de usuario y art\u00edculo.\n    \"\"\"\n    from app.schemas.user import UserResponse\n    from app.schemas.item import ItemResponse\n\n    user: UserResponse\n    item: ItemResponse\n\nclass LoanSearch(BaseSchema):\n    \"\"\"\n    Esquema para b\u00fasqueda de pr\u00e9stamos.\n    \"\"\"\n    user_id: Optional[int] = None\n    item_id: Optional[int] = None\n    status: Optional[LoanStatus] = None\n    overdue_only: bool = False\n    date_from: Optional[datetime] = None\n    date_to: Optional[datetime] = None\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#esquemas-de-respuesta-comunes","title":"Esquemas de respuesta comunes","text":""},{"location":"tutorial/api1/05-esquemas-pydantic/#1-respuestas-de-error","title":"1. Respuestas de error","text":"<pre><code># app/schemas/common.py\nfrom pydantic import BaseModel\nfrom typing import Optional, List, Any\n\nclass ErrorResponse(BaseModel):\n    \"\"\"\n    Esquema est\u00e1ndar para respuestas de error.\n    \"\"\"\n    error: str\n    message: str\n    details: Optional[Any] = None\n\nclass ValidationErrorResponse(BaseModel):\n    \"\"\"\n    Esquema para errores de validaci\u00f3n.\n    \"\"\"\n    error: str = \"Validation Error\"\n    message: str\n    errors: List[dict]\n\nclass SuccessResponse(BaseModel):\n    \"\"\"\n    Esquema para respuestas exitosas simples.\n    \"\"\"\n    success: bool = True\n    message: str\n    data: Optional[Any] = None\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#2-esquemas-de-paginacion","title":"2. Esquemas de paginaci\u00f3n","text":"<pre><code>from typing import Generic, TypeVar, List\nfrom pydantic import BaseModel\nfrom pydantic.generics import GenericModel\n\nT = TypeVar('T')\n\nclass PaginatedResponse(GenericModel, Generic[T]):\n    \"\"\"\n    Esquema gen\u00e9rico para respuestas paginadas.\n    \"\"\"\n    items: List[T]\n    total: int\n    page: int\n    size: int\n    pages: int\n    has_next: bool\n    has_prev: bool\n\nclass PaginationParams(BaseModel):\n    \"\"\"\n    Par\u00e1metros de paginaci\u00f3n.\n    \"\"\"\n    page: int = 1\n    size: int = 20\n\n    @validator('page')\n    def validate_page(cls, v):\n        if v &lt; 1:\n            raise ValueError('La p\u00e1gina debe ser mayor a 0')\n        return v\n\n    @validator('size')\n    def validate_size(cls, v):\n        if v &lt; 1 or v &gt; 100:\n            raise ValueError('El tama\u00f1o debe estar entre 1 y 100')\n        return v\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#uso-en-endpoints","title":"Uso en endpoints","text":"<pre><code># app/routers/users.py\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List\n\nfrom app.schemas.user import UserCreate, UserResponse, UserUpdate, PaginatedResponse\nfrom app.schemas.common import SuccessResponse, ErrorResponse\nfrom app.database.database import get_db\nfrom app.crud import users as crud_users\n\nrouter = APIRouter()\n\n@router.post(\n    \"/\", \n    response_model=UserResponse, \n    status_code=status.HTTP_201_CREATED,\n    responses={\n        400: {\"model\": ErrorResponse, \"description\": \"Datos inv\u00e1lidos\"},\n        409: {\"model\": ErrorResponse, \"description\": \"Usuario ya existe\"}\n    }\n)\ndef create_user(user: UserCreate, db: Session = Depends(get_db)):\n    \"\"\"\n    Crear un nuevo usuario.\n\n    - **username**: Nombre de usuario \u00fanico (3-50 caracteres alfanum\u00e9ricos)\n    - **email**: Correo electr\u00f3nico v\u00e1lido\n    - **full_name**: Nombre completo (opcional)\n    - **is_active**: Si el usuario est\u00e1 activo (por defecto True)\n    \"\"\"\n    # Los datos ya est\u00e1n validados por Pydantic\n    return crud_users.create_user(db=db, user=user)\n\n@router.get(\"/\", response_model=PaginatedResponse[UserResponse])\ndef read_users(\n    page: int = 1,\n    size: int = 20,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener lista paginada de usuarios.\n    \"\"\"\n    # Validaci\u00f3n autom\u00e1tica de par\u00e1metros\n    users = crud_users.get_users(db, skip=(page-1)*size, limit=size)\n    total = crud_users.get_users_count(db)\n\n    return PaginatedResponse[\n        items=users,\n        total=total,\n        page=page,\n        size=size,\n        pages=(total + size - 1) // size,\n        has_next=page * size &lt; total,\n        has_prev=page &gt; 1\n    ]\n\n@router.put(\"/{user_id}\", response_model=UserResponse)\ndef update_user(\n    user_id: int,\n    user_update: UserUpdate,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Actualizar un usuario existente.\n    \"\"\"\n    user = crud_users.get_user(db, user_id=user_id)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Usuario no encontrado\"\n        )\n\n    return crud_users.update_user(db=db, user=user, user_update=user_update)\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#validaciones-avanzadas","title":"Validaciones avanzadas","text":""},{"location":"tutorial/api1/05-esquemas-pydantic/#1-validadores-personalizados","title":"1. Validadores personalizados","text":"<pre><code>from pydantic import validator, root_validator\nimport re\n\nclass UserAdvanced(BaseModel):\n    username: str\n    password: str\n    confirm_password: str\n    phone: Optional[str] = None\n\n    @validator('password')\n    def validate_password(cls, v):\n        if len(v) &lt; 8:\n            raise ValueError('La contrase\u00f1a debe tener al menos 8 caracteres')\n        if not re.search(r'[A-Z]', v):\n            raise ValueError('La contrase\u00f1a debe tener al menos una may\u00fascula')\n        if not re.search(r'[a-z]', v):\n            raise ValueError('La contrase\u00f1a debe tener al menos una min\u00fascula')\n        if not re.search(r'\\d', v):\n            raise ValueError('La contrase\u00f1a debe tener al menos un n\u00famero')\n        return v\n\n    @validator('phone')\n    def validate_phone(cls, v):\n        if v is not None:\n            # Remover espacios y caracteres especiales\n            phone = re.sub(r'[^\\d+]', '', v)\n            if not re.match(r'^\\+?[1-9]\\d{1,14}$', phone):\n                raise ValueError('Formato de tel\u00e9fono inv\u00e1lido')\n            return phone\n        return v\n\n    @root_validator\n    def validate_passwords_match(cls, values):\n        password = values.get('password')\n        confirm_password = values.get('confirm_password')\n        if password != confirm_password:\n            raise ValueError('Las contrase\u00f1as no coinciden')\n        return values\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#2-validaciones-condicionales","title":"2. Validaciones condicionales","text":"<pre><code>class LoanAdvanced(BaseModel):\n    item_id: int\n    user_id: int\n    due_date: datetime\n    priority: str = \"normal\"\n\n    @root_validator\n    def validate_priority_and_due_date(cls, values):\n        priority = values.get('priority')\n        due_date = values.get('due_date')\n\n        if priority == \"urgent\":\n            # Pr\u00e9stamos urgentes no pueden ser por m\u00e1s de 7 d\u00edas\n            max_date = datetime.utcnow() + timedelta(days=7)\n            if due_date &gt; max_date:\n                raise ValueError('Pr\u00e9stamos urgentes no pueden exceder 7 d\u00edas')\n\n        return values\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#configuracion-avanzada","title":"Configuraci\u00f3n avanzada","text":""},{"location":"tutorial/api1/05-esquemas-pydantic/#1-configuracion-de-clase","title":"1. Configuraci\u00f3n de clase","text":"<pre><code>class UserConfig(BaseModel):\n    username: str\n    email: str\n\n    class Config:\n        # Configuraciones importantes\n        from_attributes = True          # Para SQLAlchemy objects\n        validate_assignment = True      # Validar al asignar valores\n        use_enum_values = True         # Usar valores de enum\n        allow_population_by_field_name = True  # Permitir alias\n        json_encoders = {              # Encoders personalizados\n            datetime: lambda v: v.isoformat()\n        }\n        schema_extra = {               # Ejemplo en documentaci\u00f3n\n            \"example\": {\n                \"username\": \"johndoe\",\n                \"email\": \"john@example.com\"\n            }\n        }\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#2-alias-de-campos","title":"2. Alias de campos","text":"<pre><code>from pydantic import Field\n\nclass UserWithAlias(BaseModel):\n    username: str = Field(..., alias=\"user_name\")\n    email: str = Field(..., description=\"Correo electr\u00f3nico del usuario\")\n    full_name: str = Field(None, alias=\"fullName\", max_length=100)\n\n    class Config:\n        allow_population_by_field_name = True\n</code></pre>"},{"location":"tutorial/api1/05-esquemas-pydantic/#mejores-practicas","title":"Mejores pr\u00e1cticas","text":""},{"location":"tutorial/api1/05-esquemas-pydantic/#1-organizacion-de-esquemas","title":"1. Organizaci\u00f3n de esquemas","text":"<ul> <li>Un archivo por modelo (user.py, item.py, etc.)</li> <li>Esquemas base reutilizables (BaseSchema, TimestampSchema)</li> <li>Separar por prop\u00f3sito (Create, Update, Response)</li> </ul>"},{"location":"tutorial/api1/05-esquemas-pydantic/#2-validaciones","title":"2. Validaciones","text":"<ul> <li>Validar en el esquema, no en el endpoint</li> <li>Mensajes de error claros y en espa\u00f1ol</li> <li>Validaciones de negocio en root_validator</li> </ul>"},{"location":"tutorial/api1/05-esquemas-pydantic/#3-documentacion","title":"3. Documentaci\u00f3n","text":"<ul> <li>Usar docstrings en esquemas y campos</li> <li>Ejemplos en schema_extra para documentaci\u00f3n</li> <li>Descripciones en Field() para campos complejos</li> </ul>"},{"location":"tutorial/api1/05-esquemas-pydantic/#4-performance","title":"4. Performance","text":"<ul> <li>Esquemas espec\u00edficos para cada uso</li> <li>Evitar esquemas muy anidados en listas</li> <li>Lazy loading para relaciones opcionales</li> </ul>"},{"location":"tutorial/api1/05-esquemas-pydantic/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<p>En el siguiente tema aprenderemos sobre operaciones CRUD, donde utilizaremos estos esquemas para interactuar con la base de datos de manera segura y eficiente.</p> <p>\ud83d\udca1 Tips importantes:</p> <ol> <li>Siempre valida en el esquema - no en el endpoint</li> <li>Usa type hints - mejora la documentaci\u00f3n y IDE</li> <li>Esquemas espec\u00edficos - Create, Update, Response separados</li> <li>Mensajes de error claros - facilita el debugging</li> <li>Configuraci\u00f3n from_attributes - para objetos SQLAlchemy</li> </ol> <p>\ud83d\udd17 Enlaces \u00fatiles: - Pydantic Documentation - FastAPI Request Body - FastAPI Response Model</p>"},{"location":"tutorial/api1/06-operaciones-crud/","title":"Operaciones CRUD","text":""},{"location":"tutorial/api1/06-operaciones-crud/#introduccion","title":"Introducci\u00f3n","text":"<p>CRUD es un acr\u00f3nimo que representa las cuatro operaciones b\u00e1sicas de persistencia de datos:</p> <ul> <li>Create (Crear)</li> <li>Read (Leer)</li> <li>Update (Actualizar)</li> <li>Delete (Eliminar)</li> </ul> <p>En FastAPI con SQLAlchemy, estas operaciones se implementan como funciones que interact\u00faan con la base de datos usando sesiones de SQLAlchemy.</p>"},{"location":"tutorial/api1/06-operaciones-crud/#por-que-separar-las-operaciones-crud","title":"\u00bfPor qu\u00e9 separar las operaciones CRUD?","text":""},{"location":"tutorial/api1/06-operaciones-crud/#ventajas-de-la-separacion","title":"Ventajas de la separaci\u00f3n","text":"<ol> <li>Reutilizaci\u00f3n: Las mismas operaciones pueden usarse en diferentes endpoints</li> <li>Testabilidad: F\u00e1cil de testear independientemente</li> <li>Mantenimiento: L\u00f3gica de base de datos centralizada</li> <li>Consistencia: Operaciones estandarizadas</li> </ol>"},{"location":"tutorial/api1/06-operaciones-crud/#estructura-recomendada","title":"Estructura recomendada","text":"<pre><code>app/crud/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 base.py          # Operaciones CRUD base\n\u251c\u2500\u2500 users.py         # Operaciones espec\u00edficas de usuarios\n\u251c\u2500\u2500 categories.py    # Operaciones espec\u00edficas de categor\u00edas\n\u251c\u2500\u2500 items.py         # Operaciones espec\u00edficas de art\u00edculos\n\u2514\u2500\u2500 loans.py         # Operaciones espec\u00edficas de pr\u00e9stamos\n</code></pre>"},{"location":"tutorial/api1/06-operaciones-crud/#clase-crud-base","title":"Clase CRUD base","text":""},{"location":"tutorial/api1/06-operaciones-crud/#implementacion-base-appcrudbasepy","title":"Implementaci\u00f3n base (<code>app/crud/base.py</code>)","text":"<pre><code>from typing import Any, Dict, Generic, List, Optional, Type, TypeVar, Union\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\nfrom sqlalchemy.orm import Session\nfrom app.database.base import BaseModel as DBBaseModel\n\n# Tipos gen\u00e9ricos\nModelType = TypeVar(\"ModelType\", bound=DBBaseModel)\nCreateSchemaType = TypeVar(\"CreateSchemaType\", bound=BaseModel)\nUpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=BaseModel)\n\nclass CRUDBase(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):\n    \"\"\"\n    Clase base para operaciones CRUD.\n\n    Proporciona operaciones b\u00e1sicas que pueden ser heredadas\n    y extendidas por clases CRUD espec\u00edficas.\n    \"\"\"\n\n    def __init__(self, model: Type[ModelType]):\n        \"\"\"\n        Inicializar con el modelo SQLAlchemy.\n\n        Args:\n            model: Clase del modelo SQLAlchemy\n        \"\"\"\n        self.model = model\n\n    def get(self, db: Session, id: Any) -&gt; Optional[ModelType]:\n        \"\"\"\n        Obtener un registro por ID.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            id: ID del registro\n\n        Returns:\n            Registro encontrado o None\n        \"\"\"\n        return db.query(self.model).filter(self.model.id == id).first()\n\n    def get_multi(\n        self, \n        db: Session, \n        *, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[ModelType]:\n        \"\"\"\n        Obtener m\u00faltiples registros con paginaci\u00f3n.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            skip: N\u00famero de registros a saltar\n            limit: N\u00famero m\u00e1ximo de registros a retornar\n\n        Returns:\n            Lista de registros\n        \"\"\"\n        return db.query(self.model).offset(skip).limit(limit).all()\n\n    def create(self, db: Session, *, obj_in: CreateSchemaType) -&gt; ModelType:\n        \"\"\"\n        Crear un nuevo registro.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            obj_in: Datos para crear el registro\n\n        Returns:\n            Registro creado\n        \"\"\"\n        obj_in_data = jsonable_encoder(obj_in)\n        db_obj = self.model(**obj_in_data)\n        db.add(db_obj)\n        db.commit()\n        db.refresh(db_obj)\n        return db_obj\n\n    def update(\n        self,\n        db: Session,\n        *,\n        db_obj: ModelType,\n        obj_in: Union[UpdateSchemaType, Dict[str, Any]]\n    ) -&gt; ModelType:\n        \"\"\"\n        Actualizar un registro existente.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            db_obj: Registro existente en la base de datos\n            obj_in: Datos para actualizar\n\n        Returns:\n            Registro actualizado\n        \"\"\"\n        obj_data = jsonable_encoder(db_obj)\n\n        if isinstance(obj_in, dict):\n            update_data = obj_in\n        else:\n            update_data = obj_in.dict(exclude_unset=True)\n\n        for field in obj_data:\n            if field in update_data:\n                setattr(db_obj, field, update_data[field])\n\n        db.add(db_obj)\n        db.commit()\n        db.refresh(db_obj)\n        return db_obj\n\n    def remove(self, db: Session, *, id: int) -&gt; ModelType:\n        \"\"\"\n        Eliminar un registro por ID.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            id: ID del registro a eliminar\n\n        Returns:\n            Registro eliminado\n        \"\"\"\n        obj = db.query(self.model).get(id)\n        db.delete(obj)\n        db.commit()\n        return obj\n\n    def count(self, db: Session) -&gt; int:\n        \"\"\"\n        Contar el total de registros.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n\n        Returns:\n            N\u00famero total de registros\n        \"\"\"\n        return db.query(self.model).count()\n\n    def exists(self, db: Session, id: int) -&gt; bool:\n        \"\"\"\n        Verificar si existe un registro con el ID dado.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            id: ID a verificar\n\n        Returns:\n            True si existe, False si no\n        \"\"\"\n        return db.query(self.model).filter(self.model.id == id).first() is not None\n</code></pre>"},{"location":"tutorial/api1/06-operaciones-crud/#operaciones-crud-especificas","title":"Operaciones CRUD espec\u00edficas","text":""},{"location":"tutorial/api1/06-operaciones-crud/#1-crud-de-usuarios-appcruduserspy","title":"1. CRUD de Usuarios (<code>app/crud/users.py</code>)","text":"<pre><code>from typing import Optional, List\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import or_\n\nfrom app.crud.base import CRUDBase\nfrom app.models.user import User\nfrom app.schemas.user import UserCreate, UserUpdate\n\nclass CRUDUser(CRUDBase[User, UserCreate, UserUpdate]):\n    \"\"\"\n    Operaciones CRUD espec\u00edficas para usuarios.\n    \"\"\"\n\n    def get_by_email(self, db: Session, *, email: str) -&gt; Optional[User]:\n        \"\"\"\n        Obtener usuario por email.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            email: Email del usuario\n\n        Returns:\n            Usuario encontrado o None\n        \"\"\"\n        return db.query(User).filter(User.email == email).first()\n\n    def get_by_username(self, db: Session, *, username: str) -&gt; Optional[User]:\n        \"\"\"\n        Obtener usuario por nombre de usuario.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            username: Nombre de usuario\n\n        Returns:\n            Usuario encontrado o None\n        \"\"\"\n        return db.query(User).filter(User.username == username).first()\n\n    def search_users(\n        self, \n        db: Session, \n        *, \n        query: str, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[User]:\n        \"\"\"\n        Buscar usuarios por nombre de usuario, email o nombre completo.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            query: T\u00e9rmino de b\u00fasqueda\n            skip: Registros a saltar\n            limit: L\u00edmite de registros\n\n        Returns:\n            Lista de usuarios que coinciden\n        \"\"\"\n        search_term = f\"%{query}%\"\n        return db.query(User).filter(\n            or_(\n                User.username.ilike(search_term),\n                User.email.ilike(search_term),\n                User.full_name.ilike(search_term)\n            )\n        ).offset(skip).limit(limit).all()\n\n    def get_active_users(\n        self, \n        db: Session, \n        *, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[User]:\n        \"\"\"\n        Obtener usuarios activos.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            skip: Registros a saltar\n            limit: L\u00edmite de registros\n\n        Returns:\n            Lista de usuarios activos\n        \"\"\"\n        return db.query(User).filter(\n            User.is_active == True\n        ).offset(skip).limit(limit).all()\n\n    def create_user(self, db: Session, *, user: UserCreate) -&gt; User:\n        \"\"\"\n        Crear un nuevo usuario con validaciones adicionales.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            user: Datos del usuario a crear\n\n        Returns:\n            Usuario creado\n\n        Raises:\n            ValueError: Si el email o username ya existen\n        \"\"\"\n        # Verificar si el email ya existe\n        if self.get_by_email(db, email=user.email):\n            raise ValueError(\"El email ya est\u00e1 registrado\")\n\n        # Verificar si el username ya existe\n        if self.get_by_username(db, username=user.username):\n            raise ValueError(\"El nombre de usuario ya est\u00e1 registrado\")\n\n        return self.create(db, obj_in=user)\n\n    def update_user(\n        self, \n        db: Session, \n        *, \n        db_obj: User, \n        obj_in: UserUpdate\n    ) -&gt; User:\n        \"\"\"\n        Actualizar usuario con validaciones adicionales.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            db_obj: Usuario existente\n            obj_in: Datos de actualizaci\u00f3n\n\n        Returns:\n            Usuario actualizado\n\n        Raises:\n            ValueError: Si el nuevo email o username ya existen\n        \"\"\"\n        # Verificar email si se est\u00e1 actualizando\n        if obj_in.email and obj_in.email != db_obj.email:\n            existing_user = self.get_by_email(db, email=obj_in.email)\n            if existing_user and existing_user.id != db_obj.id:\n                raise ValueError(\"El email ya est\u00e1 registrado\")\n\n        # Verificar username si se est\u00e1 actualizando\n        if obj_in.username and obj_in.username != db_obj.username:\n            existing_user = self.get_by_username(db, username=obj_in.username)\n            if existing_user and existing_user.id != db_obj.id:\n                raise ValueError(\"El nombre de usuario ya est\u00e1 registrado\")\n\n        return self.update(db, db_obj=db_obj, obj_in=obj_in)\n\n    def deactivate_user(self, db: Session, *, user_id: int) -&gt; User:\n        \"\"\"\n        Desactivar un usuario (soft delete).\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            user_id: ID del usuario a desactivar\n\n        Returns:\n            Usuario desactivado\n        \"\"\"\n        user = self.get(db, id=user_id)\n        if user:\n            user.is_active = False\n            db.commit()\n            db.refresh(user)\n        return user\n\n# Instancia global\nuser = CRUDUser(User)\n</code></pre>"},{"location":"tutorial/api1/06-operaciones-crud/#2-crud-de-categorias-appcrudcategoriespy","title":"2. CRUD de Categor\u00edas (<code>app/crud/categories.py</code>)","text":"<pre><code>from typing import Optional, List\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import func\n\nfrom app.crud.base import CRUDBase\nfrom app.models.category import Category\nfrom app.schemas.category import CategoryCreate, CategoryUpdate\n\nclass CRUDCategory(CRUDBase[Category, CategoryCreate, CategoryUpdate]):\n    \"\"\"\n    Operaciones CRUD espec\u00edficas para categor\u00edas.\n    \"\"\"\n\n    def get_by_name(self, db: Session, *, name: str) -&gt; Optional[Category]:\n        \"\"\"\n        Obtener categor\u00eda por nombre.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            name: Nombre de la categor\u00eda\n\n        Returns:\n            Categor\u00eda encontrada o None\n        \"\"\"\n        return db.query(Category).filter(\n            func.lower(Category.name) == func.lower(name)\n        ).first()\n\n    def search_categories(\n        self, \n        db: Session, \n        *, \n        query: str, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[Category]:\n        \"\"\"\n        Buscar categor\u00edas por nombre o descripci\u00f3n.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            query: T\u00e9rmino de b\u00fasqueda\n            skip: Registros a saltar\n            limit: L\u00edmite de registros\n\n        Returns:\n            Lista de categor\u00edas que coinciden\n        \"\"\"\n        search_term = f\"%{query}%\"\n        return db.query(Category).filter(\n            Category.name.ilike(search_term) |\n            Category.description.ilike(search_term)\n        ).offset(skip).limit(limit).all()\n\n    def get_categories_with_item_count(\n        self, \n        db: Session, \n        *, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[tuple]:\n        \"\"\"\n        Obtener categor\u00edas con el conteo de art\u00edculos.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            skip: Registros a saltar\n            limit: L\u00edmite de registros\n\n        Returns:\n            Lista de tuplas (Category, item_count)\n        \"\"\"\n        from app.models.item import Item\n\n        return db.query(\n            Category, \n            func.count(Item.id).label('item_count')\n        ).outerjoin(Item).group_by(Category.id).offset(skip).limit(limit).all()\n\n    def create_category(self, db: Session, *, category: CategoryCreate) -&gt; Category:\n        \"\"\"\n        Crear una nueva categor\u00eda con validaciones.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            category: Datos de la categor\u00eda\n\n        Returns:\n            Categor\u00eda creada\n\n        Raises:\n            ValueError: Si el nombre ya existe\n        \"\"\"\n        # Verificar si el nombre ya existe\n        if self.get_by_name(db, name=category.name):\n            raise ValueError(\"Ya existe una categor\u00eda con ese nombre\")\n\n        return self.create(db, obj_in=category)\n\n    def update_category(\n        self, \n        db: Session, \n        *, \n        db_obj: Category, \n        obj_in: CategoryUpdate\n    ) -&gt; Category:\n        \"\"\"\n        Actualizar categor\u00eda con validaciones.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            db_obj: Categor\u00eda existente\n            obj_in: Datos de actualizaci\u00f3n\n\n        Returns:\n            Categor\u00eda actualizada\n\n        Raises:\n            ValueError: Si el nuevo nombre ya existe\n        \"\"\"\n        # Verificar nombre si se est\u00e1 actualizando\n        if obj_in.name and obj_in.name != db_obj.name:\n            existing_category = self.get_by_name(db, name=obj_in.name)\n            if existing_category and existing_category.id != db_obj.id:\n                raise ValueError(\"Ya existe una categor\u00eda con ese nombre\")\n\n        return self.update(db, db_obj=db_obj, obj_in=obj_in)\n\n    def can_delete(self, db: Session, *, category_id: int) -&gt; bool:\n        \"\"\"\n        Verificar si una categor\u00eda puede ser eliminada.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            category_id: ID de la categor\u00eda\n\n        Returns:\n            True si puede ser eliminada, False si no\n        \"\"\"\n        from app.models.item import Item\n\n        item_count = db.query(Item).filter(\n            Item.category_id == category_id\n        ).count()\n\n        return item_count == 0\n\n# Instancia global\ncategory = CRUDCategory(Category)\n</code></pre>"},{"location":"tutorial/api1/06-operaciones-crud/#3-crud-de-articulos-appcruditemspy","title":"3. CRUD de Art\u00edculos (<code>app/crud/items.py</code>)","text":"<pre><code>from typing import Optional, List\nfrom sqlalchemy.orm import Session, joinedload\nfrom sqlalchemy import or_, and_\n\nfrom app.crud.base import CRUDBase\nfrom app.models.item import Item, ItemStatus\nfrom app.schemas.item import ItemCreate, ItemUpdate, ItemSearch\n\nclass CRUDItem(CRUDBase[Item, ItemCreate, ItemUpdate]):\n    \"\"\"\n    Operaciones CRUD espec\u00edficas para art\u00edculos.\n    \"\"\"\n\n    def get_by_serial_number(\n        self, \n        db: Session, \n        *, \n        serial_number: str\n    ) -&gt; Optional[Item]:\n        \"\"\"\n        Obtener art\u00edculo por n\u00famero de serie.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            serial_number: N\u00famero de serie del art\u00edculo\n\n        Returns:\n            Art\u00edculo encontrado o None\n        \"\"\"\n        return db.query(Item).filter(\n            Item.serial_number == serial_number\n        ).first()\n\n    def get_with_category(self, db: Session, *, item_id: int) -&gt; Optional[Item]:\n        \"\"\"\n        Obtener art\u00edculo con informaci\u00f3n de categor\u00eda cargada.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            item_id: ID del art\u00edculo\n\n        Returns:\n            Art\u00edculo con categor\u00eda cargada o None\n        \"\"\"\n        return db.query(Item).options(\n            joinedload(Item.category)\n        ).filter(Item.id == item_id).first()\n\n    def get_available_items(\n        self, \n        db: Session, \n        *, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[Item]:\n        \"\"\"\n        Obtener art\u00edculos disponibles para pr\u00e9stamo.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            skip: Registros a saltar\n            limit: L\u00edmite de registros\n\n        Returns:\n            Lista de art\u00edculos disponibles\n        \"\"\"\n        return db.query(Item).filter(\n            Item.status == ItemStatus.AVAILABLE\n        ).offset(skip).limit(limit).all()\n\n    def get_by_category(\n        self, \n        db: Session, \n        *, \n        category_id: int, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[Item]:\n        \"\"\"\n        Obtener art\u00edculos por categor\u00eda.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            category_id: ID de la categor\u00eda\n            skip: Registros a saltar\n            limit: L\u00edmite de registros\n\n        Returns:\n            Lista de art\u00edculos de la categor\u00eda\n        \"\"\"\n        return db.query(Item).filter(\n            Item.category_id == category_id\n        ).offset(skip).limit(limit).all()\n\n    def search_items(\n        self, \n        db: Session, \n        *, \n        search: ItemSearch, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[Item]:\n        \"\"\"\n        Buscar art\u00edculos con m\u00faltiples criterios.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            search: Criterios de b\u00fasqueda\n            skip: Registros a saltar\n            limit: L\u00edmite de registros\n\n        Returns:\n            Lista de art\u00edculos que coinciden\n        \"\"\"\n        query = db.query(Item)\n\n        # Filtrar por nombre\n        if search.name:\n            query = query.filter(Item.name.ilike(f\"%{search.name}%\"))\n\n        # Filtrar por categor\u00eda\n        if search.category_id:\n            query = query.filter(Item.category_id == search.category_id)\n\n        # Filtrar por estado\n        if search.status:\n            query = query.filter(Item.status == search.status)\n\n        # Filtrar por n\u00famero de serie\n        if search.serial_number:\n            query = query.filter(\n                Item.serial_number.ilike(f\"%{search.serial_number}%\")\n            )\n\n        return query.offset(skip).limit(limit).all()\n\n    def create_item(self, db: Session, *, item: ItemCreate) -&gt; Item:\n        \"\"\"\n        Crear un nuevo art\u00edculo con validaciones.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            item: Datos del art\u00edculo\n\n        Returns:\n            Art\u00edculo creado\n\n        Raises:\n            ValueError: Si el n\u00famero de serie ya existe o la categor\u00eda no existe\n        \"\"\"\n        # Verificar si el n\u00famero de serie ya existe\n        if self.get_by_serial_number(db, serial_number=item.serial_number):\n            raise ValueError(\"Ya existe un art\u00edculo con ese n\u00famero de serie\")\n\n        # Verificar si la categor\u00eda existe\n        from app.crud.categories import category\n        if not category.get(db, id=item.category_id):\n            raise ValueError(\"La categor\u00eda especificada no existe\")\n\n        return self.create(db, obj_in=item)\n\n    def update_item(\n        self, \n        db: Session, \n        *, \n        db_obj: Item, \n        obj_in: ItemUpdate\n    ) -&gt; Item:\n        \"\"\"\n        Actualizar art\u00edculo con validaciones.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            db_obj: Art\u00edculo existente\n            obj_in: Datos de actualizaci\u00f3n\n\n        Returns:\n            Art\u00edculo actualizado\n\n        Raises:\n            ValueError: Si el nuevo n\u00famero de serie ya existe\n        \"\"\"\n        # Verificar n\u00famero de serie si se est\u00e1 actualizando\n        if obj_in.serial_number and obj_in.serial_number != db_obj.serial_number:\n            existing_item = self.get_by_serial_number(\n                db, serial_number=obj_in.serial_number\n            )\n            if existing_item and existing_item.id != db_obj.id:\n                raise ValueError(\"Ya existe un art\u00edculo con ese n\u00famero de serie\")\n\n        # Verificar categor\u00eda si se est\u00e1 actualizando\n        if obj_in.category_id and obj_in.category_id != db_obj.category_id:\n            from app.crud.categories import category\n            if not category.get(db, id=obj_in.category_id):\n                raise ValueError(\"La categor\u00eda especificada no existe\")\n\n        return self.update(db, db_obj=db_obj, obj_in=obj_in)\n\n    def update_status(self, db: Session, *, item_id: int, status: ItemStatus) -&gt; Item:\n        \"\"\"\n        Actualizar solo el estado de un art\u00edculo.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            item_id: ID del art\u00edculo\n            status: Nuevo estado\n\n        Returns:\n            Art\u00edculo actualizado\n        \"\"\"\n        item = self.get(db, id=item_id)\n        if item:\n            item.status = status\n            db.commit()\n            db.refresh(item)\n        return item\n\n    def can_delete(self, db: Session, *, item_id: int) -&gt; bool:\n        \"\"\"\n        Verificar si un art\u00edculo puede ser eliminado.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            item_id: ID del art\u00edculo\n\n        Returns:\n            True si puede ser eliminado, False si no\n        \"\"\"\n        from app.models.loan import Loan, LoanStatus\n\n        # No se puede eliminar si tiene pr\u00e9stamos activos\n        active_loans = db.query(Loan).filter(\n            and_(\n                Loan.item_id == item_id,\n                Loan.status == LoanStatus.ACTIVE\n            )\n        ).count()\n\n        return active_loans == 0\n\n# Instancia global\nitem = CRUDItem(Item)\n</code></pre>"},{"location":"tutorial/api1/06-operaciones-crud/#4-crud-de-prestamos-appcrudloanspy","title":"4. CRUD de Pr\u00e9stamos (<code>app/crud/loans.py</code>)","text":"<pre><code>from typing import Optional, List\nfrom datetime import datetime, timedelta\nfrom sqlalchemy.orm import Session, joinedload\nfrom sqlalchemy import and_, or_\n\nfrom app.crud.base import CRUDBase\nfrom app.models.loan import Loan, LoanStatus\nfrom app.models.item import ItemStatus\nfrom app.schemas.loan import LoanCreate, LoanUpdate, LoanReturn\n\nclass CRUDLoan(CRUDBase[Loan, LoanCreate, LoanUpdate]):\n    \"\"\"\n    Operaciones CRUD espec\u00edficas para pr\u00e9stamos.\n    \"\"\"\n\n    def get_with_details(self, db: Session, *, loan_id: int) -&gt; Optional[Loan]:\n        \"\"\"\n        Obtener pr\u00e9stamo con detalles de usuario y art\u00edculo.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            loan_id: ID del pr\u00e9stamo\n\n        Returns:\n            Pr\u00e9stamo con detalles cargados o None\n        \"\"\"\n        return db.query(Loan).options(\n            joinedload(Loan.user),\n            joinedload(Loan.item).joinedload(Item.category)\n        ).filter(Loan.id == loan_id).first()\n\n    def get_active_loans(\n        self, \n        db: Session, \n        *, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[Loan]:\n        \"\"\"\n        Obtener pr\u00e9stamos activos.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            skip: Registros a saltar\n            limit: L\u00edmite de registros\n\n        Returns:\n            Lista de pr\u00e9stamos activos\n        \"\"\"\n        return db.query(Loan).filter(\n            Loan.status == LoanStatus.ACTIVE\n        ).offset(skip).limit(limit).all()\n\n    def get_overdue_loans(\n        self, \n        db: Session, \n        *, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[Loan]:\n        \"\"\"\n        Obtener pr\u00e9stamos vencidos.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            skip: Registros a saltar\n            limit: L\u00edmite de registros\n\n        Returns:\n            Lista de pr\u00e9stamos vencidos\n        \"\"\"\n        now = datetime.utcnow()\n        return db.query(Loan).filter(\n            and_(\n                Loan.status == LoanStatus.ACTIVE,\n                Loan.due_date &lt; now\n            )\n        ).offset(skip).limit(limit).all()\n\n    def get_by_user(\n        self, \n        db: Session, \n        *, \n        user_id: int, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[Loan]:\n        \"\"\"\n        Obtener pr\u00e9stamos de un usuario.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            user_id: ID del usuario\n            skip: Registros a saltar\n            limit: L\u00edmite de registros\n\n        Returns:\n            Lista de pr\u00e9stamos del usuario\n        \"\"\"\n        return db.query(Loan).filter(\n            Loan.user_id == user_id\n        ).offset(skip).limit(limit).all()\n\n    def get_by_item(\n        self, \n        db: Session, \n        *, \n        item_id: int, \n        skip: int = 0, \n        limit: int = 100\n    ) -&gt; List[Loan]:\n        \"\"\"\n        Obtener pr\u00e9stamos de un art\u00edculo.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            item_id: ID del art\u00edculo\n            skip: Registros a saltar\n            limit: L\u00edmite de registros\n\n        Returns:\n            Lista de pr\u00e9stamos del art\u00edculo\n        \"\"\"\n        return db.query(Loan).filter(\n            Loan.item_id == item_id\n        ).offset(skip).limit(limit).all()\n\n    def create_loan(self, db: Session, *, loan: LoanCreate) -&gt; Loan:\n        \"\"\"\n        Crear un nuevo pr\u00e9stamo con validaciones.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            loan: Datos del pr\u00e9stamo\n\n        Returns:\n            Pr\u00e9stamo creado\n\n        Raises:\n            ValueError: Si el art\u00edculo no est\u00e1 disponible o el usuario no existe\n        \"\"\"\n        from app.crud.users import user as crud_user\n        from app.crud.items import item as crud_item\n\n        # Verificar que el usuario existe\n        if not crud_user.get(db, id=loan.user_id):\n            raise ValueError(\"El usuario especificado no existe\")\n\n        # Verificar que el art\u00edculo existe y est\u00e1 disponible\n        item_obj = crud_item.get(db, id=loan.item_id)\n        if not item_obj:\n            raise ValueError(\"El art\u00edculo especificado no existe\")\n\n        if item_obj.status != ItemStatus.AVAILABLE:\n            raise ValueError(\"El art\u00edculo no est\u00e1 disponible para pr\u00e9stamo\")\n\n        # Verificar que el usuario no tenga pr\u00e9stamos vencidos\n        overdue_count = db.query(Loan).filter(\n            and_(\n                Loan.user_id == loan.user_id,\n                Loan.status == LoanStatus.ACTIVE,\n                Loan.due_date &lt; datetime.utcnow()\n            )\n        ).count()\n\n        if overdue_count &gt; 0:\n            raise ValueError(\n                \"El usuario tiene pr\u00e9stamos vencidos y no puede solicitar nuevos pr\u00e9stamos\"\n            )\n\n        # Crear el pr\u00e9stamo\n        db_loan = self.create(db, obj_in=loan)\n\n        # Actualizar estado del art\u00edculo\n        crud_item.update_status(db, item_id=loan.item_id, status=ItemStatus.LOANED)\n\n        return db_loan\n\n    def return_loan(\n        self, \n        db: Session, \n        *, \n        loan_id: int, \n        return_data: LoanReturn\n    ) -&gt; Loan:\n        \"\"\"\n        Procesar la devoluci\u00f3n de un pr\u00e9stamo.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            loan_id: ID del pr\u00e9stamo\n            return_data: Datos de la devoluci\u00f3n\n\n        Returns:\n            Pr\u00e9stamo actualizado\n\n        Raises:\n            ValueError: Si el pr\u00e9stamo no existe o ya fue devuelto\n        \"\"\"\n        from app.crud.items import item as crud_item\n\n        # Obtener el pr\u00e9stamo\n        loan = self.get(db, id=loan_id)\n        if not loan:\n            raise ValueError(\"El pr\u00e9stamo especificado no existe\")\n\n        if loan.status != LoanStatus.ACTIVE:\n            raise ValueError(\"El pr\u00e9stamo ya fue devuelto o cancelado\")\n\n        # Actualizar el pr\u00e9stamo\n        loan.return_date = return_data.return_date\n        loan.status = LoanStatus.RETURNED\n        if return_data.notes:\n            loan.notes = return_data.notes\n\n        db.commit()\n        db.refresh(loan)\n\n        # Actualizar estado del art\u00edculo\n        crud_item.update_status(\n            db, \n            item_id=loan.item_id, \n            status=ItemStatus.AVAILABLE\n        )\n\n        return loan\n\n    def extend_loan(\n        self, \n        db: Session, \n        *, \n        loan_id: int, \n        new_due_date: datetime\n    ) -&gt; Loan:\n        \"\"\"\n        Extender la fecha de vencimiento de un pr\u00e9stamo.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n            loan_id: ID del pr\u00e9stamo\n            new_due_date: Nueva fecha de vencimiento\n\n        Returns:\n            Pr\u00e9stamo actualizado\n\n        Raises:\n            ValueError: Si el pr\u00e9stamo no puede ser extendido\n        \"\"\"\n        loan = self.get(db, id=loan_id)\n        if not loan:\n            raise ValueError(\"El pr\u00e9stamo especificado no existe\")\n\n        if loan.status != LoanStatus.ACTIVE:\n            raise ValueError(\"Solo se pueden extender pr\u00e9stamos activos\")\n\n        if new_due_date &lt;= datetime.utcnow():\n            raise ValueError(\"La nueva fecha debe ser futura\")\n\n        if new_due_date &lt;= loan.due_date:\n            raise ValueError(\"La nueva fecha debe ser posterior a la actual\")\n\n        # L\u00edmite m\u00e1ximo de extensi\u00f3n (ej: 30 d\u00edas desde hoy)\n        max_extension = datetime.utcnow() + timedelta(days=30)\n        if new_due_date &gt; max_extension:\n            raise ValueError(\"La extensi\u00f3n no puede ser mayor a 30 d\u00edas\")\n\n        loan.due_date = new_due_date\n        db.commit()\n        db.refresh(loan)\n\n        return loan\n\n    def update_overdue_status(self, db: Session) -&gt; int:\n        \"\"\"\n        Actualizar el estado de pr\u00e9stamos vencidos.\n\n        Args:\n            db: Sesi\u00f3n de base de datos\n\n        Returns:\n            N\u00famero de pr\u00e9stamos actualizados\n        \"\"\"\n        now = datetime.utcnow()\n\n        # Obtener pr\u00e9stamos activos vencidos\n        overdue_loans = db.query(Loan).filter(\n            and_(\n                Loan.status == LoanStatus.ACTIVE,\n                Loan.due_date &lt; now\n            )\n        ).all()\n\n        # Actualizar estado\n        for loan in overdue_loans:\n            loan.status = LoanStatus.OVERDUE\n\n        db.commit()\n\n        return len(overdue_loans)\n\n# Instancia global\nloan = CRUDLoan(Loan)\n</code></pre>"},{"location":"tutorial/api1/06-operaciones-crud/#uso-en-endpoints","title":"Uso en endpoints","text":""},{"location":"tutorial/api1/06-operaciones-crud/#ejemplo-de-uso-en-router","title":"Ejemplo de uso en router","text":"<pre><code># app/routers/items.py\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List\n\nfrom app.crud.items import item as crud_item\nfrom app.schemas.item import ItemCreate, ItemResponse, ItemUpdate\nfrom app.database.database import get_db\n\nrouter = APIRouter()\n\n@router.post(\"/\", response_model=ItemResponse, status_code=status.HTTP_201_CREATED)\ndef create_item(item: ItemCreate, db: Session = Depends(get_db)):\n    \"\"\"\n    Crear un nuevo art\u00edculo.\n    \"\"\"\n    try:\n        return crud_item.create_item(db=db, item=item)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.get(\"/\", response_model=List[ItemResponse])\ndef read_items(\n    skip: int = 0,\n    limit: int = 100,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener lista de art\u00edculos.\n    \"\"\"\n    return crud_item.get_multi(db, skip=skip, limit=limit)\n\n@router.get(\"/{item_id}\", response_model=ItemResponse)\ndef read_item(item_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Obtener un art\u00edculo por ID.\n    \"\"\"\n    item = crud_item.get_with_category(db, item_id=item_id)\n    if not item:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Art\u00edculo no encontrado\"\n        )\n    return item\n\n@router.put(\"/{item_id}\", response_model=ItemResponse)\ndef update_item(\n    item_id: int,\n    item_update: ItemUpdate,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Actualizar un art\u00edculo.\n    \"\"\"\n    item = crud_item.get(db, id=item_id)\n    if not item:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Art\u00edculo no encontrado\"\n        )\n\n    try:\n        return crud_item.update_item(db=db, db_obj=item, obj_in=item_update)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.delete(\"/{item_id}\")\ndef delete_item(item_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Eliminar un art\u00edculo.\n    \"\"\"\n    if not crud_item.can_delete(db, item_id=item_id):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"No se puede eliminar el art\u00edculo porque tiene pr\u00e9stamos activos\"\n        )\n\n    item = crud_item.remove(db, id=item_id)\n    if not item:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Art\u00edculo no encontrado\"\n        )\n\n    return {\"message\": \"Art\u00edculo eliminado exitosamente\"}\n</code></pre>"},{"location":"tutorial/api1/06-operaciones-crud/#mejores-practicas","title":"Mejores pr\u00e1cticas","text":""},{"location":"tutorial/api1/06-operaciones-crud/#1-validaciones-en-crud","title":"1. Validaciones en CRUD","text":"<ul> <li>Validar existencia de registros relacionados</li> <li>Verificar unicidad de campos \u00fanicos</li> <li>Validar reglas de negocio antes de operaciones</li> </ul>"},{"location":"tutorial/api1/06-operaciones-crud/#2-manejo-de-errores","title":"2. Manejo de errores","text":"<ul> <li>Usar excepciones espec\u00edficas para diferentes errores</li> <li>Mensajes descriptivos para facilitar debugging</li> <li>Validar antes de modificar la base de datos</li> </ul>"},{"location":"tutorial/api1/06-operaciones-crud/#3-performance","title":"3. Performance","text":"<ul> <li>Usar joinedload para cargar relaciones necesarias</li> <li>Paginaci\u00f3n en consultas que retornan listas</li> <li>\u00cdndices en columnas frecuentemente consultadas</li> </ul>"},{"location":"tutorial/api1/06-operaciones-crud/#4-transacciones","title":"4. Transacciones","text":"<ul> <li>Operaciones at\u00f3micas para cambios relacionados</li> <li>Rollback autom\u00e1tico en caso de errores</li> <li>Commit expl\u00edcito despu\u00e9s de validaciones</li> </ul>"},{"location":"tutorial/api1/06-operaciones-crud/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<p>En el siguiente tema aprenderemos sobre la creaci\u00f3n de endpoints y routers, donde utilizaremos estas operaciones CRUD para construir nuestra API REST.</p> <p>\ud83d\udca1 Tips importantes:</p> <ol> <li>Separar l\u00f3gica de negocio - mantener en CRUD, no en endpoints</li> <li>Validaciones tempranas - verificar antes de modificar datos</li> <li>Operaciones at\u00f3micas - usar transacciones para cambios relacionados</li> <li>Mensajes de error claros - facilita el debugging y UX</li> <li>Instancias globales - reutilizar objetos CRUD en toda la aplicaci\u00f3n</li> </ol> <p>\ud83d\udd17 Enlaces \u00fatiles: - SQLAlchemy ORM Querying - FastAPI Dependencies - Pydantic Models</p>"},{"location":"tutorial/api1/07-endpoints-routers/","title":"Endpoints y Routers","text":""},{"location":"tutorial/api1/07-endpoints-routers/#introduccion","title":"Introducci\u00f3n","text":"<p>Los endpoints son las URLs espec\u00edficas donde tu API puede recibir solicitudes. En FastAPI, los routers nos permiten organizar estos endpoints de manera modular y escalable.</p>"},{"location":"tutorial/api1/07-endpoints-routers/#que-son-los-routers","title":"\u00bfQu\u00e9 son los Routers?","text":"<p>Un router en FastAPI es una forma de agrupar endpoints relacionados. Esto nos permite:</p> <ul> <li>Organizar c\u00f3digo por funcionalidad</li> <li>Reutilizar configuraciones comunes</li> <li>Aplicar middleware espec\u00edfico</li> <li>Mantener el c\u00f3digo m\u00e1s limpio y mantenible</li> </ul>"},{"location":"tutorial/api1/07-endpoints-routers/#ventajas-de-usar-routers","title":"Ventajas de usar Routers","text":"<ol> <li>Modularidad: Cada router maneja una entidad espec\u00edfica</li> <li>Escalabilidad: F\u00e1cil agregar nuevas funcionalidades</li> <li>Mantenimiento: C\u00f3digo organizado y f\u00e1cil de encontrar</li> <li>Reutilizaci\u00f3n: Configuraciones comunes compartidas</li> <li>Testing: F\u00e1cil testear endpoints espec\u00edficos</li> </ol>"},{"location":"tutorial/api1/07-endpoints-routers/#estructura-de-routers","title":"Estructura de Routers","text":""},{"location":"tutorial/api1/07-endpoints-routers/#organizacion-recomendada","title":"Organizaci\u00f3n recomendada","text":"<pre><code>app/routers/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 users.py        # Endpoints de usuarios\n\u251c\u2500\u2500 categories.py   # Endpoints de categor\u00edas\n\u251c\u2500\u2500 items.py        # Endpoints de art\u00edculos\n\u2514\u2500\u2500 loans.py        # Endpoints de pr\u00e9stamos\n</code></pre>"},{"location":"tutorial/api1/07-endpoints-routers/#implementacion-de-routers","title":"Implementaci\u00f3n de Routers","text":""},{"location":"tutorial/api1/07-endpoints-routers/#1-router-de-usuarios-approutersuserspy","title":"1. Router de Usuarios (<code>app/routers/users.py</code>)","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException, status, Query\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\n\nfrom app.crud.users import user as crud_user\nfrom app.schemas.user import (\n    UserCreate, \n    UserResponse, \n    UserUpdate, \n    UserSearch\n)\nfrom app.database.database import get_db\nfrom app.schemas.common import PaginatedResponse\n\n# Crear el router\nrouter = APIRouter(\n    prefix=\"/users\",\n    tags=[\"users\"],\n    responses={404: {\"description\": \"Usuario no encontrado\"}}\n)\n\n@router.post(\n    \"/\", \n    response_model=UserResponse, \n    status_code=status.HTTP_201_CREATED,\n    summary=\"Crear usuario\",\n    description=\"Crear un nuevo usuario en el sistema\"\n)\ndef create_user(\n    user: UserCreate, \n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Crear un nuevo usuario.\n\n    - **username**: Nombre de usuario \u00fanico\n    - **email**: Email \u00fanico del usuario\n    - **full_name**: Nombre completo del usuario\n    - **phone**: Tel\u00e9fono del usuario (opcional)\n    \"\"\"\n    try:\n        return crud_user.create_user(db=db, user=user)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.get(\n    \"/\", \n    response_model=PaginatedResponse[UserResponse],\n    summary=\"Listar usuarios\",\n    description=\"Obtener lista paginada de usuarios\"\n)\ndef read_users(\n    skip: int = Query(0, ge=0, description=\"N\u00famero de registros a saltar\"),\n    limit: int = Query(100, ge=1, le=1000, description=\"N\u00famero m\u00e1ximo de registros\"),\n    active_only: bool = Query(False, description=\"Solo usuarios activos\"),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener lista de usuarios con paginaci\u00f3n.\n\n    - **skip**: N\u00famero de registros a saltar para paginaci\u00f3n\n    - **limit**: N\u00famero m\u00e1ximo de registros a retornar\n    - **active_only**: Si es True, solo retorna usuarios activos\n    \"\"\"\n    if active_only:\n        users = crud_user.get_active_users(db, skip=skip, limit=limit)\n    else:\n        users = crud_user.get_multi(db, skip=skip, limit=limit)\n\n    total = crud_user.count(db)\n\n    return PaginatedResponse(\n        items=users,\n        total=total,\n        skip=skip,\n        limit=limit\n    )\n\n@router.get(\n    \"/search\",\n    response_model=List[UserResponse],\n    summary=\"Buscar usuarios\",\n    description=\"Buscar usuarios por nombre, email o username\"\n)\ndef search_users(\n    q: str = Query(..., min_length=2, description=\"T\u00e9rmino de b\u00fasqueda\"),\n    skip: int = Query(0, ge=0),\n    limit: int = Query(50, ge=1, le=100),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Buscar usuarios por diferentes criterios.\n\n    - **q**: T\u00e9rmino de b\u00fasqueda (m\u00ednimo 2 caracteres)\n    - **skip**: Registros a saltar\n    - **limit**: L\u00edmite de registros\n    \"\"\"\n    return crud_user.search_users(db, query=q, skip=skip, limit=limit)\n\n@router.get(\n    \"/{user_id}\",\n    response_model=UserResponse,\n    summary=\"Obtener usuario\",\n    description=\"Obtener un usuario espec\u00edfico por ID\"\n)\ndef read_user(\n    user_id: int, \n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener un usuario espec\u00edfico por ID.\n\n    - **user_id**: ID \u00fanico del usuario\n    \"\"\"\n    user = crud_user.get(db, id=user_id)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Usuario no encontrado\"\n        )\n    return user\n\n@router.put(\n    \"/{user_id}\",\n    response_model=UserResponse,\n    summary=\"Actualizar usuario\",\n    description=\"Actualizar informaci\u00f3n de un usuario existente\"\n)\ndef update_user(\n    user_id: int,\n    user_update: UserUpdate,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Actualizar un usuario existente.\n\n    - **user_id**: ID del usuario a actualizar\n    - Solo se actualizar\u00e1n los campos proporcionados\n    \"\"\"\n    user = crud_user.get(db, id=user_id)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Usuario no encontrado\"\n        )\n\n    try:\n        return crud_user.update_user(db=db, db_obj=user, obj_in=user_update)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.delete(\n    \"/{user_id}\",\n    summary=\"Desactivar usuario\",\n    description=\"Desactivar un usuario (soft delete)\"\n)\ndef deactivate_user(\n    user_id: int,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Desactivar un usuario (no se elimina f\u00edsicamente).\n\n    - **user_id**: ID del usuario a desactivar\n    \"\"\"\n    user = crud_user.get(db, id=user_id)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Usuario no encontrado\"\n        )\n\n    crud_user.deactivate_user(db, user_id=user_id)\n    return {\"message\": \"Usuario desactivado exitosamente\"}\n\n@router.get(\n    \"/{user_id}/loans\",\n    response_model=List[dict],  # Usaremos dict por simplicidad\n    summary=\"Pr\u00e9stamos del usuario\",\n    description=\"Obtener todos los pr\u00e9stamos de un usuario\"\n)\ndef get_user_loans(\n    user_id: int,\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener pr\u00e9stamos de un usuario espec\u00edfico.\n\n    - **user_id**: ID del usuario\n    - **skip**: Registros a saltar\n    - **limit**: L\u00edmite de registros\n    \"\"\"\n    # Verificar que el usuario existe\n    user = crud_user.get(db, id=user_id)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Usuario no encontrado\"\n        )\n\n    from app.crud.loans import loan as crud_loan\n    return crud_loan.get_by_user(db, user_id=user_id, skip=skip, limit=limit)\n</code></pre>"},{"location":"tutorial/api1/07-endpoints-routers/#2-router-de-categorias-approuterscategoriespy","title":"2. Router de Categor\u00edas (<code>app/routers/categories.py</code>)","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException, status, Query\nfrom sqlalchemy.orm import Session\nfrom typing import List\n\nfrom app.crud.categories import category as crud_category\nfrom app.schemas.category import (\n    CategoryCreate, \n    CategoryResponse, \n    CategoryUpdate,\n    CategoryWithItemCount\n)\nfrom app.database.database import get_db\n\nrouter = APIRouter(\n    prefix=\"/categories\",\n    tags=[\"categories\"],\n    responses={404: {\"description\": \"Categor\u00eda no encontrada\"}}\n)\n\n@router.post(\n    \"/\", \n    response_model=CategoryResponse, \n    status_code=status.HTTP_201_CREATED,\n    summary=\"Crear categor\u00eda\",\n    description=\"Crear una nueva categor\u00eda de art\u00edculos\"\n)\ndef create_category(\n    category: CategoryCreate, \n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Crear una nueva categor\u00eda.\n\n    - **name**: Nombre \u00fanico de la categor\u00eda\n    - **description**: Descripci\u00f3n de la categor\u00eda (opcional)\n    \"\"\"\n    try:\n        return crud_category.create_category(db=db, category=category)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.get(\n    \"/\", \n    response_model=List[CategoryResponse],\n    summary=\"Listar categor\u00edas\",\n    description=\"Obtener lista de todas las categor\u00edas\"\n)\ndef read_categories(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener lista de categor\u00edas.\n\n    - **skip**: N\u00famero de registros a saltar\n    - **limit**: N\u00famero m\u00e1ximo de registros\n    \"\"\"\n    return crud_category.get_multi(db, skip=skip, limit=limit)\n\n@router.get(\n    \"/with-counts\",\n    response_model=List[CategoryWithItemCount],\n    summary=\"Categor\u00edas con conteo\",\n    description=\"Obtener categor\u00edas con el n\u00famero de art\u00edculos en cada una\"\n)\ndef read_categories_with_counts(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener categor\u00edas con el conteo de art\u00edculos.\n\n    \u00datil para mostrar estad\u00edsticas en dashboards.\n    \"\"\"\n    categories_with_counts = crud_category.get_categories_with_item_count(\n        db, skip=skip, limit=limit\n    )\n\n    return [\n        CategoryWithItemCount(\n            **category.__dict__,\n            item_count=count\n        )\n        for category, count in categories_with_counts\n    ]\n\n@router.get(\n    \"/search\",\n    response_model=List[CategoryResponse],\n    summary=\"Buscar categor\u00edas\",\n    description=\"Buscar categor\u00edas por nombre o descripci\u00f3n\"\n)\ndef search_categories(\n    q: str = Query(..., min_length=2, description=\"T\u00e9rmino de b\u00fasqueda\"),\n    skip: int = Query(0, ge=0),\n    limit: int = Query(50, ge=1, le=100),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Buscar categor\u00edas por nombre o descripci\u00f3n.\n\n    - **q**: T\u00e9rmino de b\u00fasqueda (m\u00ednimo 2 caracteres)\n    \"\"\"\n    return crud_category.search_categories(db, query=q, skip=skip, limit=limit)\n\n@router.get(\n    \"/{category_id}\",\n    response_model=CategoryResponse,\n    summary=\"Obtener categor\u00eda\",\n    description=\"Obtener una categor\u00eda espec\u00edfica por ID\"\n)\ndef read_category(\n    category_id: int, \n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener una categor\u00eda espec\u00edfica por ID.\n\n    - **category_id**: ID \u00fanico de la categor\u00eda\n    \"\"\"\n    category = crud_category.get(db, id=category_id)\n    if not category:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Categor\u00eda no encontrada\"\n        )\n    return category\n\n@router.put(\n    \"/{category_id}\",\n    response_model=CategoryResponse,\n    summary=\"Actualizar categor\u00eda\",\n    description=\"Actualizar informaci\u00f3n de una categor\u00eda existente\"\n)\ndef update_category(\n    category_id: int,\n    category_update: CategoryUpdate,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Actualizar una categor\u00eda existente.\n\n    - **category_id**: ID de la categor\u00eda a actualizar\n    - Solo se actualizar\u00e1n los campos proporcionados\n    \"\"\"\n    category = crud_category.get(db, id=category_id)\n    if not category:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Categor\u00eda no encontrada\"\n        )\n\n    try:\n        return crud_category.update_category(\n            db=db, db_obj=category, obj_in=category_update\n        )\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.delete(\n    \"/{category_id}\",\n    summary=\"Eliminar categor\u00eda\",\n    description=\"Eliminar una categor\u00eda (solo si no tiene art\u00edculos)\"\n)\ndef delete_category(\n    category_id: int,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Eliminar una categor\u00eda.\n\n    Solo se puede eliminar si no tiene art\u00edculos asociados.\n\n    - **category_id**: ID de la categor\u00eda a eliminar\n    \"\"\"\n    category = crud_category.get(db, id=category_id)\n    if not category:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Categor\u00eda no encontrada\"\n        )\n\n    if not crud_category.can_delete(db, category_id=category_id):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"No se puede eliminar la categor\u00eda porque tiene art\u00edculos asociados\"\n        )\n\n    crud_category.remove(db, id=category_id)\n    return {\"message\": \"Categor\u00eda eliminada exitosamente\"}\n\n@router.get(\n    \"/{category_id}/items\",\n    response_model=List[dict],  # Simplificado\n    summary=\"Art\u00edculos de la categor\u00eda\",\n    description=\"Obtener todos los art\u00edculos de una categor\u00eda\"\n)\ndef get_category_items(\n    category_id: int,\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener art\u00edculos de una categor\u00eda espec\u00edfica.\n\n    - **category_id**: ID de la categor\u00eda\n    - **skip**: Registros a saltar\n    - **limit**: L\u00edmite de registros\n    \"\"\"\n    # Verificar que la categor\u00eda existe\n    category = crud_category.get(db, id=category_id)\n    if not category:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Categor\u00eda no encontrada\"\n        )\n\n    from app.crud.items import item as crud_item\n    return crud_item.get_by_category(\n        db, category_id=category_id, skip=skip, limit=limit\n    )\n</code></pre>"},{"location":"tutorial/api1/07-endpoints-routers/#3-router-de-articulos-approutersitemspy","title":"3. Router de Art\u00edculos (<code>app/routers/items.py</code>)","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException, status, Query\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\n\nfrom app.crud.items import item as crud_item\nfrom app.schemas.item import (\n    ItemCreate, \n    ItemResponse, \n    ItemUpdate, \n    ItemSearch,\n    ItemStatus\n)\nfrom app.database.database import get_db\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    responses={404: {\"description\": \"Art\u00edculo no encontrado\"}}\n)\n\n@router.post(\n    \"/\", \n    response_model=ItemResponse, \n    status_code=status.HTTP_201_CREATED,\n    summary=\"Crear art\u00edculo\",\n    description=\"Crear un nuevo art\u00edculo en el inventario\"\n)\ndef create_item(\n    item: ItemCreate, \n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Crear un nuevo art\u00edculo.\n\n    - **name**: Nombre del art\u00edculo\n    - **description**: Descripci\u00f3n detallada\n    - **serial_number**: N\u00famero de serie \u00fanico\n    - **category_id**: ID de la categor\u00eda\n    - **purchase_price**: Precio de compra (opcional)\n    - **purchase_date**: Fecha de compra (opcional)\n    \"\"\"\n    try:\n        return crud_item.create_item(db=db, item=item)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.get(\n    \"/\", \n    response_model=List[ItemResponse],\n    summary=\"Listar art\u00edculos\",\n    description=\"Obtener lista de art\u00edculos con filtros opcionales\"\n)\ndef read_items(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    category_id: Optional[int] = Query(None, description=\"Filtrar por categor\u00eda\"),\n    status: Optional[ItemStatus] = Query(None, description=\"Filtrar por estado\"),\n    available_only: bool = Query(False, description=\"Solo art\u00edculos disponibles\"),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener lista de art\u00edculos con filtros opcionales.\n\n    - **skip**: Registros a saltar\n    - **limit**: L\u00edmite de registros\n    - **category_id**: Filtrar por categor\u00eda espec\u00edfica\n    - **status**: Filtrar por estado espec\u00edfico\n    - **available_only**: Solo art\u00edculos disponibles para pr\u00e9stamo\n    \"\"\"\n    if available_only:\n        return crud_item.get_available_items(db, skip=skip, limit=limit)\n    elif category_id:\n        return crud_item.get_by_category(\n            db, category_id=category_id, skip=skip, limit=limit\n        )\n    else:\n        return crud_item.get_multi(db, skip=skip, limit=limit)\n\n@router.get(\n    \"/search\",\n    response_model=List[ItemResponse],\n    summary=\"Buscar art\u00edculos\",\n    description=\"Buscar art\u00edculos con m\u00faltiples criterios\"\n)\ndef search_items(\n    name: Optional[str] = Query(None, description=\"Buscar por nombre\"),\n    serial_number: Optional[str] = Query(None, description=\"Buscar por n\u00famero de serie\"),\n    category_id: Optional[int] = Query(None, description=\"Filtrar por categor\u00eda\"),\n    status: Optional[ItemStatus] = Query(None, description=\"Filtrar por estado\"),\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Buscar art\u00edculos con m\u00faltiples criterios.\n\n    Permite combinar diferentes filtros para b\u00fasquedas espec\u00edficas.\n    \"\"\"\n    search_criteria = ItemSearch(\n        name=name,\n        serial_number=serial_number,\n        category_id=category_id,\n        status=status\n    )\n\n    return crud_item.search_items(\n        db, search=search_criteria, skip=skip, limit=limit\n    )\n\n@router.get(\n    \"/available\",\n    response_model=List[ItemResponse],\n    summary=\"Art\u00edculos disponibles\",\n    description=\"Obtener solo art\u00edculos disponibles para pr\u00e9stamo\"\n)\ndef read_available_items(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener art\u00edculos disponibles para pr\u00e9stamo.\n\n    \u00datil para mostrar opciones en formularios de pr\u00e9stamo.\n    \"\"\"\n    return crud_item.get_available_items(db, skip=skip, limit=limit)\n\n@router.get(\n    \"/{item_id}\",\n    response_model=ItemResponse,\n    summary=\"Obtener art\u00edculo\",\n    description=\"Obtener un art\u00edculo espec\u00edfico por ID\"\n)\ndef read_item(\n    item_id: int, \n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener un art\u00edculo espec\u00edfico por ID.\n\n    Incluye informaci\u00f3n de la categor\u00eda asociada.\n\n    - **item_id**: ID \u00fanico del art\u00edculo\n    \"\"\"\n    item = crud_item.get_with_category(db, item_id=item_id)\n    if not item:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Art\u00edculo no encontrado\"\n        )\n    return item\n\n@router.put(\n    \"/{item_id}\",\n    response_model=ItemResponse,\n    summary=\"Actualizar art\u00edculo\",\n    description=\"Actualizar informaci\u00f3n de un art\u00edculo existente\"\n)\ndef update_item(\n    item_id: int,\n    item_update: ItemUpdate,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Actualizar un art\u00edculo existente.\n\n    - **item_id**: ID del art\u00edculo a actualizar\n    - Solo se actualizar\u00e1n los campos proporcionados\n    \"\"\"\n    item = crud_item.get(db, id=item_id)\n    if not item:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Art\u00edculo no encontrado\"\n        )\n\n    try:\n        return crud_item.update_item(db=db, db_obj=item, obj_in=item_update)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.patch(\n    \"/{item_id}/status\",\n    response_model=ItemResponse,\n    summary=\"Actualizar estado\",\n    description=\"Actualizar solo el estado de un art\u00edculo\"\n)\ndef update_item_status(\n    item_id: int,\n    new_status: ItemStatus,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Actualizar solo el estado de un art\u00edculo.\n\n    - **item_id**: ID del art\u00edculo\n    - **new_status**: Nuevo estado del art\u00edculo\n    \"\"\"\n    item = crud_item.get(db, id=item_id)\n    if not item:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Art\u00edculo no encontrado\"\n        )\n\n    return crud_item.update_status(db, item_id=item_id, status=new_status)\n\n@router.delete(\n    \"/{item_id}\",\n    summary=\"Eliminar art\u00edculo\",\n    description=\"Eliminar un art\u00edculo (solo si no tiene pr\u00e9stamos activos)\"\n)\ndef delete_item(\n    item_id: int,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Eliminar un art\u00edculo.\n\n    Solo se puede eliminar si no tiene pr\u00e9stamos activos.\n\n    - **item_id**: ID del art\u00edculo a eliminar\n    \"\"\"\n    item = crud_item.get(db, id=item_id)\n    if not item:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Art\u00edculo no encontrado\"\n        )\n\n    if not crud_item.can_delete(db, item_id=item_id):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"No se puede eliminar el art\u00edculo porque tiene pr\u00e9stamos activos\"\n        )\n\n    crud_item.remove(db, id=item_id)\n    return {\"message\": \"Art\u00edculo eliminado exitosamente\"}\n\n@router.get(\n    \"/{item_id}/loans\",\n    response_model=List[dict],  # Simplificado\n    summary=\"Historial de pr\u00e9stamos\",\n    description=\"Obtener historial de pr\u00e9stamos de un art\u00edculo\"\n)\ndef get_item_loans(\n    item_id: int,\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener historial de pr\u00e9stamos de un art\u00edculo.\n\n    - **item_id**: ID del art\u00edculo\n    - **skip**: Registros a saltar\n    - **limit**: L\u00edmite de registros\n    \"\"\"\n    # Verificar que el art\u00edculo existe\n    item = crud_item.get(db, id=item_id)\n    if not item:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Art\u00edculo no encontrado\"\n        )\n\n    from app.crud.loans import loan as crud_loan\n    return crud_loan.get_by_item(db, item_id=item_id, skip=skip, limit=limit)\n</code></pre>"},{"location":"tutorial/api1/07-endpoints-routers/#4-router-de-prestamos-approutersloanspy","title":"4. Router de Pr\u00e9stamos (<code>app/routers/loans.py</code>)","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException, status, Query\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\nfrom datetime import datetime\n\nfrom app.crud.loans import loan as crud_loan\nfrom app.schemas.loan import (\n    LoanCreate, \n    LoanResponse, \n    LoanUpdate, \n    LoanReturn,\n    LoanStatus\n)\nfrom app.database.database import get_db\n\nrouter = APIRouter(\n    prefix=\"/loans\",\n    tags=[\"loans\"],\n    responses={404: {\"description\": \"Pr\u00e9stamo no encontrado\"}}\n)\n\n@router.post(\n    \"/\", \n    response_model=LoanResponse, \n    status_code=status.HTTP_201_CREATED,\n    summary=\"Crear pr\u00e9stamo\",\n    description=\"Crear un nuevo pr\u00e9stamo de art\u00edculo\"\n)\ndef create_loan(\n    loan: LoanCreate, \n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Crear un nuevo pr\u00e9stamo.\n\n    - **user_id**: ID del usuario que solicita el pr\u00e9stamo\n    - **item_id**: ID del art\u00edculo a prestar\n    - **due_date**: Fecha de vencimiento del pr\u00e9stamo\n    - **notes**: Notas adicionales (opcional)\n    \"\"\"\n    try:\n        return crud_loan.create_loan(db=db, loan=loan)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.get(\n    \"/\", \n    response_model=List[LoanResponse],\n    summary=\"Listar pr\u00e9stamos\",\n    description=\"Obtener lista de pr\u00e9stamos con filtros opcionales\"\n)\ndef read_loans(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    status: Optional[LoanStatus] = Query(None, description=\"Filtrar por estado\"),\n    user_id: Optional[int] = Query(None, description=\"Filtrar por usuario\"),\n    item_id: Optional[int] = Query(None, description=\"Filtrar por art\u00edculo\"),\n    overdue_only: bool = Query(False, description=\"Solo pr\u00e9stamos vencidos\"),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener lista de pr\u00e9stamos con filtros opcionales.\n\n    - **skip**: Registros a saltar\n    - **limit**: L\u00edmite de registros\n    - **status**: Filtrar por estado espec\u00edfico\n    - **user_id**: Filtrar por usuario espec\u00edfico\n    - **item_id**: Filtrar por art\u00edculo espec\u00edfico\n    - **overdue_only**: Solo pr\u00e9stamos vencidos\n    \"\"\"\n    if overdue_only:\n        return crud_loan.get_overdue_loans(db, skip=skip, limit=limit)\n    elif user_id:\n        return crud_loan.get_by_user(db, user_id=user_id, skip=skip, limit=limit)\n    elif item_id:\n        return crud_loan.get_by_item(db, item_id=item_id, skip=skip, limit=limit)\n    elif status:\n        if status == LoanStatus.ACTIVE:\n            return crud_loan.get_active_loans(db, skip=skip, limit=limit)\n        else:\n            # Para otros estados, usar filtro general\n            return crud_loan.get_multi(db, skip=skip, limit=limit)\n    else:\n        return crud_loan.get_multi(db, skip=skip, limit=limit)\n\n@router.get(\n    \"/active\",\n    response_model=List[LoanResponse],\n    summary=\"Pr\u00e9stamos activos\",\n    description=\"Obtener solo pr\u00e9stamos activos\"\n)\ndef read_active_loans(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener pr\u00e9stamos activos.\n\n    \u00datil para dashboards y reportes.\n    \"\"\"\n    return crud_loan.get_active_loans(db, skip=skip, limit=limit)\n\n@router.get(\n    \"/overdue\",\n    response_model=List[LoanResponse],\n    summary=\"Pr\u00e9stamos vencidos\",\n    description=\"Obtener pr\u00e9stamos vencidos\"\n)\ndef read_overdue_loans(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener pr\u00e9stamos vencidos.\n\n    Importante para seguimiento y gesti\u00f3n de devoluciones.\n    \"\"\"\n    return crud_loan.get_overdue_loans(db, skip=skip, limit=limit)\n\n@router.get(\n    \"/{loan_id}\",\n    response_model=LoanResponse,\n    summary=\"Obtener pr\u00e9stamo\",\n    description=\"Obtener un pr\u00e9stamo espec\u00edfico por ID\"\n)\ndef read_loan(\n    loan_id: int, \n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Obtener un pr\u00e9stamo espec\u00edfico por ID.\n\n    Incluye informaci\u00f3n detallada del usuario y art\u00edculo.\n\n    - **loan_id**: ID \u00fanico del pr\u00e9stamo\n    \"\"\"\n    loan = crud_loan.get_with_details(db, loan_id=loan_id)\n    if not loan:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Pr\u00e9stamo no encontrado\"\n        )\n    return loan\n\n@router.put(\n    \"/{loan_id}\",\n    response_model=LoanResponse,\n    summary=\"Actualizar pr\u00e9stamo\",\n    description=\"Actualizar informaci\u00f3n de un pr\u00e9stamo\"\n)\ndef update_loan(\n    loan_id: int,\n    loan_update: LoanUpdate,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Actualizar un pr\u00e9stamo existente.\n\n    - **loan_id**: ID del pr\u00e9stamo a actualizar\n    - Solo se actualizar\u00e1n los campos proporcionados\n    \"\"\"\n    loan = crud_loan.get(db, id=loan_id)\n    if not loan:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Pr\u00e9stamo no encontrado\"\n        )\n\n    return crud_loan.update(db=db, db_obj=loan, obj_in=loan_update)\n\n@router.post(\n    \"/{loan_id}/return\",\n    response_model=LoanResponse,\n    summary=\"Devolver pr\u00e9stamo\",\n    description=\"Procesar la devoluci\u00f3n de un pr\u00e9stamo\"\n)\ndef return_loan(\n    loan_id: int,\n    return_data: LoanReturn,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Procesar la devoluci\u00f3n de un pr\u00e9stamo.\n\n    - **loan_id**: ID del pr\u00e9stamo a devolver\n    - **return_date**: Fecha de devoluci\u00f3n\n    - **notes**: Notas sobre la devoluci\u00f3n (opcional)\n    \"\"\"\n    try:\n        return crud_loan.return_loan(\n            db=db, loan_id=loan_id, return_data=return_data\n        )\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.post(\n    \"/{loan_id}/extend\",\n    response_model=LoanResponse,\n    summary=\"Extender pr\u00e9stamo\",\n    description=\"Extender la fecha de vencimiento de un pr\u00e9stamo\"\n)\ndef extend_loan(\n    loan_id: int,\n    new_due_date: datetime,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Extender la fecha de vencimiento de un pr\u00e9stamo.\n\n    - **loan_id**: ID del pr\u00e9stamo a extender\n    - **new_due_date**: Nueva fecha de vencimiento\n    \"\"\"\n    try:\n        return crud_loan.extend_loan(\n            db=db, loan_id=loan_id, new_due_date=new_due_date\n        )\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.post(\n    \"/update-overdue-status\",\n    summary=\"Actualizar estados vencidos\",\n    description=\"Actualizar el estado de pr\u00e9stamos vencidos\"\n)\ndef update_overdue_status(\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Actualizar el estado de pr\u00e9stamos vencidos.\n\n    \u00datil para ejecutar como tarea programada.\n    \"\"\"\n    updated_count = crud_loan.update_overdue_status(db)\n    return {\n        \"message\": f\"Se actualizaron {updated_count} pr\u00e9stamos vencidos\",\n        \"updated_count\": updated_count\n    }\n</code></pre>"},{"location":"tutorial/api1/07-endpoints-routers/#configuracion-en-mainpy","title":"Configuraci\u00f3n en main.py","text":""},{"location":"tutorial/api1/07-endpoints-routers/#registrar-routers-en-la-aplicacion-principal","title":"Registrar routers en la aplicaci\u00f3n principal","text":"<pre><code># app/main.py\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\nfrom app.routers import users, categories, items, loans\nfrom app.database.database import engine\nfrom app.database.base import Base\nfrom app.config import settings\n\n# Crear tablas\nBase.metadata.create_all(bind=engine)\n\n# Crear aplicaci\u00f3n FastAPI\napp = FastAPI(\n    title=\"Sistema de Inventario API\",\n    description=\"API REST para gesti\u00f3n de inventario y pr\u00e9stamos\",\n    version=\"1.0.0\",\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\"\n)\n\n# Configurar CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.ALLOWED_HOSTS,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Incluir routers\napp.include_router(users.router, prefix=\"/api/v1\")\napp.include_router(categories.router, prefix=\"/api/v1\")\napp.include_router(items.router, prefix=\"/api/v1\")\napp.include_router(loans.router, prefix=\"/api/v1\")\n\n# Endpoint ra\u00edz\n@app.get(\"/\")\ndef read_root():\n    return {\n        \"message\": \"Sistema de Inventario API\",\n        \"version\": \"1.0.0\",\n        \"docs\": \"/docs\",\n        \"redoc\": \"/redoc\"\n    }\n\n# Endpoint de salud\n@app.get(\"/health\")\ndef health_check():\n    return {\"status\": \"healthy\"}\n</code></pre>"},{"location":"tutorial/api1/07-endpoints-routers/#conceptos-importantes","title":"Conceptos importantes","text":""},{"location":"tutorial/api1/07-endpoints-routers/#1-codigos-de-estado-http","title":"1. C\u00f3digos de estado HTTP","text":"<pre><code># C\u00f3digos m\u00e1s comunes en APIs REST\nstatus.HTTP_200_OK          # \u00c9xito general\nstatus.HTTP_201_CREATED     # Recurso creado\nstatus.HTTP_204_NO_CONTENT  # \u00c9xito sin contenido\nstatus.HTTP_400_BAD_REQUEST # Error del cliente\nstatus.HTTP_401_UNAUTHORIZED # No autenticado\nstatus.HTTP_403_FORBIDDEN   # No autorizado\nstatus.HTTP_404_NOT_FOUND   # Recurso no encontrado\nstatus.HTTP_422_UNPROCESSABLE_ENTITY # Error de validaci\u00f3n\nstatus.HTTP_500_INTERNAL_SERVER_ERROR # Error del servidor\n</code></pre>"},{"location":"tutorial/api1/07-endpoints-routers/#2-parametros-de-consulta-query-parameters","title":"2. Par\u00e1metros de consulta (Query Parameters)","text":"<pre><code># Diferentes tipos de par\u00e1metros\n@router.get(\"/items/\")\ndef read_items(\n    # Par\u00e1metro opcional con valor por defecto\n    skip: int = Query(0, ge=0, description=\"Registros a saltar\"),\n\n    # Par\u00e1metro con validaciones\n    limit: int = Query(100, ge=1, le=1000, description=\"L\u00edmite de registros\"),\n\n    # Par\u00e1metro opcional sin valor por defecto\n    category_id: Optional[int] = Query(None, description=\"Filtrar por categor\u00eda\"),\n\n    # Par\u00e1metro requerido\n    q: str = Query(..., min_length=2, description=\"T\u00e9rmino de b\u00fasqueda\"),\n\n    # Par\u00e1metro booleano\n    active_only: bool = Query(False, description=\"Solo activos\")\n):\n    pass\n</code></pre>"},{"location":"tutorial/api1/07-endpoints-routers/#3-parametros-de-ruta-path-parameters","title":"3. Par\u00e1metros de ruta (Path Parameters)","text":"<pre><code># Par\u00e1metros en la URL\n@router.get(\"/users/{user_id}\")\ndef read_user(\n    user_id: int,  # Autom\u00e1ticamente validado como entero\n    db: Session = Depends(get_db)\n):\n    pass\n\n# Con validaciones adicionales\nfrom fastapi import Path\n\n@router.get(\"/users/{user_id}\")\ndef read_user(\n    user_id: int = Path(..., gt=0, description=\"ID del usuario\"),\n    db: Session = Depends(get_db)\n):\n    pass\n</code></pre>"},{"location":"tutorial/api1/07-endpoints-routers/#4-manejo-de-errores","title":"4. Manejo de errores","text":"<pre><code># Patr\u00f3n est\u00e1ndar para manejo de errores\n@router.get(\"/users/{user_id}\")\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    user = crud_user.get(db, id=user_id)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Usuario no encontrado\"\n        )\n    return user\n\n# Manejo de errores de validaci\u00f3n\n@router.post(\"/users/\")\ndef create_user(user: UserCreate, db: Session = Depends(get_db)):\n    try:\n        return crud_user.create_user(db=db, user=user)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n</code></pre>"},{"location":"tutorial/api1/07-endpoints-routers/#5-documentacion-automatica","title":"5. Documentaci\u00f3n autom\u00e1tica","text":"<pre><code># Agregar metadatos para documentaci\u00f3n\n@router.post(\n    \"/users/\",\n    response_model=UserResponse,\n    status_code=status.HTTP_201_CREATED,\n    summary=\"Crear usuario\",                    # T\u00edtulo corto\n    description=\"Crear un nuevo usuario en el sistema\",  # Descripci\u00f3n\n    response_description=\"Usuario creado exitosamente\",  # Descripci\u00f3n de respuesta\n    tags=[\"users\"],                           # Agrupaci\u00f3n\n    responses={\n        400: {\"description\": \"Error de validaci\u00f3n\"},\n        409: {\"description\": \"Usuario ya existe\"}\n    }\n)\ndef create_user(user: UserCreate, db: Session = Depends(get_db)):\n    \"\"\"\n    Crear un nuevo usuario.\n\n    - **username**: Nombre de usuario \u00fanico\n    - **email**: Email \u00fanico del usuario\n    - **full_name**: Nombre completo del usuario\n    - **phone**: Tel\u00e9fono del usuario (opcional)\n    \"\"\"\n    pass\n</code></pre>"},{"location":"tutorial/api1/07-endpoints-routers/#mejores-practicas","title":"Mejores pr\u00e1cticas","text":""},{"location":"tutorial/api1/07-endpoints-routers/#1-organizacion-de-endpoints","title":"1. Organizaci\u00f3n de endpoints","text":"<ul> <li>Usar prefijos consistentes (<code>/api/v1</code>)</li> <li>Agrupar por entidad (users, items, etc.)</li> <li>Seguir convenciones REST (GET, POST, PUT, DELETE)</li> <li>Usar tags para documentaci\u00f3n</li> </ul>"},{"location":"tutorial/api1/07-endpoints-routers/#2-validacion-de-entrada","title":"2. Validaci\u00f3n de entrada","text":"<ul> <li>Validar par\u00e1metros con Query y Path</li> <li>Usar esquemas Pydantic para request body</li> <li>Manejar errores de validaci\u00f3n apropiadamente</li> <li>Proporcionar mensajes descriptivos</li> </ul>"},{"location":"tutorial/api1/07-endpoints-routers/#3-respuestas-consistentes","title":"3. Respuestas consistentes","text":"<ul> <li>Usar response_model para documentaci\u00f3n</li> <li>C\u00f3digos de estado apropiados</li> <li>Estructura consistente en respuestas de error</li> <li>Incluir metadatos \u00fatiles (paginaci\u00f3n, totales)</li> </ul>"},{"location":"tutorial/api1/07-endpoints-routers/#4-performance","title":"4. Performance","text":"<ul> <li>Paginaci\u00f3n en endpoints que retornan listas</li> <li>Filtros opcionales para reducir datos</li> <li>Lazy loading apropiado en relaciones</li> <li>L\u00edmites razonables en par\u00e1metros</li> </ul>"},{"location":"tutorial/api1/07-endpoints-routers/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<p>En el siguiente tema aprenderemos sobre middleware, autenticaci\u00f3n y autorizaci\u00f3n para proteger nuestra API.</p> <p>\ud83d\udca1 Tips importantes:</p> <ol> <li>Documentaci\u00f3n autom\u00e1tica - FastAPI genera docs autom\u00e1ticamente</li> <li>Validaci\u00f3n autom\u00e1tica - Pydantic valida datos autom\u00e1ticamente</li> <li>C\u00f3digos de estado - usar c\u00f3digos HTTP apropiados</li> <li>Manejo de errores - siempre manejar casos de error</li> <li>Paginaci\u00f3n - implementar en endpoints que retornan listas</li> </ol> <p>\ud83d\udd17 Enlaces \u00fatiles: - FastAPI Path Operations - Query Parameters - Request Body - Response Model</p>"},{"location":"tutorial/api1/08-middleware-autenticacion/","title":"Middleware, Autenticaci\u00f3n y Autorizaci\u00f3n","text":""},{"location":"tutorial/api1/08-middleware-autenticacion/#introduccion","title":"Introducci\u00f3n","text":"<p>En este tema aprenderemos sobre tres conceptos fundamentales para crear APIs seguras y robustas:</p> <ul> <li>Middleware: Funciones que se ejecutan antes/despu\u00e9s de cada request</li> <li>Autenticaci\u00f3n: Verificar la identidad del usuario</li> <li>Autorizaci\u00f3n: Verificar los permisos del usuario</li> </ul>"},{"location":"tutorial/api1/08-middleware-autenticacion/#que-es-middleware","title":"\u00bfQu\u00e9 es Middleware?","text":"<p>El middleware es c\u00f3digo que se ejecuta antes y/o despu\u00e9s de que tu endpoint procese una request. Es \u00fatil para:</p> <ul> <li>Logging de requests</li> <li>Autenticaci\u00f3n y autorizaci\u00f3n</li> <li>Manejo de CORS</li> <li>Rate limiting</li> <li>Compresi\u00f3n de respuestas</li> <li>Manejo de errores globales</li> </ul>"},{"location":"tutorial/api1/08-middleware-autenticacion/#tipos-de-middleware-en-fastapi","title":"Tipos de Middleware en FastAPI","text":"<ol> <li>Middleware de aplicaci\u00f3n: Se aplica a toda la aplicaci\u00f3n</li> <li>Middleware de router: Se aplica a un router espec\u00edfico</li> <li>Dependencies: Se aplican a endpoints espec\u00edficos</li> </ol>"},{"location":"tutorial/api1/08-middleware-autenticacion/#implementacion-de-middleware","title":"Implementaci\u00f3n de Middleware","text":""},{"location":"tutorial/api1/08-middleware-autenticacion/#1-middleware-basico","title":"1. Middleware b\u00e1sico","text":"<pre><code># app/middleware/logging.py\nimport time\nimport logging\nfrom fastapi import Request, Response\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\n# Configurar logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass LoggingMiddleware(BaseHTTPMiddleware):\n    \"\"\"\n    Middleware para logging de requests y responses.\n    \"\"\"\n\n    async def dispatch(self, request: Request, call_next):\n        # Informaci\u00f3n del request\n        start_time = time.time()\n        client_ip = request.client.host\n        method = request.method\n        url = str(request.url)\n\n        # Log del request entrante\n        logger.info(f\"Request: {method} {url} from {client_ip}\")\n\n        # Procesar el request\n        response = await call_next(request)\n\n        # Calcular tiempo de procesamiento\n        process_time = time.time() - start_time\n\n        # Log del response\n        logger.info(\n            f\"Response: {response.status_code} for {method} {url} \"\n            f\"in {process_time:.4f}s\"\n        )\n\n        # Agregar header con tiempo de procesamiento\n        response.headers[\"X-Process-Time\"] = str(process_time)\n\n        return response\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#2-middleware-de-cors-personalizado","title":"2. Middleware de CORS personalizado","text":"<pre><code># app/middleware/cors.py\nfrom fastapi import Request, Response\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom starlette.responses import Response as StarletteResponse\n\nclass CustomCORSMiddleware(BaseHTTPMiddleware):\n    \"\"\"\n    Middleware personalizado para manejo de CORS.\n    \"\"\"\n\n    def __init__(self, app, allowed_origins: list = None):\n        super().__init__(app)\n        self.allowed_origins = allowed_origins or [\"*\"]\n\n    async def dispatch(self, request: Request, call_next):\n        # Obtener el origin del request\n        origin = request.headers.get(\"origin\")\n\n        # Manejar preflight requests (OPTIONS)\n        if request.method == \"OPTIONS\":\n            response = StarletteResponse()\n        else:\n            response = await call_next(request)\n\n        # Agregar headers CORS\n        if origin and (\"*\" in self.allowed_origins or origin in self.allowed_origins):\n            response.headers[\"Access-Control-Allow-Origin\"] = origin\n\n        response.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PUT, DELETE, OPTIONS\"\n        response.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type, Authorization\"\n        response.headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n\n        return response\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#3-middleware-de-rate-limiting","title":"3. Middleware de rate limiting","text":"<pre><code># app/middleware/rate_limit.py\nimport time\nfrom collections import defaultdict\nfrom fastapi import Request, HTTPException, status\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nclass RateLimitMiddleware(BaseHTTPMiddleware):\n    \"\"\"\n    Middleware para limitar la cantidad de requests por IP.\n    \"\"\"\n\n    def __init__(self, app, calls: int = 100, period: int = 60):\n        super().__init__(app)\n        self.calls = calls  # N\u00famero de llamadas permitidas\n        self.period = period  # Per\u00edodo en segundos\n        self.clients = defaultdict(list)  # Almacenar requests por IP\n\n    async def dispatch(self, request: Request, call_next):\n        client_ip = request.client.host\n        now = time.time()\n\n        # Limpiar requests antiguos\n        self.clients[client_ip] = [\n            timestamp for timestamp in self.clients[client_ip]\n            if now - timestamp &lt; self.period\n        ]\n\n        # Verificar l\u00edmite\n        if len(self.clients[client_ip]) &gt;= self.calls:\n            raise HTTPException(\n                status_code=status.HTTP_429_TOO_MANY_REQUESTS,\n                detail=\"Rate limit exceeded\"\n            )\n\n        # Registrar el request actual\n        self.clients[client_ip].append(now)\n\n        # Procesar request\n        response = await call_next(request)\n\n        # Agregar headers informativos\n        response.headers[\"X-RateLimit-Limit\"] = str(self.calls)\n        response.headers[\"X-RateLimit-Remaining\"] = str(\n            self.calls - len(self.clients[client_ip])\n        )\n        response.headers[\"X-RateLimit-Reset\"] = str(\n            int(now + self.period)\n        )\n\n        return response\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#autenticacion","title":"Autenticaci\u00f3n","text":""},{"location":"tutorial/api1/08-middleware-autenticacion/#1-autenticacion-con-jwt","title":"1. Autenticaci\u00f3n con JWT","text":"<p>Primero, instalemos las dependencias necesarias:</p> <pre><code>pip install python-jose[cryptography] passlib[bcrypt] python-multipart\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#configuracion-de-jwt","title":"Configuraci\u00f3n de JWT","text":"<pre><code># app/auth/jwt.py\nfrom datetime import datetime, timedelta\nfrom typing import Optional\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom app.config import settings\n\n# Configuraci\u00f3n de encriptaci\u00f3n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n# Configuraci\u00f3n JWT\nSECRET_KEY = settings.SECRET_KEY\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\ndef verify_password(plain_password: str, hashed_password: str) -&gt; bool:\n    \"\"\"\n    Verificar si una contrase\u00f1a coincide con su hash.\n\n    Args:\n        plain_password: Contrase\u00f1a en texto plano\n        hashed_password: Contrase\u00f1a hasheada\n\n    Returns:\n        True si coinciden, False si no\n    \"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password: str) -&gt; str:\n    \"\"\"\n    Generar hash de una contrase\u00f1a.\n\n    Args:\n        password: Contrase\u00f1a en texto plano\n\n    Returns:\n        Hash de la contrase\u00f1a\n    \"\"\"\n    return pwd_context.hash(password)\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -&gt; str:\n    \"\"\"\n    Crear un token JWT de acceso.\n\n    Args:\n        data: Datos a incluir en el token\n        expires_delta: Tiempo de expiraci\u00f3n personalizado\n\n    Returns:\n        Token JWT como string\n    \"\"\"\n    to_encode = data.copy()\n\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n\n    return encoded_jwt\n\ndef verify_token(token: str) -&gt; Optional[dict]:\n    \"\"\"\n    Verificar y decodificar un token JWT.\n\n    Args:\n        token: Token JWT a verificar\n\n    Returns:\n        Payload del token si es v\u00e1lido, None si no\n    \"\"\"\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        return payload\n    except JWTError:\n        return None\n\ndef get_user_from_token(token: str) -&gt; Optional[str]:\n    \"\"\"\n    Obtener el username del usuario desde un token.\n\n    Args:\n        token: Token JWT\n\n    Returns:\n        Username si el token es v\u00e1lido, None si no\n    \"\"\"\n    payload = verify_token(token)\n    if payload:\n        return payload.get(\"sub\")\n    return None\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#esquemas-de-autenticacion","title":"Esquemas de autenticaci\u00f3n","text":"<pre><code># app/schemas/auth.py\nfrom pydantic import BaseModel, EmailStr\nfrom typing import Optional\n\nclass UserLogin(BaseModel):\n    \"\"\"\n    Esquema para login de usuario.\n    \"\"\"\n    username: str\n    password: str\n\nclass Token(BaseModel):\n    \"\"\"\n    Esquema para respuesta de token.\n    \"\"\"\n    access_token: str\n    token_type: str = \"bearer\"\n    expires_in: int  # Segundos hasta expiraci\u00f3n\n\nclass TokenData(BaseModel):\n    \"\"\"\n    Esquema para datos del token.\n    \"\"\"\n    username: Optional[str] = None\n\nclass UserRegister(BaseModel):\n    \"\"\"\n    Esquema para registro de usuario.\n    \"\"\"\n    username: str\n    email: EmailStr\n    full_name: str\n    password: str\n    phone: Optional[str] = None\n\nclass PasswordChange(BaseModel):\n    \"\"\"\n    Esquema para cambio de contrase\u00f1a.\n    \"\"\"\n    current_password: str\n    new_password: str\n\nclass PasswordReset(BaseModel):\n    \"\"\"\n    Esquema para reset de contrase\u00f1a.\n    \"\"\"\n    email: EmailStr\n\nclass PasswordResetConfirm(BaseModel):\n    \"\"\"\n    Esquema para confirmar reset de contrase\u00f1a.\n    \"\"\"\n    token: str\n    new_password: str\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#dependencias-de-autenticacion","title":"Dependencias de autenticaci\u00f3n","text":"<pre><code># app/auth/dependencies.py\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom sqlalchemy.orm import Session\nfrom typing import Optional\n\nfrom app.auth.jwt import get_user_from_token\nfrom app.crud.users import user as crud_user\nfrom app.database.database import get_db\nfrom app.models.user import User\n\n# Configurar esquema de seguridad\nsecurity = HTTPBearer()\n\ndef get_current_user(\n    credentials: HTTPAuthorizationCredentials = Depends(security),\n    db: Session = Depends(get_db)\n) -&gt; User:\n    \"\"\"\n    Obtener el usuario actual desde el token JWT.\n\n    Args:\n        credentials: Credenciales del header Authorization\n        db: Sesi\u00f3n de base de datos\n\n    Returns:\n        Usuario autenticado\n\n    Raises:\n        HTTPException: Si el token es inv\u00e1lido o el usuario no existe\n    \"\"\"\n    # Verificar que hay credenciales\n    if not credentials:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Token de acceso requerido\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    # Obtener username del token\n    username = get_user_from_token(credentials.credentials)\n    if not username:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Token inv\u00e1lido\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    # Obtener usuario de la base de datos\n    user = crud_user.get_by_username(db, username=username)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Usuario no encontrado\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    # Verificar que el usuario est\u00e1 activo\n    if not user.is_active:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Usuario inactivo\",\n        )\n\n    return user\n\ndef get_current_active_user(\n    current_user: User = Depends(get_current_user)\n) -&gt; User:\n    \"\"\"\n    Obtener usuario activo (alias para claridad).\n\n    Args:\n        current_user: Usuario actual\n\n    Returns:\n        Usuario activo\n    \"\"\"\n    return current_user\n\ndef get_optional_current_user(\n    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security),\n    db: Session = Depends(get_db)\n) -&gt; Optional[User]:\n    \"\"\"\n    Obtener usuario actual de forma opcional (para endpoints p\u00fablicos).\n\n    Args:\n        credentials: Credenciales opcionales\n        db: Sesi\u00f3n de base de datos\n\n    Returns:\n        Usuario si est\u00e1 autenticado, None si no\n    \"\"\"\n    if not credentials:\n        return None\n\n    try:\n        return get_current_user(credentials, db)\n    except HTTPException:\n        return None\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#router-de-autenticacion","title":"Router de autenticaci\u00f3n","text":"<pre><code># app/routers/auth.py\nfrom datetime import timedelta\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom sqlalchemy.orm import Session\n\nfrom app.auth.jwt import (\n    verify_password, \n    create_access_token, \n    get_password_hash,\n    ACCESS_TOKEN_EXPIRE_MINUTES\n)\nfrom app.auth.dependencies import get_current_user\nfrom app.crud.users import user as crud_user\nfrom app.database.database import get_db\nfrom app.schemas.auth import (\n    Token, \n    UserRegister, \n    PasswordChange,\n    PasswordReset,\n    PasswordResetConfirm\n)\nfrom app.schemas.user import UserResponse, UserCreate\nfrom app.models.user import User\n\nrouter = APIRouter(\n    prefix=\"/auth\",\n    tags=[\"authentication\"]\n)\n\n@router.post(\"/register\", response_model=UserResponse, status_code=status.HTTP_201_CREATED)\ndef register(\n    user_data: UserRegister,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Registrar un nuevo usuario.\n\n    - **username**: Nombre de usuario \u00fanico\n    - **email**: Email \u00fanico\n    - **full_name**: Nombre completo\n    - **password**: Contrase\u00f1a (ser\u00e1 hasheada)\n    - **phone**: Tel\u00e9fono (opcional)\n    \"\"\"\n    # Verificar si el usuario ya existe\n    if crud_user.get_by_username(db, username=user_data.username):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"El nombre de usuario ya est\u00e1 registrado\"\n        )\n\n    if crud_user.get_by_email(db, email=user_data.email):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"El email ya est\u00e1 registrado\"\n        )\n\n    # Hashear la contrase\u00f1a\n    hashed_password = get_password_hash(user_data.password)\n\n    # Crear usuario\n    user_create = UserCreate(\n        username=user_data.username,\n        email=user_data.email,\n        full_name=user_data.full_name,\n        phone=user_data.phone,\n        hashed_password=hashed_password\n    )\n\n    return crud_user.create(db=db, obj_in=user_create)\n\n@router.post(\"/login\", response_model=Token)\ndef login(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Iniciar sesi\u00f3n y obtener token de acceso.\n\n    - **username**: Nombre de usuario o email\n    - **password**: Contrase\u00f1a del usuario\n    \"\"\"\n    # Buscar usuario por username o email\n    user = crud_user.get_by_username(db, username=form_data.username)\n    if not user:\n        user = crud_user.get_by_email(db, email=form_data.username)\n\n    # Verificar usuario y contrase\u00f1a\n    if not user or not verify_password(form_data.password, user.hashed_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Credenciales incorrectas\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    # Verificar que el usuario est\u00e1 activo\n    if not user.is_active:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Usuario inactivo\"\n        )\n\n    # Crear token de acceso\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username},\n        expires_delta=access_token_expires\n    )\n\n    return {\n        \"access_token\": access_token,\n        \"token_type\": \"bearer\",\n        \"expires_in\": ACCESS_TOKEN_EXPIRE_MINUTES * 60\n    }\n\n@router.get(\"/me\", response_model=UserResponse)\ndef read_users_me(\n    current_user: User = Depends(get_current_user)\n):\n    \"\"\"\n    Obtener informaci\u00f3n del usuario actual.\n    \"\"\"\n    return current_user\n\n@router.post(\"/change-password\")\ndef change_password(\n    password_data: PasswordChange,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Cambiar la contrase\u00f1a del usuario actual.\n\n    - **current_password**: Contrase\u00f1a actual\n    - **new_password**: Nueva contrase\u00f1a\n    \"\"\"\n    # Verificar contrase\u00f1a actual\n    if not verify_password(password_data.current_password, current_user.hashed_password):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Contrase\u00f1a actual incorrecta\"\n        )\n\n    # Actualizar contrase\u00f1a\n    hashed_password = get_password_hash(password_data.new_password)\n    current_user.hashed_password = hashed_password\n    db.commit()\n\n    return {\"message\": \"Contrase\u00f1a actualizada exitosamente\"}\n\n@router.post(\"/logout\")\ndef logout(\n    current_user: User = Depends(get_current_user)\n):\n    \"\"\"\n    Cerrar sesi\u00f3n (en una implementaci\u00f3n real, invalidar\u00edas el token).\n    \"\"\"\n    return {\"message\": \"Sesi\u00f3n cerrada exitosamente\"}\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#autorizacion","title":"Autorizaci\u00f3n","text":""},{"location":"tutorial/api1/08-middleware-autenticacion/#1-sistema-de-roles-y-permisos","title":"1. Sistema de roles y permisos","text":"<pre><code># app/models/role.py\nfrom sqlalchemy import Column, Integer, String, Boolean, Table, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom app.database.base import BaseModel\n\n# Tabla de asociaci\u00f3n para usuarios y roles\nuser_roles = Table(\n    'user_roles',\n    BaseModel.metadata,\n    Column('user_id', Integer, ForeignKey('users.id'), primary_key=True),\n    Column('role_id', Integer, ForeignKey('roles.id'), primary_key=True)\n)\n\n# Tabla de asociaci\u00f3n para roles y permisos\nrole_permissions = Table(\n    'role_permissions',\n    BaseModel.metadata,\n    Column('role_id', Integer, ForeignKey('roles.id'), primary_key=True),\n    Column('permission_id', Integer, ForeignKey('permissions.id'), primary_key=True)\n)\n\nclass Role(BaseModel):\n    \"\"\"\n    Modelo para roles de usuario.\n    \"\"\"\n    __tablename__ = \"roles\"\n\n    name = Column(String(50), unique=True, nullable=False)\n    description = Column(String(200))\n    is_active = Column(Boolean, default=True)\n\n    # Relaciones\n    users = relationship(\"User\", secondary=user_roles, back_populates=\"roles\")\n    permissions = relationship(\"Permission\", secondary=role_permissions, back_populates=\"roles\")\n\nclass Permission(BaseModel):\n    \"\"\"\n    Modelo para permisos.\n    \"\"\"\n    __tablename__ = \"permissions\"\n\n    name = Column(String(50), unique=True, nullable=False)\n    description = Column(String(200))\n    resource = Column(String(50))  # ej: \"users\", \"items\", \"loans\"\n    action = Column(String(50))    # ej: \"create\", \"read\", \"update\", \"delete\"\n\n    # Relaciones\n    roles = relationship(\"Role\", secondary=role_permissions, back_populates=\"permissions\")\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#2-actualizar-modelo-de-usuario","title":"2. Actualizar modelo de usuario","text":"<pre><code># Agregar a app/models/user.py\nfrom sqlalchemy.orm import relationship\nfrom app.models.role import user_roles\n\nclass User(BaseModel):\n    # ... campos existentes ...\n\n    # Agregar relaci\u00f3n con roles\n    roles = relationship(\"Role\", secondary=user_roles, back_populates=\"users\")\n\n    def has_permission(self, permission_name: str) -&gt; bool:\n        \"\"\"\n        Verificar si el usuario tiene un permiso espec\u00edfico.\n\n        Args:\n            permission_name: Nombre del permiso a verificar\n\n        Returns:\n            True si tiene el permiso, False si no\n        \"\"\"\n        for role in self.roles:\n            if role.is_active:\n                for permission in role.permissions:\n                    if permission.name == permission_name:\n                        return True\n        return False\n\n    def has_role(self, role_name: str) -&gt; bool:\n        \"\"\"\n        Verificar si el usuario tiene un rol espec\u00edfico.\n\n        Args:\n            role_name: Nombre del rol a verificar\n\n        Returns:\n            True si tiene el rol, False si no\n        \"\"\"\n        for role in self.roles:\n            if role.is_active and role.name == role_name:\n                return True\n        return False\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#3-dependencias-de-autorizacion","title":"3. Dependencias de autorizaci\u00f3n","text":"<pre><code># app/auth/permissions.py\nfrom functools import wraps\nfrom fastapi import Depends, HTTPException, status\nfrom typing import List, Callable\n\nfrom app.auth.dependencies import get_current_user\nfrom app.models.user import User\n\ndef require_permissions(permissions: List[str]):\n    \"\"\"\n    Decorator para requerir permisos espec\u00edficos.\n\n    Args:\n        permissions: Lista de permisos requeridos\n\n    Returns:\n        Funci\u00f3n de dependencia\n    \"\"\"\n    def permission_checker(current_user: User = Depends(get_current_user)):\n        for permission in permissions:\n            if not current_user.has_permission(permission):\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=f\"Permiso requerido: {permission}\"\n                )\n        return current_user\n\n    return permission_checker\n\ndef require_roles(roles: List[str]):\n    \"\"\"\n    Decorator para requerir roles espec\u00edficos.\n\n    Args:\n        roles: Lista de roles requeridos (cualquiera de ellos)\n\n    Returns:\n        Funci\u00f3n de dependencia\n    \"\"\"\n    def role_checker(current_user: User = Depends(get_current_user)):\n        has_required_role = any(\n            current_user.has_role(role) for role in roles\n        )\n\n        if not has_required_role:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=f\"Rol requerido: {' o '.join(roles)}\"\n            )\n        return current_user\n\n    return role_checker\n\ndef require_admin():\n    \"\"\"\n    Dependencia para requerir rol de administrador.\n\n    Returns:\n        Funci\u00f3n de dependencia\n    \"\"\"\n    return require_roles([\"admin\"])\n\ndef require_staff():\n    \"\"\"\n    Dependencia para requerir rol de staff o admin.\n\n    Returns:\n        Funci\u00f3n de dependencia\n    \"\"\"\n    return require_roles([\"admin\", \"staff\"])\n\ndef can_modify_user(target_user_id: int):\n    \"\"\"\n    Verificar si el usuario puede modificar a otro usuario.\n\n    Args:\n        target_user_id: ID del usuario a modificar\n\n    Returns:\n        Funci\u00f3n de dependencia\n    \"\"\"\n    def user_modifier_checker(current_user: User = Depends(get_current_user)):\n        # Los admins pueden modificar cualquier usuario\n        if current_user.has_role(\"admin\"):\n            return current_user\n\n        # Los usuarios solo pueden modificarse a s\u00ed mismos\n        if current_user.id == target_user_id:\n            return current_user\n\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"No tienes permisos para modificar este usuario\"\n        )\n\n    return user_modifier_checker\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#4-uso-en-endpoints","title":"4. Uso en endpoints","text":"<pre><code># Ejemplo de uso en routers\nfrom app.auth.permissions import require_permissions, require_admin, require_staff\n\n# Endpoint que requiere permiso espec\u00edfico\n@router.post(\"/items/\", response_model=ItemResponse)\ndef create_item(\n    item: ItemCreate,\n    db: Session = Depends(get_db),\n    current_user: User = Depends(require_permissions([\"items:create\"]))\n):\n    \"\"\"\n    Crear art\u00edculo (requiere permiso items:create).\n    \"\"\"\n    return crud_item.create_item(db=db, item=item)\n\n# Endpoint que requiere rol de admin\n@router.delete(\"/users/{user_id}\")\ndef delete_user(\n    user_id: int,\n    db: Session = Depends(get_db),\n    current_user: User = Depends(require_admin())\n):\n    \"\"\"\n    Eliminar usuario (solo admins).\n    \"\"\"\n    return crud_user.remove(db=db, id=user_id)\n\n# Endpoint que requiere ser staff o admin\n@router.get(\"/reports/loans\")\ndef get_loans_report(\n    db: Session = Depends(get_db),\n    current_user: User = Depends(require_staff())\n):\n    \"\"\"\n    Obtener reporte de pr\u00e9stamos (staff o admin).\n    \"\"\"\n    return {\"message\": \"Reporte de pr\u00e9stamos\"}\n\n# Endpoint con autorizaci\u00f3n personalizada\n@router.put(\"/users/{user_id}\")\ndef update_user(\n    user_id: int,\n    user_update: UserUpdate,\n    db: Session = Depends(get_db),\n    current_user: User = Depends(can_modify_user(user_id))\n):\n    \"\"\"\n    Actualizar usuario (solo el mismo usuario o admin).\n    \"\"\"\n    user = crud_user.get(db, id=user_id)\n    return crud_user.update(db=db, db_obj=user, obj_in=user_update)\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#configuracion-en-mainpy","title":"Configuraci\u00f3n en main.py","text":"<pre><code># app/main.py\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\nfrom app.middleware.logging import LoggingMiddleware\nfrom app.middleware.rate_limit import RateLimitMiddleware\nfrom app.routers import users, categories, items, loans, auth\nfrom app.config import settings\n\napp = FastAPI(\n    title=\"Sistema de Inventario API\",\n    description=\"API REST para gesti\u00f3n de inventario y pr\u00e9stamos\",\n    version=\"1.0.0\"\n)\n\n# Agregar middleware (el orden importa)\napp.add_middleware(LoggingMiddleware)\napp.add_middleware(\n    RateLimitMiddleware,\n    calls=100,  # 100 requests\n    period=60   # por minuto\n)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.ALLOWED_HOSTS,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Incluir routers\napp.include_router(auth.router, prefix=\"/api/v1\")\napp.include_router(users.router, prefix=\"/api/v1\")\napp.include_router(categories.router, prefix=\"/api/v1\")\napp.include_router(items.router, prefix=\"/api/v1\")\napp.include_router(loans.router, prefix=\"/api/v1\")\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Sistema de Inventario API con Autenticaci\u00f3n\"}\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#mejores-practicas-de-seguridad","title":"Mejores pr\u00e1cticas de seguridad","text":""},{"location":"tutorial/api1/08-middleware-autenticacion/#1-configuracion-segura","title":"1. Configuraci\u00f3n segura","text":"<pre><code># app/config.py\nimport secrets\nfrom pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    # Generar clave secreta segura\n    SECRET_KEY: str = secrets.token_urlsafe(32)\n\n    # Configuraci\u00f3n de base de datos\n    DATABASE_URL: str = \"sqlite:///./inventory.db\"\n\n    # Configuraci\u00f3n CORS\n    ALLOWED_HOSTS: list = [\"http://localhost:3000\"]\n\n    # Configuraci\u00f3n JWT\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30\n    REFRESH_TOKEN_EXPIRE_DAYS: int = 7\n\n    # Rate limiting\n    RATE_LIMIT_CALLS: int = 100\n    RATE_LIMIT_PERIOD: int = 60\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#2-validacion-de-entrada","title":"2. Validaci\u00f3n de entrada","text":"<pre><code># Siempre validar entrada del usuario\nfrom pydantic import validator\n\nclass UserRegister(BaseModel):\n    username: str\n    password: str\n\n    @validator('username')\n    def username_must_be_alphanumeric(cls, v):\n        if not v.isalnum():\n            raise ValueError('Username debe ser alfanum\u00e9rico')\n        if len(v) &lt; 3:\n            raise ValueError('Username debe tener al menos 3 caracteres')\n        return v\n\n    @validator('password')\n    def password_must_be_strong(cls, v):\n        if len(v) &lt; 8:\n            raise ValueError('Password debe tener al menos 8 caracteres')\n        if not any(c.isupper() for c in v):\n            raise ValueError('Password debe tener al menos una may\u00fascula')\n        if not any(c.islower() for c in v):\n            raise ValueError('Password debe tener al menos una min\u00fascula')\n        if not any(c.isdigit() for c in v):\n            raise ValueError('Password debe tener al menos un n\u00famero')\n        return v\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#3-logging-de-seguridad","title":"3. Logging de seguridad","text":"<pre><code># app/middleware/security_logging.py\nimport logging\nfrom fastapi import Request\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nsecurity_logger = logging.getLogger(\"security\")\n\nclass SecurityLoggingMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        # Log intentos de autenticaci\u00f3n\n        if request.url.path.startswith(\"/api/v1/auth/\"):\n            security_logger.info(\n                f\"Auth attempt: {request.method} {request.url.path} \"\n                f\"from {request.client.host}\"\n            )\n\n        response = await call_next(request)\n\n        # Log fallos de autenticaci\u00f3n\n        if response.status_code == 401:\n            security_logger.warning(\n                f\"Auth failed: {request.method} {request.url.path} \"\n                f\"from {request.client.host}\"\n            )\n\n        # Log accesos denegados\n        if response.status_code == 403:\n            security_logger.warning(\n                f\"Access denied: {request.method} {request.url.path} \"\n                f\"from {request.client.host}\"\n            )\n\n        return response\n</code></pre>"},{"location":"tutorial/api1/08-middleware-autenticacion/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<p>En el siguiente tema aprenderemos sobre testing y c\u00f3mo escribir pruebas para nuestra API.</p> <p>\ud83d\udca1 Tips importantes:</p> <ol> <li>Nunca hardcodear secretos - usar variables de entorno</li> <li>Hashear contrase\u00f1as - nunca almacenar en texto plano</li> <li>Validar entrada - siempre validar datos del usuario</li> <li>Principio de menor privilegio - dar solo permisos necesarios</li> <li>Logging de seguridad - registrar eventos importantes</li> </ol> <p>\ud83d\udd17 Enlaces \u00fatiles: - FastAPI Security - JWT.io - OWASP API Security - Python Cryptography</p>"},{"location":"tutorial/api1/09-testing-pruebas/","title":"Testing y Pruebas","text":""},{"location":"tutorial/api1/09-testing-pruebas/#introduccion","title":"Introducci\u00f3n","text":"<p>El testing es una parte fundamental del desarrollo de software que nos permite:</p> <ul> <li>Verificar que nuestro c\u00f3digo funciona correctamente</li> <li>Prevenir errores en producci\u00f3n</li> <li>Facilitar refactoring y mantenimiento</li> <li>Documentar el comportamiento esperado</li> <li>Aumentar la confianza en nuestro c\u00f3digo</li> </ul>"},{"location":"tutorial/api1/09-testing-pruebas/#tipos-de-pruebas","title":"Tipos de pruebas","text":""},{"location":"tutorial/api1/09-testing-pruebas/#1-pruebas-unitarias","title":"1. Pruebas unitarias","text":"<ul> <li>Prueban funciones individuales o m\u00e9todos</li> <li>Son r\u00e1pidas y aisladas</li> <li>No dependen de recursos externos</li> </ul>"},{"location":"tutorial/api1/09-testing-pruebas/#2-pruebas-de-integracion","title":"2. Pruebas de integraci\u00f3n","text":"<ul> <li>Prueban interacciones entre componentes</li> <li>Incluyen base de datos, APIs externas, etc.</li> <li>Son m\u00e1s lentas pero m\u00e1s realistas</li> </ul>"},{"location":"tutorial/api1/09-testing-pruebas/#3-pruebas-end-to-end-e2e","title":"3. Pruebas end-to-end (E2E)","text":"<ul> <li>Prueban flujos completos de usuario</li> <li>Simulan comportamiento real</li> <li>Son las m\u00e1s lentas pero m\u00e1s completas</li> </ul>"},{"location":"tutorial/api1/09-testing-pruebas/#configuracion-del-entorno-de-testing","title":"Configuraci\u00f3n del entorno de testing","text":""},{"location":"tutorial/api1/09-testing-pruebas/#1-instalacion-de-dependencias","title":"1. Instalaci\u00f3n de dependencias","text":"<pre><code>pip install pytest pytest-asyncio httpx pytest-cov\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#2-estructura-de-directorios","title":"2. Estructura de directorios","text":"<pre><code>proyecto/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 routers/\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 conftest.py          # Configuraci\u00f3n compartida\n\u2502   \u251c\u2500\u2500 test_main.py         # Pruebas de la aplicaci\u00f3n principal\n\u2502   \u251c\u2500\u2500 unit/                # Pruebas unitarias\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 test_crud.py\n\u2502   \u2502   \u251c\u2500\u2500 test_auth.py\n\u2502   \u2502   \u2514\u2500\u2500 test_utils.py\n\u2502   \u2514\u2500\u2500 integration/         # Pruebas de integraci\u00f3n\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 test_users.py\n\u2502       \u251c\u2500\u2500 test_items.py\n\u2502       \u2514\u2500\u2500 test_loans.py\n\u251c\u2500\u2500 pytest.ini              # Configuraci\u00f3n de pytest\n\u2514\u2500\u2500 requirements-test.txt    # Dependencias de testing\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#3-configuracion-de-pytest","title":"3. Configuraci\u00f3n de pytest","text":"<pre><code># pytest.ini\n[tool:pytest]\nminversion = 6.0\naddopts = \n    -ra\n    -q\n    --strict-markers\n    --strict-config\n    --cov=app\n    --cov-report=term-missing\n    --cov-report=html\n    --cov-fail-under=80\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    integration: marks tests as integration tests\n    unit: marks tests as unit tests\n    auth: marks tests related to authentication\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#configuracion-de-fixtures","title":"Configuraci\u00f3n de fixtures","text":""},{"location":"tutorial/api1/09-testing-pruebas/#1-configuracion-base-conftestpy","title":"1. Configuraci\u00f3n base (conftest.py)","text":"<pre><code># tests/conftest.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom app.main import app\nfrom app.database.base import BaseModel\nfrom app.database.database import get_db\nfrom app.auth.jwt import create_access_token\nfrom app.models.user import User\nfrom app.models.category import Category\nfrom app.models.item import Item\nfrom app.models.loan import Loan\n\n# Base de datos en memoria para testing\nSQLALCHEMY_DATABASE_URL = \"sqlite:///:memory:\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\n        \"check_same_thread\": False,\n    },\n    poolclass=StaticPool,\n)\n\nTestingSessionLocal = sessionmaker(\n    autocommit=False, \n    autoflush=False, \n    bind=engine\n)\n\n@pytest.fixture(scope=\"function\")\ndef db_session():\n    \"\"\"\n    Crear una sesi\u00f3n de base de datos para testing.\n    \"\"\"\n    # Crear todas las tablas\n    BaseModel.metadata.create_all(bind=engine)\n\n    # Crear sesi\u00f3n\n    session = TestingSessionLocal()\n\n    try:\n        yield session\n    finally:\n        session.close()\n        # Limpiar todas las tablas\n        BaseModel.metadata.drop_all(bind=engine)\n\n@pytest.fixture(scope=\"function\")\ndef client(db_session):\n    \"\"\"\n    Crear un cliente de testing con base de datos de prueba.\n    \"\"\"\n    def override_get_db():\n        try:\n            yield db_session\n        finally:\n            pass\n\n    app.dependency_overrides[get_db] = override_get_db\n\n    with TestClient(app) as test_client:\n        yield test_client\n\n    # Limpiar overrides\n    app.dependency_overrides.clear()\n\n@pytest.fixture\ndef sample_user_data():\n    \"\"\"\n    Datos de ejemplo para crear usuarios.\n    \"\"\"\n    return {\n        \"username\": \"testuser\",\n        \"email\": \"test@example.com\",\n        \"full_name\": \"Test User\",\n        \"phone\": \"1234567890\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\"  # secret\n    }\n\n@pytest.fixture\ndef sample_category_data():\n    \"\"\"\n    Datos de ejemplo para crear categor\u00edas.\n    \"\"\"\n    return {\n        \"name\": \"Electr\u00f3nicos\",\n        \"description\": \"Dispositivos electr\u00f3nicos\"\n    }\n\n@pytest.fixture\ndef sample_item_data():\n    \"\"\"\n    Datos de ejemplo para crear art\u00edculos.\n    \"\"\"\n    return {\n        \"name\": \"Laptop Dell\",\n        \"description\": \"Laptop para desarrollo\",\n        \"serial_number\": \"DL123456\",\n        \"category_id\": 1\n    }\n\n@pytest.fixture\ndef create_user(db_session, sample_user_data):\n    \"\"\"\n    Crear un usuario de prueba en la base de datos.\n    \"\"\"\n    user = User(**sample_user_data)\n    db_session.add(user)\n    db_session.commit()\n    db_session.refresh(user)\n    return user\n\n@pytest.fixture\ndef create_category(db_session, sample_category_data):\n    \"\"\"\n    Crear una categor\u00eda de prueba en la base de datos.\n    \"\"\"\n    category = Category(**sample_category_data)\n    db_session.add(category)\n    db_session.commit()\n    db_session.refresh(category)\n    return category\n\n@pytest.fixture\ndef create_item(db_session, sample_item_data, create_category):\n    \"\"\"\n    Crear un art\u00edculo de prueba en la base de datos.\n    \"\"\"\n    item_data = sample_item_data.copy()\n    item_data[\"category_id\"] = create_category.id\n\n    item = Item(**item_data)\n    db_session.add(item)\n    db_session.commit()\n    db_session.refresh(item)\n    return item\n\n@pytest.fixture\ndef auth_headers(create_user):\n    \"\"\"\n    Headers de autenticaci\u00f3n para requests.\n    \"\"\"\n    access_token = create_access_token(data={\"sub\": create_user.username})\n    return {\"Authorization\": f\"Bearer {access_token}\"}\n\n@pytest.fixture\ndef admin_user(db_session):\n    \"\"\"\n    Crear un usuario administrador.\n    \"\"\"\n    admin_data = {\n        \"username\": \"admin\",\n        \"email\": \"admin@example.com\",\n        \"full_name\": \"Admin User\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"is_superuser\": True\n    }\n\n    user = User(**admin_data)\n    db_session.add(user)\n    db_session.commit()\n    db_session.refresh(user)\n    return user\n\n@pytest.fixture\ndef admin_headers(admin_user):\n    \"\"\"\n    Headers de autenticaci\u00f3n para admin.\n    \"\"\"\n    access_token = create_access_token(data={\"sub\": admin_user.username})\n    return {\"Authorization\": f\"Bearer {access_token}\"}\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#pruebas-unitarias","title":"Pruebas unitarias","text":""},{"location":"tutorial/api1/09-testing-pruebas/#1-testing-de-operaciones-crud","title":"1. Testing de operaciones CRUD","text":"<pre><code># tests/unit/test_crud.py\nimport pytest\nfrom sqlalchemy.orm import Session\n\nfrom app.crud.users import user as crud_user\nfrom app.crud.categories import category as crud_category\nfrom app.crud.items import item as crud_item\nfrom app.schemas.user import UserCreate, UserUpdate\nfrom app.schemas.category import CategoryCreate, CategoryUpdate\nfrom app.schemas.item import ItemCreate, ItemUpdate\n\nclass TestUserCRUD:\n    \"\"\"\n    Pruebas para operaciones CRUD de usuarios.\n    \"\"\"\n\n    def test_create_user(self, db_session: Session):\n        \"\"\"\n        Probar creaci\u00f3n de usuario.\n        \"\"\"\n        user_data = UserCreate(\n            username=\"newuser\",\n            email=\"newuser@example.com\",\n            full_name=\"New User\",\n            hashed_password=\"hashedpassword\"\n        )\n\n        user = crud_user.create(db_session, obj_in=user_data)\n\n        assert user.username == \"newuser\"\n        assert user.email == \"newuser@example.com\"\n        assert user.full_name == \"New User\"\n        assert user.id is not None\n        assert user.created_at is not None\n\n    def test_get_user_by_id(self, db_session: Session, create_user):\n        \"\"\"\n        Probar obtenci\u00f3n de usuario por ID.\n        \"\"\"\n        user = crud_user.get(db_session, id=create_user.id)\n\n        assert user is not None\n        assert user.id == create_user.id\n        assert user.username == create_user.username\n\n    def test_get_user_by_username(self, db_session: Session, create_user):\n        \"\"\"\n        Probar obtenci\u00f3n de usuario por username.\n        \"\"\"\n        user = crud_user.get_by_username(db_session, username=create_user.username)\n\n        assert user is not None\n        assert user.username == create_user.username\n\n    def test_get_user_by_email(self, db_session: Session, create_user):\n        \"\"\"\n        Probar obtenci\u00f3n de usuario por email.\n        \"\"\"\n        user = crud_user.get_by_email(db_session, email=create_user.email)\n\n        assert user is not None\n        assert user.email == create_user.email\n\n    def test_update_user(self, db_session: Session, create_user):\n        \"\"\"\n        Probar actualizaci\u00f3n de usuario.\n        \"\"\"\n        update_data = UserUpdate(\n            full_name=\"Updated Name\",\n            phone=\"9876543210\"\n        )\n\n        updated_user = crud_user.update(\n            db_session, \n            db_obj=create_user, \n            obj_in=update_data\n        )\n\n        assert updated_user.full_name == \"Updated Name\"\n        assert updated_user.phone == \"9876543210\"\n        assert updated_user.username == create_user.username  # No cambi\u00f3\n\n    def test_delete_user(self, db_session: Session, create_user):\n        \"\"\"\n        Probar eliminaci\u00f3n de usuario.\n        \"\"\"\n        user_id = create_user.id\n\n        deleted_user = crud_user.remove(db_session, id=user_id)\n\n        assert deleted_user.id == user_id\n\n        # Verificar que ya no existe\n        user = crud_user.get(db_session, id=user_id)\n        assert user is None\n\n    def test_get_multi_users(self, db_session: Session):\n        \"\"\"\n        Probar obtenci\u00f3n de m\u00faltiples usuarios.\n        \"\"\"\n        # Crear varios usuarios\n        for i in range(3):\n            user_data = UserCreate(\n                username=f\"user{i}\",\n                email=f\"user{i}@example.com\",\n                full_name=f\"User {i}\",\n                hashed_password=\"hashedpassword\"\n            )\n            crud_user.create(db_session, obj_in=user_data)\n\n        users = crud_user.get_multi(db_session, skip=0, limit=10)\n\n        assert len(users) == 3\n        assert all(user.username.startswith(\"user\") for user in users)\n\nclass TestCategoryCRUD:\n    \"\"\"\n    Pruebas para operaciones CRUD de categor\u00edas.\n    \"\"\"\n\n    def test_create_category(self, db_session: Session):\n        \"\"\"\n        Probar creaci\u00f3n de categor\u00eda.\n        \"\"\"\n        category_data = CategoryCreate(\n            name=\"Test Category\",\n            description=\"Test Description\"\n        )\n\n        category = crud_category.create(db_session, obj_in=category_data)\n\n        assert category.name == \"Test Category\"\n        assert category.description == \"Test Description\"\n        assert category.id is not None\n\n    def test_get_category_by_name(self, db_session: Session, create_category):\n        \"\"\"\n        Probar obtenci\u00f3n de categor\u00eda por nombre.\n        \"\"\"\n        category = crud_category.get_by_name(db_session, name=create_category.name)\n\n        assert category is not None\n        assert category.name == create_category.name\n\nclass TestItemCRUD:\n    \"\"\"\n    Pruebas para operaciones CRUD de art\u00edculos.\n    \"\"\"\n\n    def test_create_item(self, db_session: Session, create_category):\n        \"\"\"\n        Probar creaci\u00f3n de art\u00edculo.\n        \"\"\"\n        item_data = ItemCreate(\n            name=\"Test Item\",\n            description=\"Test Description\",\n            serial_number=\"TEST123\",\n            category_id=create_category.id\n        )\n\n        item = crud_item.create(db_session, obj_in=item_data)\n\n        assert item.name == \"Test Item\"\n        assert item.serial_number == \"TEST123\"\n        assert item.category_id == create_category.id\n\n    def test_get_item_by_serial(self, db_session: Session, create_item):\n        \"\"\"\n        Probar obtenci\u00f3n de art\u00edculo por n\u00famero de serie.\n        \"\"\"\n        item = crud_item.get_by_serial_number(\n            db_session, \n            serial_number=create_item.serial_number\n        )\n\n        assert item is not None\n        assert item.serial_number == create_item.serial_number\n\n    def test_get_items_by_category(self, db_session: Session, create_category):\n        \"\"\"\n        Probar obtenci\u00f3n de art\u00edculos por categor\u00eda.\n        \"\"\"\n        # Crear varios art\u00edculos en la misma categor\u00eda\n        for i in range(3):\n            item_data = ItemCreate(\n                name=f\"Item {i}\",\n                description=f\"Description {i}\",\n                serial_number=f\"SERIAL{i}\",\n                category_id=create_category.id\n            )\n            crud_item.create(db_session, obj_in=item_data)\n\n        items = crud_item.get_by_category(db_session, category_id=create_category.id)\n\n        assert len(items) == 3\n        assert all(item.category_id == create_category.id for item in items)\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#2-testing-de-autenticacion","title":"2. Testing de autenticaci\u00f3n","text":"<pre><code># tests/unit/test_auth.py\nimport pytest\nfrom datetime import datetime, timedelta\n\nfrom app.auth.jwt import (\n    create_access_token,\n    verify_token,\n    get_user_from_token,\n    verify_password,\n    get_password_hash\n)\n\nclass TestJWTFunctions:\n    \"\"\"\n    Pruebas para funciones JWT.\n    \"\"\"\n\n    def test_create_access_token(self):\n        \"\"\"\n        Probar creaci\u00f3n de token de acceso.\n        \"\"\"\n        data = {\"sub\": \"testuser\"}\n        token = create_access_token(data)\n\n        assert isinstance(token, str)\n        assert len(token) &gt; 0\n\n    def test_create_access_token_with_expiration(self):\n        \"\"\"\n        Probar creaci\u00f3n de token con expiraci\u00f3n personalizada.\n        \"\"\"\n        data = {\"sub\": \"testuser\"}\n        expires_delta = timedelta(minutes=15)\n        token = create_access_token(data, expires_delta)\n\n        payload = verify_token(token)\n        assert payload is not None\n        assert payload[\"sub\"] == \"testuser\"\n\n    def test_verify_valid_token(self):\n        \"\"\"\n        Probar verificaci\u00f3n de token v\u00e1lido.\n        \"\"\"\n        data = {\"sub\": \"testuser\"}\n        token = create_access_token(data)\n\n        payload = verify_token(token)\n\n        assert payload is not None\n        assert payload[\"sub\"] == \"testuser\"\n        assert \"exp\" in payload\n\n    def test_verify_invalid_token(self):\n        \"\"\"\n        Probar verificaci\u00f3n de token inv\u00e1lido.\n        \"\"\"\n        invalid_token = \"invalid.token.here\"\n\n        payload = verify_token(invalid_token)\n\n        assert payload is None\n\n    def test_get_user_from_token(self):\n        \"\"\"\n        Probar obtenci\u00f3n de usuario desde token.\n        \"\"\"\n        username = \"testuser\"\n        data = {\"sub\": username}\n        token = create_access_token(data)\n\n        extracted_username = get_user_from_token(token)\n\n        assert extracted_username == username\n\n    def test_get_user_from_invalid_token(self):\n        \"\"\"\n        Probar obtenci\u00f3n de usuario desde token inv\u00e1lido.\n        \"\"\"\n        invalid_token = \"invalid.token.here\"\n\n        username = get_user_from_token(invalid_token)\n\n        assert username is None\n\nclass TestPasswordFunctions:\n    \"\"\"\n    Pruebas para funciones de contrase\u00f1as.\n    \"\"\"\n\n    def test_password_hashing(self):\n        \"\"\"\n        Probar hash de contrase\u00f1a.\n        \"\"\"\n        password = \"testpassword123\"\n\n        hashed = get_password_hash(password)\n\n        assert hashed != password\n        assert len(hashed) &gt; 0\n        assert hashed.startswith(\"$2b$\")\n\n    def test_password_verification_success(self):\n        \"\"\"\n        Probar verificaci\u00f3n exitosa de contrase\u00f1a.\n        \"\"\"\n        password = \"testpassword123\"\n        hashed = get_password_hash(password)\n\n        is_valid = verify_password(password, hashed)\n\n        assert is_valid is True\n\n    def test_password_verification_failure(self):\n        \"\"\"\n        Probar verificaci\u00f3n fallida de contrase\u00f1a.\n        \"\"\"\n        password = \"testpassword123\"\n        wrong_password = \"wrongpassword\"\n        hashed = get_password_hash(password)\n\n        is_valid = verify_password(wrong_password, hashed)\n\n        assert is_valid is False\n\n    def test_different_passwords_different_hashes(self):\n        \"\"\"\n        Probar que contrase\u00f1as diferentes generan hashes diferentes.\n        \"\"\"\n        password1 = \"password123\"\n        password2 = \"password456\"\n\n        hash1 = get_password_hash(password1)\n        hash2 = get_password_hash(password2)\n\n        assert hash1 != hash2\n\n    def test_same_password_different_hashes(self):\n        \"\"\"\n        Probar que la misma contrase\u00f1a genera hashes diferentes (salt).\n        \"\"\"\n        password = \"testpassword123\"\n\n        hash1 = get_password_hash(password)\n        hash2 = get_password_hash(password)\n\n        # Los hashes deben ser diferentes debido al salt\n        assert hash1 != hash2\n\n        # Pero ambos deben verificar correctamente\n        assert verify_password(password, hash1)\n        assert verify_password(password, hash2)\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#pruebas-de-integracion","title":"Pruebas de integraci\u00f3n","text":""},{"location":"tutorial/api1/09-testing-pruebas/#1-testing-de-endpoints-de-usuarios","title":"1. Testing de endpoints de usuarios","text":"<pre><code># tests/integration/test_users.py\nimport pytest\nfrom fastapi.testclient import TestClient\n\nclass TestUserEndpoints:\n    \"\"\"\n    Pruebas de integraci\u00f3n para endpoints de usuarios.\n    \"\"\"\n\n    def test_create_user_success(self, client: TestClient):\n        \"\"\"\n        Probar creaci\u00f3n exitosa de usuario.\n        \"\"\"\n        user_data = {\n            \"username\": \"newuser\",\n            \"email\": \"newuser@example.com\",\n            \"full_name\": \"New User\",\n            \"password\": \"testpassword123\"\n        }\n\n        response = client.post(\"/api/v1/auth/register\", json=user_data)\n\n        assert response.status_code == 201\n        data = response.json()\n        assert data[\"username\"] == \"newuser\"\n        assert data[\"email\"] == \"newuser@example.com\"\n        assert \"id\" in data\n        assert \"hashed_password\" not in data  # No debe exponer la contrase\u00f1a\n\n    def test_create_user_duplicate_username(self, client: TestClient, create_user):\n        \"\"\"\n        Probar error al crear usuario con username duplicado.\n        \"\"\"\n        user_data = {\n            \"username\": create_user.username,  # Username ya existe\n            \"email\": \"different@example.com\",\n            \"full_name\": \"Different User\",\n            \"password\": \"testpassword123\"\n        }\n\n        response = client.post(\"/api/v1/auth/register\", json=user_data)\n\n        assert response.status_code == 400\n        assert \"ya est\u00e1 registrado\" in response.json()[\"detail\"]\n\n    def test_create_user_duplicate_email(self, client: TestClient, create_user):\n        \"\"\"\n        Probar error al crear usuario con email duplicado.\n        \"\"\"\n        user_data = {\n            \"username\": \"differentuser\",\n            \"email\": create_user.email,  # Email ya existe\n            \"full_name\": \"Different User\",\n            \"password\": \"testpassword123\"\n        }\n\n        response = client.post(\"/api/v1/auth/register\", json=user_data)\n\n        assert response.status_code == 400\n        assert \"ya est\u00e1 registrado\" in response.json()[\"detail\"]\n\n    def test_get_users_without_auth(self, client: TestClient):\n        \"\"\"\n        Probar acceso a usuarios sin autenticaci\u00f3n.\n        \"\"\"\n        response = client.get(\"/api/v1/users/\")\n\n        assert response.status_code == 401\n\n    def test_get_users_with_auth(self, client: TestClient, auth_headers):\n        \"\"\"\n        Probar obtenci\u00f3n de usuarios con autenticaci\u00f3n.\n        \"\"\"\n        response = client.get(\"/api/v1/users/\", headers=auth_headers)\n\n        assert response.status_code == 200\n        data = response.json()\n        assert isinstance(data, list)\n\n    def test_get_user_by_id(self, client: TestClient, auth_headers, create_user):\n        \"\"\"\n        Probar obtenci\u00f3n de usuario por ID.\n        \"\"\"\n        response = client.get(\n            f\"/api/v1/users/{create_user.id}\", \n            headers=auth_headers\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert data[\"id\"] == create_user.id\n        assert data[\"username\"] == create_user.username\n\n    def test_get_user_not_found(self, client: TestClient, auth_headers):\n        \"\"\"\n        Probar obtenci\u00f3n de usuario inexistente.\n        \"\"\"\n        response = client.get(\"/api/v1/users/999\", headers=auth_headers)\n\n        assert response.status_code == 404\n\n    def test_update_user_success(self, client: TestClient, auth_headers, create_user):\n        \"\"\"\n        Probar actualizaci\u00f3n exitosa de usuario.\n        \"\"\"\n        update_data = {\n            \"full_name\": \"Updated Name\",\n            \"phone\": \"9876543210\"\n        }\n\n        response = client.put(\n            f\"/api/v1/users/{create_user.id}\",\n            json=update_data,\n            headers=auth_headers\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert data[\"full_name\"] == \"Updated Name\"\n        assert data[\"phone\"] == \"9876543210\"\n\n    def test_delete_user_success(self, client: TestClient, admin_headers, create_user):\n        \"\"\"\n        Probar eliminaci\u00f3n exitosa de usuario (solo admin).\n        \"\"\"\n        response = client.delete(\n            f\"/api/v1/users/{create_user.id}\",\n            headers=admin_headers\n        )\n\n        assert response.status_code == 200\n\n        # Verificar que el usuario ya no existe\n        response = client.get(\n            f\"/api/v1/users/{create_user.id}\",\n            headers=admin_headers\n        )\n        assert response.status_code == 404\n\nclass TestUserAuthentication:\n    \"\"\"\n    Pruebas de autenticaci\u00f3n de usuarios.\n    \"\"\"\n\n    def test_login_success(self, client: TestClient, create_user):\n        \"\"\"\n        Probar login exitoso.\n        \"\"\"\n        login_data = {\n            \"username\": create_user.username,\n            \"password\": \"secret\"  # Contrase\u00f1a del fixture\n        }\n\n        response = client.post(\n            \"/api/v1/auth/login\",\n            data=login_data,  # OAuth2PasswordRequestForm usa form data\n            headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert \"access_token\" in data\n        assert data[\"token_type\"] == \"bearer\"\n        assert \"expires_in\" in data\n\n    def test_login_invalid_username(self, client: TestClient):\n        \"\"\"\n        Probar login con username inv\u00e1lido.\n        \"\"\"\n        login_data = {\n            \"username\": \"nonexistent\",\n            \"password\": \"secret\"\n        }\n\n        response = client.post(\n            \"/api/v1/auth/login\",\n            data=login_data,\n            headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}\n        )\n\n        assert response.status_code == 401\n        assert \"Credenciales incorrectas\" in response.json()[\"detail\"]\n\n    def test_login_invalid_password(self, client: TestClient, create_user):\n        \"\"\"\n        Probar login con contrase\u00f1a inv\u00e1lida.\n        \"\"\"\n        login_data = {\n            \"username\": create_user.username,\n            \"password\": \"wrongpassword\"\n        }\n\n        response = client.post(\n            \"/api/v1/auth/login\",\n            data=login_data,\n            headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}\n        )\n\n        assert response.status_code == 401\n        assert \"Credenciales incorrectas\" in response.json()[\"detail\"]\n\n    def test_get_current_user(self, client: TestClient, auth_headers):\n        \"\"\"\n        Probar obtenci\u00f3n de usuario actual.\n        \"\"\"\n        response = client.get(\"/api/v1/auth/me\", headers=auth_headers)\n\n        assert response.status_code == 200\n        data = response.json()\n        assert \"username\" in data\n        assert \"email\" in data\n        assert \"id\" in data\n\n    def test_get_current_user_invalid_token(self, client: TestClient):\n        \"\"\"\n        Probar obtenci\u00f3n de usuario actual con token inv\u00e1lido.\n        \"\"\"\n        invalid_headers = {\"Authorization\": \"Bearer invalid_token\"}\n\n        response = client.get(\"/api/v1/auth/me\", headers=invalid_headers)\n\n        assert response.status_code == 401\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#2-testing-de-endpoints-de-articulos","title":"2. Testing de endpoints de art\u00edculos","text":"<pre><code># tests/integration/test_items.py\nimport pytest\nfrom fastapi.testclient import TestClient\n\nclass TestItemEndpoints:\n    \"\"\"\n    Pruebas de integraci\u00f3n para endpoints de art\u00edculos.\n    \"\"\"\n\n    def test_create_item_success(self, client: TestClient, auth_headers, create_category):\n        \"\"\"\n        Probar creaci\u00f3n exitosa de art\u00edculo.\n        \"\"\"\n        item_data = {\n            \"name\": \"Test Item\",\n            \"description\": \"Test Description\",\n            \"serial_number\": \"TEST123\",\n            \"category_id\": create_category.id\n        }\n\n        response = client.post(\n            \"/api/v1/items/\",\n            json=item_data,\n            headers=auth_headers\n        )\n\n        assert response.status_code == 201\n        data = response.json()\n        assert data[\"name\"] == \"Test Item\"\n        assert data[\"serial_number\"] == \"TEST123\"\n        assert data[\"category_id\"] == create_category.id\n        assert \"id\" in data\n\n    def test_create_item_duplicate_serial(self, client: TestClient, auth_headers, create_item):\n        \"\"\"\n        Probar error al crear art\u00edculo con n\u00famero de serie duplicado.\n        \"\"\"\n        item_data = {\n            \"name\": \"Different Item\",\n            \"description\": \"Different Description\",\n            \"serial_number\": create_item.serial_number,  # Serial duplicado\n            \"category_id\": create_item.category_id\n        }\n\n        response = client.post(\n            \"/api/v1/items/\",\n            json=item_data,\n            headers=auth_headers\n        )\n\n        assert response.status_code == 400\n        assert \"ya existe\" in response.json()[\"detail\"]\n\n    def test_get_items(self, client: TestClient, auth_headers):\n        \"\"\"\n        Probar obtenci\u00f3n de lista de art\u00edculos.\n        \"\"\"\n        response = client.get(\"/api/v1/items/\", headers=auth_headers)\n\n        assert response.status_code == 200\n        data = response.json()\n        assert isinstance(data, list)\n\n    def test_get_item_by_id(self, client: TestClient, auth_headers, create_item):\n        \"\"\"\n        Probar obtenci\u00f3n de art\u00edculo por ID.\n        \"\"\"\n        response = client.get(\n            f\"/api/v1/items/{create_item.id}\",\n            headers=auth_headers\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert data[\"id\"] == create_item.id\n        assert data[\"name\"] == create_item.name\n\n    def test_search_items(self, client: TestClient, auth_headers, create_item):\n        \"\"\"\n        Probar b\u00fasqueda de art\u00edculos.\n        \"\"\"\n        response = client.get(\n            f\"/api/v1/items/search?q={create_item.name[:4]}\",\n            headers=auth_headers\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert isinstance(data, list)\n        assert len(data) &gt; 0\n        assert any(item[\"id\"] == create_item.id for item in data)\n\n    def test_update_item(self, client: TestClient, auth_headers, create_item):\n        \"\"\"\n        Probar actualizaci\u00f3n de art\u00edculo.\n        \"\"\"\n        update_data = {\n            \"name\": \"Updated Item\",\n            \"description\": \"Updated Description\"\n        }\n\n        response = client.put(\n            f\"/api/v1/items/{create_item.id}\",\n            json=update_data,\n            headers=auth_headers\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert data[\"name\"] == \"Updated Item\"\n        assert data[\"description\"] == \"Updated Description\"\n\n    def test_delete_item(self, client: TestClient, admin_headers, create_item):\n        \"\"\"\n        Probar eliminaci\u00f3n de art\u00edculo.\n        \"\"\"\n        response = client.delete(\n            f\"/api/v1/items/{create_item.id}\",\n            headers=admin_headers\n        )\n\n        assert response.status_code == 200\n\n        # Verificar que el art\u00edculo ya no existe\n        response = client.get(\n            f\"/api/v1/items/{create_item.id}\",\n            headers=admin_headers\n        )\n        assert response.status_code == 404\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#pruebas-de-rendimiento","title":"Pruebas de rendimiento","text":""},{"location":"tutorial/api1/09-testing-pruebas/#1-testing-de-carga","title":"1. Testing de carga","text":"<pre><code># tests/performance/test_load.py\nimport pytest\nimport time\nimport asyncio\nfrom concurrent.futures import ThreadPoolExecutor\nfrom fastapi.testclient import TestClient\n\n@pytest.mark.slow\nclass TestPerformance:\n    \"\"\"\n    Pruebas de rendimiento y carga.\n    \"\"\"\n\n    def test_concurrent_user_creation(self, client: TestClient):\n        \"\"\"\n        Probar creaci\u00f3n concurrente de usuarios.\n        \"\"\"\n        def create_user(index):\n            user_data = {\n                \"username\": f\"user{index}\",\n                \"email\": f\"user{index}@example.com\",\n                \"full_name\": f\"User {index}\",\n                \"password\": \"testpassword123\"\n            }\n\n            start_time = time.time()\n            response = client.post(\"/api/v1/auth/register\", json=user_data)\n            end_time = time.time()\n\n            return {\n                \"status_code\": response.status_code,\n                \"response_time\": end_time - start_time,\n                \"index\": index\n            }\n\n        # Crear 10 usuarios concurrentemente\n        with ThreadPoolExecutor(max_workers=5) as executor:\n            futures = [executor.submit(create_user, i) for i in range(10)]\n            results = [future.result() for future in futures]\n\n        # Verificar resultados\n        successful_requests = [r for r in results if r[\"status_code\"] == 201]\n        assert len(successful_requests) == 10\n\n        # Verificar tiempos de respuesta\n        avg_response_time = sum(r[\"response_time\"] for r in results) / len(results)\n        assert avg_response_time &lt; 1.0  # Menos de 1 segundo promedio\n\n    def test_api_response_time(self, client: TestClient, auth_headers):\n        \"\"\"\n        Probar tiempos de respuesta de la API.\n        \"\"\"\n        endpoints = [\n            \"/api/v1/users/\",\n            \"/api/v1/categories/\",\n            \"/api/v1/items/\",\n            \"/api/v1/loans/\"\n        ]\n\n        response_times = []\n\n        for endpoint in endpoints:\n            start_time = time.time()\n            response = client.get(endpoint, headers=auth_headers)\n            end_time = time.time()\n\n            response_time = end_time - start_time\n            response_times.append(response_time)\n\n            assert response.status_code == 200\n            assert response_time &lt; 0.5  # Menos de 500ms\n\n        avg_response_time = sum(response_times) / len(response_times)\n        assert avg_response_time &lt; 0.3  # Menos de 300ms promedio\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#comandos-utiles-para-testing","title":"Comandos \u00fatiles para testing","text":""},{"location":"tutorial/api1/09-testing-pruebas/#1-ejecutar-todas-las-pruebas","title":"1. Ejecutar todas las pruebas","text":"<pre><code># Ejecutar todas las pruebas\npytest\n\n# Ejecutar con verbose\npytest -v\n\n# Ejecutar con coverage\npytest --cov=app\n\n# Ejecutar solo pruebas unitarias\npytest tests/unit/\n\n# Ejecutar solo pruebas de integraci\u00f3n\npytest tests/integration/\n\n# Ejecutar pruebas espec\u00edficas\npytest tests/unit/test_crud.py::TestUserCRUD::test_create_user\n\n# Ejecutar pruebas con marcadores\npytest -m \"not slow\"  # Excluir pruebas lentas\npytest -m \"unit\"      # Solo pruebas unitarias\npytest -m \"auth\"      # Solo pruebas de autenticaci\u00f3n\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#2-generar-reportes","title":"2. Generar reportes","text":"<pre><code># Generar reporte HTML de coverage\npytest --cov=app --cov-report=html\n\n# Generar reporte XML para CI/CD\npytest --cov=app --cov-report=xml --junitxml=test-results.xml\n\n# Ejecutar con profiling\npytest --profile\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#3-debugging","title":"3. Debugging","text":"<pre><code># Ejecutar con debugging\npytest --pdb\n\n# Parar en el primer fallo\npytest -x\n\n# Mostrar output de print\npytest -s\n\n# Ejecutar en paralelo\npytest -n auto\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#integracion-con-cicd","title":"Integraci\u00f3n con CI/CD","text":""},{"location":"tutorial/api1/09-testing-pruebas/#1-github-actions","title":"1. GitHub Actions","text":"<pre><code># .github/workflows/test.yml\nname: Tests\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install -r requirements-test.txt\n\n    - name: Run tests\n      run: |\n        pytest --cov=app --cov-report=xml --junitxml=test-results.xml\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        fail_ci_if_error: true\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#2-pre-commit-hooks","title":"2. Pre-commit hooks","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: tests\n        name: Run tests\n        entry: pytest\n        language: system\n        pass_filenames: false\n        always_run: true\n\n      - id: coverage\n        name: Check coverage\n        entry: pytest --cov=app --cov-fail-under=80\n        language: system\n        pass_filenames: false\n        always_run: true\n</code></pre>"},{"location":"tutorial/api1/09-testing-pruebas/#mejores-practicas","title":"Mejores pr\u00e1cticas","text":""},{"location":"tutorial/api1/09-testing-pruebas/#1-organizacion-de-pruebas","title":"1. Organizaci\u00f3n de pruebas","text":"<ul> <li>Separar por tipo (unit, integration, e2e)</li> <li>Usar fixtures para datos de prueba</li> <li>Nombrar descriptivamente</li> <li>Documentar casos complejos</li> </ul>"},{"location":"tutorial/api1/09-testing-pruebas/#2-datos-de-prueba","title":"2. Datos de prueba","text":"<ul> <li>Usar factories para generar datos</li> <li>Limpiar despu\u00e9s de cada prueba</li> <li>Aislar pruebas entre s\u00ed</li> <li>Usar base de datos en memoria</li> </ul>"},{"location":"tutorial/api1/09-testing-pruebas/#3-assertions","title":"3. Assertions","text":"<ul> <li>Ser espec\u00edfico en las assertions</li> <li>Verificar tanto \u00e9xito como fallo</li> <li>Probar casos l\u00edmite</li> <li>Incluir mensajes descriptivos</li> </ul>"},{"location":"tutorial/api1/09-testing-pruebas/#4-coverage","title":"4. Coverage","text":"<ul> <li>Apuntar a 80%+ de coverage</li> <li>No obsesionarse con 100%</li> <li>Priorizar c\u00f3digo cr\u00edtico</li> <li>Revisar reportes regularmente</li> </ul>"},{"location":"tutorial/api1/09-testing-pruebas/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<p>En el siguiente tema aprenderemos sobre deployment y c\u00f3mo llevar nuestra API a producci\u00f3n.</p> <p>\ud83d\udca1 Tips importantes:</p> <ol> <li>Escribir pruebas primero (TDD) cuando sea posible</li> <li>Mantener pruebas simples y enfocadas</li> <li>Usar mocks para dependencias externas</li> <li>Automatizar ejecuci\u00f3n de pruebas</li> <li>Revisar coverage regularmente</li> </ol> <p>\ud83d\udd17 Enlaces \u00fatiles: - Pytest Documentation - FastAPI Testing - Coverage.py - Testing Best Practices</p>"},{"location":"tutorial/api1/10-deployment-produccion/","title":"Deployment y Producci\u00f3n","text":""},{"location":"tutorial/api1/10-deployment-produccion/#introduccion","title":"Introducci\u00f3n","text":"<p>En este tema aprenderemos c\u00f3mo llevar nuestra API FastAPI a producci\u00f3n de manera segura y eficiente. Cubriremos:</p> <ul> <li>Preparaci\u00f3n para producci\u00f3n</li> <li>Configuraci\u00f3n de entornos</li> <li>Deployment en diferentes plataformas</li> <li>Monitoreo y logging</li> <li>Optimizaci\u00f3n de rendimiento</li> <li>Seguridad en producci\u00f3n</li> </ul>"},{"location":"tutorial/api1/10-deployment-produccion/#preparacion-para-produccion","title":"Preparaci\u00f3n para producci\u00f3n","text":""},{"location":"tutorial/api1/10-deployment-produccion/#1-configuracion-de-entornos","title":"1. Configuraci\u00f3n de entornos","text":"<pre><code># app/config.py\nimport os\nfrom typing import List, Optional\nfrom pydantic import BaseSettings, validator\n\nclass Settings(BaseSettings):\n    \"\"\"\n    Configuraci\u00f3n de la aplicaci\u00f3n con soporte para m\u00faltiples entornos.\n    \"\"\"\n\n    # Informaci\u00f3n b\u00e1sica\n    APP_NAME: str = \"Sistema de Inventario API\"\n    APP_VERSION: str = \"1.0.0\"\n    ENVIRONMENT: str = \"development\"\n    DEBUG: bool = True\n\n    # Base de datos\n    DATABASE_URL: str = \"sqlite:///./inventory.db\"\n    DATABASE_POOL_SIZE: int = 5\n    DATABASE_MAX_OVERFLOW: int = 10\n\n    # Seguridad\n    SECRET_KEY: str = \"your-secret-key-here\"\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30\n    REFRESH_TOKEN_EXPIRE_DAYS: int = 7\n\n    # CORS\n    ALLOWED_HOSTS: List[str] = [\"*\"]\n    ALLOWED_ORIGINS: List[str] = [\"http://localhost:3000\"]\n\n    # Rate limiting\n    RATE_LIMIT_CALLS: int = 100\n    RATE_LIMIT_PERIOD: int = 60\n\n    # Logging\n    LOG_LEVEL: str = \"INFO\"\n    LOG_FILE: Optional[str] = None\n\n    # Email (para notificaciones)\n    SMTP_HOST: Optional[str] = None\n    SMTP_PORT: int = 587\n    SMTP_USERNAME: Optional[str] = None\n    SMTP_PASSWORD: Optional[str] = None\n    SMTP_USE_TLS: bool = True\n\n    # Redis (para cache y sesiones)\n    REDIS_URL: Optional[str] = None\n\n    # Monitoring\n    SENTRY_DSN: Optional[str] = None\n\n    @validator('ENVIRONMENT')\n    def validate_environment(cls, v):\n        allowed = ['development', 'testing', 'staging', 'production']\n        if v not in allowed:\n            raise ValueError(f'Environment must be one of: {allowed}')\n        return v\n\n    @validator('SECRET_KEY')\n    def validate_secret_key(cls, v, values):\n        if values.get('ENVIRONMENT') == 'production' and v == 'your-secret-key-here':\n            raise ValueError('Must set a secure SECRET_KEY for production')\n        return v\n\n    @validator('DEBUG')\n    def validate_debug(cls, v, values):\n        if values.get('ENVIRONMENT') == 'production' and v:\n            raise ValueError('DEBUG must be False in production')\n        return v\n\n    @property\n    def is_production(self) -&gt; bool:\n        return self.ENVIRONMENT == 'production'\n\n    @property\n    def is_development(self) -&gt; bool:\n        return self.ENVIRONMENT == 'development'\n\n    @property\n    def is_testing(self) -&gt; bool:\n        return self.ENVIRONMENT == 'testing'\n\n    class Config:\n        env_file = \".env\"\n        case_sensitive = True\n\n# Instancia global de configuraci\u00f3n\nsettings = Settings()\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#2-variables-de-entorno","title":"2. Variables de entorno","text":"<pre><code># .env.development\nENVIRONMENT=development\nDEBUG=true\nDATABASE_URL=sqlite:///./inventory_dev.db\nSECRET_KEY=dev-secret-key\nALLOWED_ORIGINS=[\"http://localhost:3000\", \"http://localhost:8080\"]\nLOG_LEVEL=DEBUG\n\n# .env.production\nENVIRONMENT=production\nDEBUG=false\nDATABASE_URL=postgresql://user:password@localhost:5432/inventory_prod\nSECRET_KEY=super-secure-production-key\nALLOWED_ORIGINS=[\"https://yourdomain.com\"]\nLOG_LEVEL=INFO\nSENTRY_DSN=https://your-sentry-dsn\nREDIS_URL=redis://localhost:6379/0\n\n# .env.testing\nENVIRONMENT=testing\nDEBUG=false\nDATABASE_URL=sqlite:///:memory:\nSECRET_KEY=test-secret-key\nLOG_LEVEL=WARNING\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#3-configuracion-de-logging","title":"3. Configuraci\u00f3n de logging","text":"<pre><code># app/core/logging.py\nimport logging\nimport sys\nfrom pathlib import Path\nfrom typing import Optional\n\nfrom app.config import settings\n\ndef setup_logging(log_file: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Configurar logging para la aplicaci\u00f3n.\n\n    Args:\n        log_file: Archivo de log opcional\n    \"\"\"\n    # Configuraci\u00f3n b\u00e1sica\n    log_level = getattr(logging, settings.LOG_LEVEL.upper())\n\n    # Formato de logs\n    log_format = (\n        \"%(asctime)s - %(name)s - %(levelname)s - \"\n        \"%(filename)s:%(lineno)d - %(message)s\"\n    )\n\n    # Configurar handlers\n    handlers = []\n\n    # Handler para consola\n    console_handler = logging.StreamHandler(sys.stdout)\n    console_handler.setFormatter(logging.Formatter(log_format))\n    handlers.append(console_handler)\n\n    # Handler para archivo (si se especifica)\n    if log_file or settings.LOG_FILE:\n        file_path = Path(log_file or settings.LOG_FILE)\n        file_path.parent.mkdir(parents=True, exist_ok=True)\n\n        file_handler = logging.FileHandler(file_path)\n        file_handler.setFormatter(logging.Formatter(log_format))\n        handlers.append(file_handler)\n\n    # Configurar logging\n    logging.basicConfig(\n        level=log_level,\n        format=log_format,\n        handlers=handlers\n    )\n\n    # Configurar loggers espec\u00edficos\n    if settings.is_production:\n        # En producci\u00f3n, reducir logs de librer\u00edas externas\n        logging.getLogger(\"uvicorn\").setLevel(logging.WARNING)\n        logging.getLogger(\"sqlalchemy.engine\").setLevel(logging.WARNING)\n    else:\n        # En desarrollo, mostrar m\u00e1s informaci\u00f3n\n        logging.getLogger(\"sqlalchemy.engine\").setLevel(logging.INFO)\n\n# Logger para la aplicaci\u00f3n\nlogger = logging.getLogger(\"inventory_api\")\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#4-configuracion-de-base-de-datos-para-produccion","title":"4. Configuraci\u00f3n de base de datos para producci\u00f3n","text":"<pre><code># app/database/database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import QueuePool\n\nfrom app.config import settings\nfrom app.core.logging import logger\n\n# Configuraci\u00f3n del engine seg\u00fan el entorno\nif settings.is_production:\n    # Configuraci\u00f3n optimizada para producci\u00f3n\n    engine = create_engine(\n        settings.DATABASE_URL,\n        poolclass=QueuePool,\n        pool_size=settings.DATABASE_POOL_SIZE,\n        max_overflow=settings.DATABASE_MAX_OVERFLOW,\n        pool_pre_ping=True,  # Verificar conexiones\n        pool_recycle=3600,   # Reciclar conexiones cada hora\n        echo=False           # No mostrar SQL en logs\n    )\nelse:\n    # Configuraci\u00f3n para desarrollo\n    engine = create_engine(\n        settings.DATABASE_URL,\n        echo=settings.DEBUG  # Mostrar SQL en desarrollo\n    )\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\ndef get_db():\n    \"\"\"\n    Dependencia para obtener sesi\u00f3n de base de datos.\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    except Exception as e:\n        logger.error(f\"Database error: {e}\")\n        db.rollback()\n        raise\n    finally:\n        db.close()\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#configuracion-del-servidor-asgi","title":"Configuraci\u00f3n del servidor ASGI","text":""},{"location":"tutorial/api1/10-deployment-produccion/#1-configuracion-de-uvicorn","title":"1. Configuraci\u00f3n de Uvicorn","text":"<pre><code># app/main.py\nimport logging\nfrom contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\nfrom fastapi.middleware.gzip import GZipMiddleware\n\nfrom app.config import settings\nfrom app.core.logging import setup_logging, logger\nfrom app.database.database import engine\nfrom app.database.base import BaseModel\nfrom app.middleware.logging import LoggingMiddleware\nfrom app.middleware.rate_limit import RateLimitMiddleware\nfrom app.routers import auth, users, categories, items, loans\n\n# Configurar logging\nsetup_logging()\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    \"\"\"\n    Gestionar el ciclo de vida de la aplicaci\u00f3n.\n    \"\"\"\n    # Startup\n    logger.info(f\"Starting {settings.APP_NAME} v{settings.APP_VERSION}\")\n    logger.info(f\"Environment: {settings.ENVIRONMENT}\")\n\n    # Crear tablas si no existen\n    BaseModel.metadata.create_all(bind=engine)\n    logger.info(\"Database tables created\")\n\n    yield\n\n    # Shutdown\n    logger.info(\"Shutting down application\")\n\n# Crear aplicaci\u00f3n FastAPI\napp = FastAPI(\n    title=settings.APP_NAME,\n    version=settings.APP_VERSION,\n    description=\"API REST para gesti\u00f3n de inventario y pr\u00e9stamos\",\n    debug=settings.DEBUG,\n    lifespan=lifespan,\n    # Configuraci\u00f3n para producci\u00f3n\n    docs_url=\"/docs\" if not settings.is_production else None,\n    redoc_url=\"/redoc\" if not settings.is_production else None,\n    openapi_url=\"/openapi.json\" if not settings.is_production else None\n)\n\n# Middleware de seguridad (solo en producci\u00f3n)\nif settings.is_production:\n    app.add_middleware(\n        TrustedHostMiddleware,\n        allowed_hosts=settings.ALLOWED_HOSTS\n    )\n\n# Middleware de compresi\u00f3n\napp.add_middleware(GZipMiddleware, minimum_size=1000)\n\n# Middleware personalizado\napp.add_middleware(LoggingMiddleware)\napp.add_middleware(\n    RateLimitMiddleware,\n    calls=settings.RATE_LIMIT_CALLS,\n    period=settings.RATE_LIMIT_PERIOD\n)\n\n# CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.ALLOWED_ORIGINS,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Incluir routers\napp.include_router(auth.router, prefix=\"/api/v1\")\napp.include_router(users.router, prefix=\"/api/v1\")\napp.include_router(categories.router, prefix=\"/api/v1\")\napp.include_router(items.router, prefix=\"/api/v1\")\napp.include_router(loans.router, prefix=\"/api/v1\")\n\n@app.get(\"/\")\ndef read_root():\n    return {\n        \"message\": f\"Welcome to {settings.APP_NAME}\",\n        \"version\": settings.APP_VERSION,\n        \"environment\": settings.ENVIRONMENT\n    }\n\n@app.get(\"/health\")\ndef health_check():\n    \"\"\"\n    Endpoint de health check para monitoreo.\n    \"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"version\": settings.APP_VERSION,\n        \"environment\": settings.ENVIRONMENT\n    }\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#2-configuracion-de-gunicorn","title":"2. Configuraci\u00f3n de Gunicorn","text":"<pre><code># gunicorn.conf.py\nimport multiprocessing\nimport os\n\n# Configuraci\u00f3n del servidor\nbind = f\"0.0.0.0:{os.getenv('PORT', '8000')}\"\nworkers = int(os.getenv('WEB_CONCURRENCY', multiprocessing.cpu_count() * 2 + 1))\nworker_class = \"uvicorn.workers.UvicornWorker\"\nworker_connections = 1000\nmax_requests = 1000\nmax_requests_jitter = 100\n\n# Timeouts\ntimeout = 30\nkeepalive = 2\ngraceful_timeout = 30\n\n# Logging\naccesslog = \"-\"\nerrorlog = \"-\"\nloglevel = os.getenv('LOG_LEVEL', 'info').lower()\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\" %(D)s'\n\n# Seguridad\nuser = os.getenv('USER', None)\ngroup = os.getenv('GROUP', None)\n\n# Preload\npreload_app = True\n\n# Hooks\ndef on_starting(server):\n    server.log.info(\"Starting Gunicorn server\")\n\ndef on_reload(server):\n    server.log.info(\"Reloading Gunicorn server\")\n\ndef worker_int(worker):\n    worker.log.info(\"Worker received INT or QUIT signal\")\n\ndef pre_fork(server, worker):\n    server.log.info(f\"Worker spawned (pid: {worker.pid})\")\n\ndef post_fork(server, worker):\n    server.log.info(f\"Worker spawned (pid: {worker.pid})\")\n\ndef worker_abort(worker):\n    worker.log.info(f\"Worker received SIGABRT signal (pid: {worker.pid})\")\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#deployment-en-diferentes-plataformas","title":"Deployment en diferentes plataformas","text":""},{"location":"tutorial/api1/10-deployment-produccion/#1-docker","title":"1. Docker","text":"<pre><code># Dockerfile\nFROM python:3.11-slim\n\n# Configurar variables de entorno\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    PYTHONPATH=/app\n\n# Crear usuario no-root\nRUN groupadd -r appuser &amp;&amp; useradd -r -g appuser appuser\n\n# Instalar dependencias del sistema\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Crear directorio de trabajo\nWORKDIR /app\n\n# Copiar archivos de dependencias\nCOPY requirements.txt .\n\n# Instalar dependencias de Python\nRUN pip install --no-cache-dir --upgrade pip &amp;&amp; \\\n    pip install --no-cache-dir -r requirements.txt\n\n# Copiar c\u00f3digo de la aplicaci\u00f3n\nCOPY . .\n\n# Cambiar propietario de archivos\nRUN chown -R appuser:appuser /app\n\n# Cambiar a usuario no-root\nUSER appuser\n\n# Exponer puerto\nEXPOSE 8000\n\n# Comando por defecto\nCMD [\"gunicorn\", \"app.main:app\", \"-c\", \"gunicorn.conf.py\"]\n</code></pre> <pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  api:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - ENVIRONMENT=production\n      - DATABASE_URL=postgresql://postgres:password@db:5432/inventory\n      - REDIS_URL=redis://redis:6379/0\n    depends_on:\n      - db\n      - redis\n    volumes:\n      - ./logs:/app/logs\n    restart: unless-stopped\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_DB=inventory\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n    restart: unless-stopped\n\n  redis:\n    image: redis:7-alpine\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - api\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#2-nginx-como-reverse-proxy","title":"2. Nginx como reverse proxy","text":"<pre><code># nginx.conf\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream api {\n        server api:8000;\n    }\n\n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n\n    # Configuraci\u00f3n SSL\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    server {\n        listen 80;\n        server_name yourdomain.com;\n\n        # Redirect HTTP to HTTPS\n        return 301 https://$server_name$request_uri;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name yourdomain.com;\n\n        # SSL certificates\n        ssl_certificate /etc/nginx/ssl/cert.pem;\n        ssl_certificate_key /etc/nginx/ssl/key.pem;\n\n        # Security headers\n        add_header X-Frame-Options DENY;\n        add_header X-Content-Type-Options nosniff;\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n\n        # Gzip compression\n        gzip on;\n        gzip_vary on;\n        gzip_min_length 1024;\n        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n        location / {\n            # Rate limiting\n            limit_req zone=api burst=20 nodelay;\n\n            # Proxy settings\n            proxy_pass http://api;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n\n            # Timeouts\n            proxy_connect_timeout 30s;\n            proxy_send_timeout 30s;\n            proxy_read_timeout 30s;\n\n            # Buffer settings\n            proxy_buffering on;\n            proxy_buffer_size 128k;\n            proxy_buffers 4 256k;\n            proxy_busy_buffers_size 256k;\n        }\n\n        # Health check endpoint\n        location /health {\n            access_log off;\n            proxy_pass http://api/health;\n        }\n\n        # Static files (if any)\n        location /static/ {\n            alias /app/static/;\n            expires 1y;\n            add_header Cache-Control \"public, immutable\";\n        }\n    }\n}\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#3-heroku","title":"3. Heroku","text":"<pre><code># Procfile\nweb: gunicorn app.main:app -c gunicorn.conf.py\nrelease: python -m app.database.init_db\n</code></pre> <pre><code># runtime.txt\npython-3.11.0\n</code></pre> <pre><code># app.json\n{\n  \"name\": \"inventory-api\",\n  \"description\": \"Sistema de Inventario API\",\n  \"image\": \"heroku/python\",\n  \"addons\": [\n    \"heroku-postgresql:hobby-dev\",\n    \"heroku-redis:hobby-dev\"\n  ],\n  \"env\": {\n    \"ENVIRONMENT\": \"production\",\n    \"SECRET_KEY\": {\n      \"generator\": \"secret\"\n    },\n    \"LOG_LEVEL\": \"INFO\"\n  },\n  \"formation\": {\n    \"web\": {\n      \"quantity\": 1,\n      \"size\": \"hobby\"\n    }\n  },\n  \"stack\": \"heroku-22\"\n}\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#4-aws-usando-ecs","title":"4. AWS (usando ECS)","text":"<pre><code># docker-compose.aws.yml\nversion: '3.8'\n\nservices:\n  api:\n    image: your-account.dkr.ecr.region.amazonaws.com/inventory-api:latest\n    ports:\n      - \"8000:8000\"\n    environment:\n      - ENVIRONMENT=production\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=${REDIS_URL}\n      - SECRET_KEY=${SECRET_KEY}\n    logging:\n      driver: awslogs\n      options:\n        awslogs-group: /ecs/inventory-api\n        awslogs-region: us-east-1\n        awslogs-stream-prefix: ecs\n</code></pre> <pre><code># task-definition.json\n{\n  \"family\": \"inventory-api\",\n  \"networkMode\": \"awsvpc\",\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"cpu\": \"256\",\n  \"memory\": \"512\",\n  \"executionRoleArn\": \"arn:aws:iam::account:role/ecsTaskExecutionRole\",\n  \"containerDefinitions\": [\n    {\n      \"name\": \"api\",\n      \"image\": \"your-account.dkr.ecr.region.amazonaws.com/inventory-api:latest\",\n      \"portMappings\": [\n        {\n          \"containerPort\": 8000,\n          \"protocol\": \"tcp\"\n        }\n      ],\n      \"environment\": [\n        {\n          \"name\": \"ENVIRONMENT\",\n          \"value\": \"production\"\n        }\n      ],\n      \"secrets\": [\n        {\n          \"name\": \"DATABASE_URL\",\n          \"valueFrom\": \"arn:aws:secretsmanager:region:account:secret:database-url\"\n        },\n        {\n          \"name\": \"SECRET_KEY\",\n          \"valueFrom\": \"arn:aws:secretsmanager:region:account:secret:secret-key\"\n        }\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-group\": \"/ecs/inventory-api\",\n          \"awslogs-region\": \"us-east-1\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#monitoreo-y-observabilidad","title":"Monitoreo y observabilidad","text":""},{"location":"tutorial/api1/10-deployment-produccion/#1-configuracion-de-sentry","title":"1. Configuraci\u00f3n de Sentry","text":"<pre><code># app/core/monitoring.py\nimport sentry_sdk\nfrom sentry_sdk.integrations.fastapi import FastApiIntegration\nfrom sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration\nfrom sentry_sdk.integrations.logging import LoggingIntegration\n\nfrom app.config import settings\n\ndef setup_sentry():\n    \"\"\"\n    Configurar Sentry para monitoreo de errores.\n    \"\"\"\n    if settings.SENTRY_DSN:\n        sentry_sdk.init(\n            dsn=settings.SENTRY_DSN,\n            environment=settings.ENVIRONMENT,\n            release=settings.APP_VERSION,\n            integrations=[\n                FastApiIntegration(auto_enabling_integrations=False),\n                SqlalchemyIntegration(),\n                LoggingIntegration(\n                    level=logging.INFO,\n                    event_level=logging.ERROR\n                ),\n            ],\n            traces_sample_rate=0.1 if settings.is_production else 1.0,\n            send_default_pii=False,\n            attach_stacktrace=True,\n            before_send=filter_sensitive_data,\n        )\n\ndef filter_sensitive_data(event, hint):\n    \"\"\"\n    Filtrar datos sensibles antes de enviar a Sentry.\n    \"\"\"\n    # Remover informaci\u00f3n sensible\n    if 'request' in event:\n        request = event['request']\n\n        # Filtrar headers sensibles\n        if 'headers' in request:\n            sensitive_headers = ['authorization', 'cookie', 'x-api-key']\n            for header in sensitive_headers:\n                if header in request['headers']:\n                    request['headers'][header] = '[Filtered]'\n\n        # Filtrar datos del cuerpo\n        if 'data' in request:\n            sensitive_fields = ['password', 'token', 'secret']\n            for field in sensitive_fields:\n                if field in request['data']:\n                    request['data'][field] = '[Filtered]'\n\n    return event\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#2-metricas-con-prometheus","title":"2. M\u00e9tricas con Prometheus","text":"<pre><code># app/middleware/metrics.py\nimport time\nfrom typing import Callable\nfrom prometheus_client import Counter, Histogram, generate_latest, CONTENT_TYPE_LATEST\nfrom fastapi import Request, Response\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\n# M\u00e9tricas\nREQUEST_COUNT = Counter(\n    'http_requests_total',\n    'Total HTTP requests',\n    ['method', 'endpoint', 'status_code']\n)\n\nREQUEST_DURATION = Histogram(\n    'http_request_duration_seconds',\n    'HTTP request duration in seconds',\n    ['method', 'endpoint']\n)\n\nACTIVE_REQUESTS = Counter(\n    'http_requests_active',\n    'Active HTTP requests'\n)\n\nclass MetricsMiddleware(BaseHTTPMiddleware):\n    \"\"\"\n    Middleware para recopilar m\u00e9tricas de la aplicaci\u00f3n.\n    \"\"\"\n\n    async def dispatch(self, request: Request, call_next: Callable) -&gt; Response:\n        # Incrementar requests activos\n        ACTIVE_REQUESTS.inc()\n\n        # Obtener informaci\u00f3n del request\n        method = request.method\n        path = request.url.path\n\n        # Medir tiempo de respuesta\n        start_time = time.time()\n\n        try:\n            response = await call_next(request)\n            status_code = response.status_code\n        except Exception as e:\n            status_code = 500\n            raise\n        finally:\n            # Decrementar requests activos\n            ACTIVE_REQUESTS.dec()\n\n            # Registrar m\u00e9tricas\n            duration = time.time() - start_time\n\n            REQUEST_COUNT.labels(\n                method=method,\n                endpoint=path,\n                status_code=status_code\n            ).inc()\n\n            REQUEST_DURATION.labels(\n                method=method,\n                endpoint=path\n            ).observe(duration)\n\n        return response\n\n# Endpoint para m\u00e9tricas\ndef metrics_endpoint():\n    \"\"\"\n    Endpoint para exponer m\u00e9tricas de Prometheus.\n    \"\"\"\n    return Response(\n        generate_latest(),\n        media_type=CONTENT_TYPE_LATEST\n    )\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#3-health-checks-avanzados","title":"3. Health checks avanzados","text":"<pre><code># app/core/health.py\nimport asyncio\nfrom typing import Dict, Any\nfrom sqlalchemy import text\nfrom sqlalchemy.orm import Session\n\nfrom app.database.database import SessionLocal, engine\nfrom app.config import settings\n\nclass HealthChecker:\n    \"\"\"\n    Verificador de salud de la aplicaci\u00f3n.\n    \"\"\"\n\n    @staticmethod\n    def check_database() -&gt; Dict[str, Any]:\n        \"\"\"\n        Verificar conexi\u00f3n a la base de datos.\n        \"\"\"\n        try:\n            db = SessionLocal()\n            db.execute(text(\"SELECT 1\"))\n            db.close()\n            return {\n                \"status\": \"healthy\",\n                \"message\": \"Database connection successful\"\n            }\n        except Exception as e:\n            return {\n                \"status\": \"unhealthy\",\n                \"message\": f\"Database connection failed: {str(e)}\"\n            }\n\n    @staticmethod\n    def check_redis() -&gt; Dict[str, Any]:\n        \"\"\"\n        Verificar conexi\u00f3n a Redis.\n        \"\"\"\n        if not settings.REDIS_URL:\n            return {\n                \"status\": \"skipped\",\n                \"message\": \"Redis not configured\"\n            }\n\n        try:\n            import redis\n            r = redis.from_url(settings.REDIS_URL)\n            r.ping()\n            return {\n                \"status\": \"healthy\",\n                \"message\": \"Redis connection successful\"\n            }\n        except Exception as e:\n            return {\n                \"status\": \"unhealthy\",\n                \"message\": f\"Redis connection failed: {str(e)}\"\n            }\n\n    @staticmethod\n    def check_disk_space() -&gt; Dict[str, Any]:\n        \"\"\"\n        Verificar espacio en disco.\n        \"\"\"\n        try:\n            import shutil\n            total, used, free = shutil.disk_usage(\"/\")\n\n            free_percent = (free / total) * 100\n\n            if free_percent &lt; 10:\n                status = \"unhealthy\"\n                message = f\"Low disk space: {free_percent:.1f}% free\"\n            elif free_percent &lt; 20:\n                status = \"warning\"\n                message = f\"Disk space warning: {free_percent:.1f}% free\"\n            else:\n                status = \"healthy\"\n                message = f\"Disk space OK: {free_percent:.1f}% free\"\n\n            return {\n                \"status\": status,\n                \"message\": message,\n                \"free_space_percent\": round(free_percent, 1)\n            }\n        except Exception as e:\n            return {\n                \"status\": \"unknown\",\n                \"message\": f\"Could not check disk space: {str(e)}\"\n            }\n\n    @classmethod\n    def get_health_status(cls) -&gt; Dict[str, Any]:\n        \"\"\"\n        Obtener estado de salud completo.\n        \"\"\"\n        checks = {\n            \"database\": cls.check_database(),\n            \"redis\": cls.check_redis(),\n            \"disk\": cls.check_disk_space()\n        }\n\n        # Determinar estado general\n        overall_status = \"healthy\"\n        for check in checks.values():\n            if check[\"status\"] == \"unhealthy\":\n                overall_status = \"unhealthy\"\n                break\n            elif check[\"status\"] == \"warning\" and overall_status == \"healthy\":\n                overall_status = \"warning\"\n\n        return {\n            \"status\": overall_status,\n            \"version\": settings.APP_VERSION,\n            \"environment\": settings.ENVIRONMENT,\n            \"checks\": checks\n        }\n\n# Endpoint de health check\ndef detailed_health_check():\n    \"\"\"\n    Endpoint detallado de health check.\n    \"\"\"\n    return HealthChecker.get_health_status()\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#optimizacion-de-rendimiento","title":"Optimizaci\u00f3n de rendimiento","text":""},{"location":"tutorial/api1/10-deployment-produccion/#1-cache-con-redis","title":"1. Cache con Redis","text":"<pre><code># app/core/cache.py\nimport json\nimport pickle\nfrom typing import Any, Optional, Union\nfrom functools import wraps\n\nimport redis\nfrom app.config import settings\n\nclass CacheManager:\n    \"\"\"\n    Gestor de cache con Redis.\n    \"\"\"\n\n    def __init__(self):\n        if settings.REDIS_URL:\n            self.redis = redis.from_url(settings.REDIS_URL)\n        else:\n            self.redis = None\n\n    def get(self, key: str) -&gt; Optional[Any]:\n        \"\"\"\n        Obtener valor del cache.\n        \"\"\"\n        if not self.redis:\n            return None\n\n        try:\n            value = self.redis.get(key)\n            if value:\n                return pickle.loads(value)\n        except Exception:\n            pass\n\n        return None\n\n    def set(self, key: str, value: Any, ttl: int = 300) -&gt; bool:\n        \"\"\"\n        Guardar valor en el cache.\n\n        Args:\n            key: Clave del cache\n            value: Valor a guardar\n            ttl: Tiempo de vida en segundos\n        \"\"\"\n        if not self.redis:\n            return False\n\n        try:\n            serialized = pickle.dumps(value)\n            return self.redis.setex(key, ttl, serialized)\n        except Exception:\n            return False\n\n    def delete(self, key: str) -&gt; bool:\n        \"\"\"\n        Eliminar valor del cache.\n        \"\"\"\n        if not self.redis:\n            return False\n\n        try:\n            return bool(self.redis.delete(key))\n        except Exception:\n            return False\n\n    def clear_pattern(self, pattern: str) -&gt; int:\n        \"\"\"\n        Eliminar todas las claves que coincidan con el patr\u00f3n.\n        \"\"\"\n        if not self.redis:\n            return 0\n\n        try:\n            keys = self.redis.keys(pattern)\n            if keys:\n                return self.redis.delete(*keys)\n        except Exception:\n            pass\n\n        return 0\n\n# Instancia global\ncache = CacheManager()\n\ndef cached(ttl: int = 300, key_prefix: str = \"\"):\n    \"\"\"\n    Decorator para cachear resultados de funciones.\n\n    Args:\n        ttl: Tiempo de vida del cache en segundos\n        key_prefix: Prefijo para la clave del cache\n    \"\"\"\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            # Generar clave del cache\n            cache_key = f\"{key_prefix}:{func.__name__}:{hash(str(args) + str(kwargs))}\"\n\n            # Intentar obtener del cache\n            result = cache.get(cache_key)\n            if result is not None:\n                return result\n\n            # Ejecutar funci\u00f3n y guardar en cache\n            result = func(*args, **kwargs)\n            cache.set(cache_key, result, ttl)\n\n            return result\n\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#2-optimizacion-de-consultas","title":"2. Optimizaci\u00f3n de consultas","text":"<pre><code># app/crud/optimized.py\nfrom typing import List, Optional\nfrom sqlalchemy.orm import Session, joinedload, selectinload\nfrom sqlalchemy import func\n\nfrom app.models.item import Item\nfrom app.models.category import Category\nfrom app.models.loan import Loan\nfrom app.core.cache import cached\n\nclass OptimizedQueries:\n    \"\"\"\n    Consultas optimizadas para mejor rendimiento.\n    \"\"\"\n\n    @staticmethod\n    @cached(ttl=300, key_prefix=\"items\")\n    def get_items_with_category(db: Session, skip: int = 0, limit: int = 100) -&gt; List[Item]:\n        \"\"\"\n        Obtener art\u00edculos con categor\u00eda usando eager loading.\n        \"\"\"\n        return (\n            db.query(Item)\n            .options(joinedload(Item.category))\n            .offset(skip)\n            .limit(limit)\n            .all()\n        )\n\n    @staticmethod\n    @cached(ttl=600, key_prefix=\"stats\")\n    def get_inventory_stats(db: Session) -&gt; dict:\n        \"\"\"\n        Obtener estad\u00edsticas del inventario.\n        \"\"\"\n        total_items = db.query(func.count(Item.id)).scalar()\n        total_categories = db.query(func.count(Category.id)).scalar()\n        active_loans = db.query(func.count(Loan.id)).filter(\n            Loan.status == \"active\"\n        ).scalar()\n\n        return {\n            \"total_items\": total_items,\n            \"total_categories\": total_categories,\n            \"active_loans\": active_loans\n        }\n\n    @staticmethod\n    def get_user_loans_optimized(db: Session, user_id: int) -&gt; List[Loan]:\n        \"\"\"\n        Obtener pr\u00e9stamos de usuario con eager loading.\n        \"\"\"\n        return (\n            db.query(Loan)\n            .options(\n                joinedload(Loan.item).joinedload(Item.category),\n                joinedload(Loan.user)\n            )\n            .filter(Loan.user_id == user_id)\n            .all()\n        )\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#scripts-de-deployment","title":"Scripts de deployment","text":""},{"location":"tutorial/api1/10-deployment-produccion/#1-script-de-deployment","title":"1. Script de deployment","text":"<pre><code>#!/bin/bash\n# deploy.sh\n\nset -e\n\necho \"Starting deployment...\"\n\n# Variables\nAPP_NAME=\"inventory-api\"\nDOCKER_IMAGE=\"$APP_NAME:latest\"\nCONTAINER_NAME=\"$APP_NAME-container\"\n\n# Construir imagen\necho \"Building Docker image...\"\ndocker build -t $DOCKER_IMAGE .\n\n# Ejecutar tests\necho \"Running tests...\"\ndocker run --rm $DOCKER_IMAGE pytest\n\n# Parar contenedor existente\necho \"Stopping existing container...\"\ndocker stop $CONTAINER_NAME || true\ndocker rm $CONTAINER_NAME || true\n\n# Ejecutar migraciones\necho \"Running database migrations...\"\ndocker run --rm \\\n  --env-file .env.production \\\n  $DOCKER_IMAGE \\\n  python -m alembic upgrade head\n\n# Iniciar nuevo contenedor\necho \"Starting new container...\"\ndocker run -d \\\n  --name $CONTAINER_NAME \\\n  --env-file .env.production \\\n  -p 8000:8000 \\\n  --restart unless-stopped \\\n  $DOCKER_IMAGE\n\n# Verificar que el servicio est\u00e1 funcionando\necho \"Checking service health...\"\nsleep 10\nif curl -f http://localhost:8000/health; then\n  echo \"Deployment successful!\"\nelse\n  echo \"Deployment failed - service not responding\"\n  exit 1\nfi\n\necho \"Deployment completed successfully!\"\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#2-cicd-con-github-actions","title":"2. CI/CD con GitHub Actions","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [ main ]\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.11'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install -r requirements-test.txt\n\n    - name: Run tests\n      run: |\n        pytest --cov=app --cov-report=xml\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v2\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-east-1\n\n    - name: Login to Amazon ECR\n      id: login-ecr\n      uses: aws-actions/amazon-ecr-login@v1\n\n    - name: Build and push Docker image\n      env:\n        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}\n        ECR_REPOSITORY: inventory-api\n        IMAGE_TAG: ${{ github.sha }}\n      run: |\n        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .\n        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\n        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest\n        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest\n\n    - name: Deploy to ECS\n      run: |\n        aws ecs update-service \\\n          --cluster inventory-cluster \\\n          --service inventory-api-service \\\n          --force-new-deployment\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#seguridad-en-produccion","title":"Seguridad en producci\u00f3n","text":""},{"location":"tutorial/api1/10-deployment-produccion/#1-checklist-de-seguridad","title":"1. Checklist de seguridad","text":"<ul> <li>\u2705 HTTPS habilitado con certificados v\u00e1lidos</li> <li>\u2705 Headers de seguridad configurados</li> <li>\u2705 Rate limiting implementado</li> <li>\u2705 Validaci\u00f3n de entrada en todos los endpoints</li> <li>\u2705 Autenticaci\u00f3n y autorizaci\u00f3n robustas</li> <li>\u2705 Secrets gestionados de forma segura</li> <li>\u2705 Logs sin informaci\u00f3n sensible</li> <li>\u2705 Base de datos con acceso restringido</li> <li>\u2705 Firewall configurado</li> <li>\u2705 Monitoreo de seguridad activo</li> </ul>"},{"location":"tutorial/api1/10-deployment-produccion/#2-configuracion-de-seguridad","title":"2. Configuraci\u00f3n de seguridad","text":"<pre><code># app/middleware/security.py\nfrom fastapi import Request, HTTPException, status\nfrom starlette.middleware.base import BaseHTTPMiddleware\nimport re\n\nclass SecurityMiddleware(BaseHTTPMiddleware):\n    \"\"\"\n    Middleware de seguridad para proteger contra ataques comunes.\n    \"\"\"\n\n    def __init__(self, app):\n        super().__init__(app)\n\n        # Patrones de ataques comunes\n        self.sql_injection_patterns = [\n            r\"('|(\\-\\-)|(;)|(\\||\\|)|(\\*|\\*))\",\n            r\"(union|select|insert|delete|update|drop|create|alter)\"\n        ]\n\n        self.xss_patterns = [\n            r\"&lt;script[^&gt;]*&gt;.*?&lt;/script&gt;\",\n            r\"javascript:\",\n            r\"on\\w+\\s*=\"\n        ]\n\n    async def dispatch(self, request: Request, call_next):\n        # Verificar User-Agent\n        user_agent = request.headers.get(\"user-agent\", \"\")\n        if not user_agent or len(user_agent) &gt; 500:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Invalid User-Agent\"\n            )\n\n        # Verificar tama\u00f1o del request\n        content_length = request.headers.get(\"content-length\")\n        if content_length and int(content_length) &gt; 10 * 1024 * 1024:  # 10MB\n            raise HTTPException(\n                status_code=status.HTTP_413_REQUEST_ENTITY_TOO_LARGE,\n                detail=\"Request too large\"\n            )\n\n        # Verificar par\u00e1metros de consulta\n        query_string = str(request.url.query)\n        if self._contains_malicious_patterns(query_string):\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Malicious request detected\"\n            )\n\n        response = await call_next(request)\n\n        # Agregar headers de seguridad\n        response.headers[\"X-Content-Type-Options\"] = \"nosniff\"\n        response.headers[\"X-Frame-Options\"] = \"DENY\"\n        response.headers[\"X-XSS-Protection\"] = \"1; mode=block\"\n        response.headers[\"Referrer-Policy\"] = \"strict-origin-when-cross-origin\"\n\n        return response\n\n    def _contains_malicious_patterns(self, text: str) -&gt; bool:\n        \"\"\"\n        Verificar si el texto contiene patrones maliciosos.\n        \"\"\"\n        text_lower = text.lower()\n\n        # Verificar SQL injection\n        for pattern in self.sql_injection_patterns:\n            if re.search(pattern, text_lower, re.IGNORECASE):\n                return True\n\n        # Verificar XSS\n        for pattern in self.xss_patterns:\n            if re.search(pattern, text_lower, re.IGNORECASE):\n                return True\n\n        return False\n</code></pre>"},{"location":"tutorial/api1/10-deployment-produccion/#conclusion","title":"Conclusi\u00f3n","text":"<p>En este tema hemos cubierto todos los aspectos importantes para llevar una API FastAPI a producci\u00f3n:</p> <ol> <li>Configuraci\u00f3n adecuada para diferentes entornos</li> <li>Deployment en m\u00faltiples plataformas</li> <li>Monitoreo y observabilidad</li> <li>Optimizaci\u00f3n de rendimiento</li> <li>Seguridad en producci\u00f3n</li> </ol> <p>Con estos conocimientos, puedes desplegar tu API de manera segura y eficiente en cualquier entorno de producci\u00f3n.</p> <p>\ud83d\udca1 Tips importantes:</p> <ol> <li>Siempre probar en staging antes de producci\u00f3n</li> <li>Monitorear constantemente el rendimiento</li> <li>Mantener logs detallados pero seguros</li> <li>Actualizar dependencias regularmente</li> <li>Tener un plan de rollback</li> </ol> <p>\ud83d\udd17 Enlaces \u00fatiles: - FastAPI Deployment - Docker Best Practices - Nginx Configuration - AWS ECS Guide - Heroku Python</p>"},{"location":"tutorial/api1/11-Repositorio/","title":"Repositorio del proyecto","text":"<pre><code>https://github.com/jfinfosena/act_apirest_fastapi.git\n</code></pre>"},{"location":"tutorial/api2/01-introduccion/","title":"1. Introducci\u00f3n y Conceptos B\u00e1sicos","text":""},{"location":"tutorial/api2/01-introduccion/#que-es-una-api-rest","title":"\u00bfQu\u00e9 es una API REST?","text":"<p>Una API REST (Application Programming Interface - Representational State Transfer) es un conjunto de reglas y convenciones para crear servicios web que permiten la comunicaci\u00f3n entre diferentes aplicaciones.</p>"},{"location":"tutorial/api2/01-introduccion/#caracteristicas-principales-de-rest","title":"Caracter\u00edsticas principales de REST:","text":"<ul> <li>Stateless (Sin estado): Cada petici\u00f3n contiene toda la informaci\u00f3n necesaria</li> <li>Cacheable: Las respuestas pueden ser almacenadas en cach\u00e9</li> <li>Cliente-Servidor: Separaci\u00f3n clara entre cliente y servidor</li> <li>Interfaz uniforme: Uso consistente de m\u00e9todos HTTP</li> </ul>"},{"location":"tutorial/api2/01-introduccion/#metodos-http-mas-comunes","title":"M\u00e9todos HTTP m\u00e1s comunes:","text":"M\u00e9todo Prop\u00f3sito Ejemplo GET Obtener datos <code>GET /users</code> - Obtener lista de usuarios POST Crear nuevos recursos <code>POST /users</code> - Crear un nuevo usuario PUT Actualizar recursos completos <code>PUT /users/1</code> - Actualizar usuario con ID 1 DELETE Eliminar recursos <code>DELETE /users/1</code> - Eliminar usuario con ID 1"},{"location":"tutorial/api2/01-introduccion/#que-es-fastapi","title":"\u00bfQu\u00e9 es FastAPI?","text":"<p>FastAPI es un framework web moderno y r\u00e1pido para construir APIs con Python. Fue creado por Sebasti\u00e1n Ramirez y se ha vuelto muy popular por sus caracter\u00edsticas \u00fanicas.</p>"},{"location":"tutorial/api2/01-introduccion/#ventajas-de-fastapi","title":"Ventajas de FastAPI:","text":"<ol> <li>\ud83d\ude80 Velocidad: Uno de los frameworks m\u00e1s r\u00e1pidos disponibles</li> <li>\ud83d\udcdd Documentaci\u00f3n autom\u00e1tica: Genera documentaci\u00f3n interactiva autom\u00e1ticamente</li> <li>\ud83d\udd0d Validaci\u00f3n de datos: Validaci\u00f3n autom\u00e1tica usando Python type hints</li> <li>\ud83d\udc0d Python moderno: Aprovecha las caracter\u00edsticas m\u00e1s recientes de Python</li> <li>\ud83d\udcda F\u00e1cil de aprender: Sintaxis intuitiva y bien documentada</li> </ol>"},{"location":"tutorial/api2/01-introduccion/#comparacion-con-otros-frameworks","title":"Comparaci\u00f3n con otros frameworks:","text":"Framework Velocidad Documentaci\u00f3n Validaci\u00f3n Curva de aprendizaje FastAPI \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 Flask \u2b50\u2b50\u2b50 \u2b50\u2b50 \u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 Django \u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50"},{"location":"tutorial/api2/01-introduccion/#conceptos-fundamentales","title":"Conceptos Fundamentales","text":""},{"location":"tutorial/api2/01-introduccion/#1-endpoint","title":"1. Endpoint","text":"<p>Un endpoint es una URL espec\u00edfica donde tu API puede recibir peticiones.</p> <p>Ejemplo: <pre><code>GET http://localhost:8000/users/1\n</code></pre></p>"},{"location":"tutorial/api2/01-introduccion/#2-request-peticion","title":"2. Request (Petici\u00f3n)","text":"<p>Los datos que el cliente env\u00eda al servidor.</p> <pre><code>{\n  \"name\": \"Juan P\u00e9rez\",\n  \"email\": \"juan@email.com\"\n}\n</code></pre>"},{"location":"tutorial/api2/01-introduccion/#3-response-respuesta","title":"3. Response (Respuesta)","text":"<p>Los datos que el servidor devuelve al cliente.</p> <pre><code>{\n  \"id\": 1,\n  \"name\": \"Juan P\u00e9rez\",\n  \"email\": \"juan@email.com\"\n}\n</code></pre>"},{"location":"tutorial/api2/01-introduccion/#4-status-codes-codigos-de-estado","title":"4. Status Codes (C\u00f3digos de Estado)","text":"<p>N\u00fameros que indican el resultado de la petici\u00f3n:</p> <ul> <li>200: OK - Petici\u00f3n exitosa</li> <li>201: Created - Recurso creado exitosamente</li> <li>400: Bad Request - Error en la petici\u00f3n del cliente</li> <li>404: Not Found - Recurso no encontrado</li> <li>500: Internal Server Error - Error del servidor</li> </ul>"},{"location":"tutorial/api2/01-introduccion/#arquitectura-de-nuestro-proyecto","title":"Arquitectura de Nuestro Proyecto","text":"<p>Nuestro proyecto seguir\u00e1 una arquitectura en capas:</p> <pre><code>\ud83d\udcc1 Proyecto API\n\u251c\u2500\u2500 \ud83d\uddc4\ufe0f Capa de Datos (models/)\n\u251c\u2500\u2500 \ud83d\udd27 Capa de L\u00f3gica (crud/)\n\u251c\u2500\u2500 \ud83c\udf10 Capa de Presentaci\u00f3n (routers/)\n\u251c\u2500\u2500 \u2705 Capa de Validaci\u00f3n (schemas/)\n\u2514\u2500\u2500 \ud83d\udd0c Capa de Configuraci\u00f3n (database/)\n</code></pre>"},{"location":"tutorial/api2/01-introduccion/#beneficios-de-esta-arquitectura","title":"Beneficios de esta arquitectura:","text":"<ul> <li>Separaci\u00f3n de responsabilidades: Cada capa tiene una funci\u00f3n espec\u00edfica</li> <li>Mantenibilidad: F\u00e1cil de modificar y extender</li> <li>Testabilidad: Cada capa se puede probar independientemente</li> <li>Reutilizaci\u00f3n: Componentes reutilizables en diferentes partes</li> </ul>"},{"location":"tutorial/api2/01-introduccion/#las-3-entidades-de-nuestro-proyecto","title":"Las 3 Entidades de Nuestro Proyecto","text":""},{"location":"tutorial/api2/01-introduccion/#1-usuario-user","title":"1. \ud83d\udc64 Usuario (User)","text":"<ul> <li>Prop\u00f3sito: Representar a los usuarios del sistema</li> <li>Campos: ID, nombre, email</li> <li>Operaciones: Crear, listar, obtener por ID</li> </ul>"},{"location":"tutorial/api2/01-introduccion/#2-producto-product","title":"2. \ud83d\udce6 Producto (Product)","text":"<ul> <li>Prop\u00f3sito: Representar productos disponibles</li> <li>Campos: ID, nombre, precio</li> <li>Operaciones: Crear, listar, obtener por ID</li> </ul>"},{"location":"tutorial/api2/01-introduccion/#3-pedido-order","title":"3. \ud83d\uded2 Pedido (Order)","text":"<ul> <li>Prop\u00f3sito: Representar pedidos de usuarios</li> <li>Campos: ID, usuario_id, producto_id, cantidad</li> <li>Operaciones: Crear, listar, obtener por ID</li> </ul>"},{"location":"tutorial/api2/01-introduccion/#flujo-de-trabajo-tipico","title":"Flujo de Trabajo T\u00edpico","text":"<ol> <li>Cliente hace petici\u00f3n \u2192 <code>GET /users</code></li> <li>Router recibe petici\u00f3n \u2192 Valida par\u00e1metros</li> <li>CRUD ejecuta operaci\u00f3n \u2192 Consulta base de datos</li> <li>Modelo devuelve datos \u2192 Datos en formato Python</li> <li>Schema serializa datos \u2192 Convierte a JSON</li> <li>Cliente recibe respuesta \u2192 JSON con los datos</li> </ol>"},{"location":"tutorial/api2/01-introduccion/#por-que-esta-estructura","title":"\u00bfPor Qu\u00e9 Esta Estructura?","text":"<ul> <li>Escalabilidad: F\u00e1cil agregar nuevas funcionalidades</li> <li>Mantenimiento: C\u00f3digo organizado y f\u00e1cil de entender</li> <li>Colaboraci\u00f3n: M\u00faltiples desarrolladores pueden trabajar en paralelo</li> <li>Est\u00e1ndares: Sigue las mejores pr\u00e1cticas de la industria</li> </ul> <p>Siguiente: Configuraci\u00f3n del Entorno</p> <p>Anterior: \u00cdndice Principal</p>"},{"location":"tutorial/api2/02-configuracion-entorno/","title":"2. Configuraci\u00f3n del Entorno","text":""},{"location":"tutorial/api2/02-configuracion-entorno/#requisitos-del-sistema","title":"Requisitos del Sistema","text":"<p>Antes de comenzar, aseg\u00farate de tener instalado:</p> <ul> <li>Python 3.8 o superior (recomendado Python 3.9+)</li> <li>pip (gestor de paquetes de Python)</li> <li>Editor de c\u00f3digo (VS Code, PyCharm, etc.)</li> </ul>"},{"location":"tutorial/api2/02-configuracion-entorno/#verificar-instalacion-de-python","title":"Verificar instalaci\u00f3n de Python","text":"<p>Abre una terminal y ejecuta:</p> <pre><code>python --version\n# o en algunos sistemas:\npython3 --version\n</code></pre> <p>Deber\u00edas ver algo como: <code>Python 3.9.7</code></p>"},{"location":"tutorial/api2/02-configuracion-entorno/#paso-1-crear-el-directorio-del-proyecto","title":"Paso 1: Crear el Directorio del Proyecto","text":"<pre><code># Crear directorio\nmkdir api_simple\ncd api_simple\n</code></pre>"},{"location":"tutorial/api2/02-configuracion-entorno/#paso-2-crear-entorno-virtual","title":"Paso 2: Crear Entorno Virtual","text":"<p>Un entorno virtual es un espacio aislado donde puedes instalar paquetes sin afectar tu sistema Python global.</p>"},{"location":"tutorial/api2/02-configuracion-entorno/#por-que-usar-entornos-virtuales","title":"\u00bfPor qu\u00e9 usar entornos virtuales?","text":"<ul> <li>Aislamiento: Evita conflictos entre proyectos</li> <li>Reproducibilidad: Mismas versiones en diferentes m\u00e1quinas</li> <li>Limpieza: No contamina el Python del sistema</li> </ul>"},{"location":"tutorial/api2/02-configuracion-entorno/#crear-entorno-virtual","title":"Crear entorno virtual:","text":"<pre><code># Crear entorno virtual\npython -m venv .venv\n\n# En Windows:\npython -m venv .venv\n\n# En macOS/Linux:\npython3 -m venv .venv\n</code></pre>"},{"location":"tutorial/api2/02-configuracion-entorno/#activar-entorno-virtual","title":"Activar entorno virtual:","text":"<pre><code># Windows (PowerShell)\n.venv\\Scripts\\Activate.ps1\n\n# Windows (Command Prompt)\n.venv\\Scripts\\activate.bat\n\n# macOS/Linux\nsource .venv/bin/activate\n</code></pre> <p>\ud83d\udca1 Tip: Cuando el entorno est\u00e9 activo, ver\u00e1s <code>(.venv)</code> al inicio de tu terminal.</p>"},{"location":"tutorial/api2/02-configuracion-entorno/#paso-3-crear-archivo-requirementstxt","title":"Paso 3: Crear archivo requirements.txt","text":"<p>Este archivo lista todas las dependencias de nuestro proyecto:</p> <pre><code>fastapi\nuvicorn\nsqlalchemy\n</code></pre>"},{"location":"tutorial/api2/02-configuracion-entorno/#que-hace-cada-dependencia","title":"\u00bfQu\u00e9 hace cada dependencia?","text":"Paquete Prop\u00f3sito \u00bfPor qu\u00e9 lo necesitamos? fastapi Framework web Core de nuestra API uvicorn Servidor ASGI Ejecutar la aplicaci\u00f3n sqlalchemy ORM Interactuar con la base de datos"},{"location":"tutorial/api2/02-configuracion-entorno/#paso-4-instalar-dependencias","title":"Paso 4: Instalar Dependencias","text":"<pre><code># Instalar todas las dependencias\npip install -r requirements.txt\n\n# O instalar una por una:\npip install fastapi\npip install uvicorn\npip install sqlalchemy\n</code></pre>"},{"location":"tutorial/api2/02-configuracion-entorno/#verificar-instalacion","title":"Verificar instalaci\u00f3n:","text":"<pre><code>pip list\n</code></pre> <p>Deber\u00edas ver las dependencias instaladas.</p>"},{"location":"tutorial/api2/02-configuracion-entorno/#paso-5-crear-estructura-de-carpetas","title":"Paso 5: Crear Estructura de Carpetas","text":"<pre><code># Crear estructura b\u00e1sica\nmkdir app\nmkdir app/models\nmkdir app/schemas\nmkdir app/crud\nmkdir app/routers\nmkdir app/database\nmkdir docs\n</code></pre>"},{"location":"tutorial/api2/02-configuracion-entorno/#estructura-resultante","title":"Estructura resultante:","text":"<pre><code>api_simple/\n\u251c\u2500\u2500 .venv/                 # Entorno virtual\n\u251c\u2500\u2500 app/                   # C\u00f3digo de la aplicaci\u00f3n\n\u2502   \u251c\u2500\u2500 models/           # Modelos de base de datos\n\u2502   \u251c\u2500\u2500 schemas/          # Esquemas de validaci\u00f3n\n\u2502   \u251c\u2500\u2500 crud/             # Operaciones de base de datos\n\u2502   \u251c\u2500\u2500 routers/          # Rutas y endpoints\n\u2502   \u2514\u2500\u2500 database/         # Configuraci\u00f3n de BD\n\u251c\u2500\u2500 docs/                 # Documentaci\u00f3n\n\u251c\u2500\u2500 requirements.txt      # Dependencias\n\u2514\u2500\u2500 main.py              # Archivo principal (lo crearemos despu\u00e9s)\n</code></pre>"},{"location":"tutorial/api2/02-configuracion-entorno/#paso-6-crear-archivos-initpy","title":"Paso 6: Crear archivos init.py","text":"<p>Python necesita estos archivos para reconocer las carpetas como paquetes:</p> <pre><code># Crear archivos __init__.py vac\u00edos\ntouch app/__init__.py\ntouch app/models/__init__.py\ntouch app/schemas/__init__.py\ntouch app/crud/__init__.py\ntouch app/routers/__init__.py\ntouch app/database/__init__.py\n\n# En Windows, usa:\necho. &gt; app/__init__.py\necho. &gt; app/models/__init__.py\necho. &gt; app/schemas/__init__.py\necho. &gt; app/crud/__init__.py\necho. &gt; app/routers/__init__.py\necho. &gt; app/database/__init__.py\n</code></pre>"},{"location":"tutorial/api2/02-configuracion-entorno/#configuracion-del-editor","title":"Configuraci\u00f3n del Editor","text":""},{"location":"tutorial/api2/02-configuracion-entorno/#vs-code-recomendado","title":"VS Code (Recomendado)","text":"<ol> <li>Instalar extensiones \u00fatiles:</li> <li>Python</li> <li>Python Docstring Generator</li> <li> <p>REST Client</p> </li> <li> <p>Configurar int\u00e9rprete de Python:</p> </li> <li><code>Ctrl+Shift+P</code> \u2192 \"Python: Select Interpreter\"</li> <li> <p>Seleccionar el int\u00e9rprete de <code>.venv</code></p> </li> <li> <p>Configuraci\u00f3n recomendada (<code>.vscode/settings.json</code>):</p> </li> </ol> <pre><code>{\n    \"python.defaultInterpreterPath\": \"./.venv/bin/python\",\n    \"python.formatting.provider\": \"black\",\n    \"python.linting.enabled\": true,\n    \"python.linting.pylintEnabled\": true\n}\n</code></pre>"},{"location":"tutorial/api2/02-configuracion-entorno/#verificacion-de-la-configuracion","title":"Verificaci\u00f3n de la Configuraci\u00f3n","text":"<p>Crea un archivo de prueba <code>test_setup.py</code>:</p> <pre><code># test_setup.py\nimport fastapi\nimport uvicorn\nimport sqlalchemy\n\nprint(\"\u2705 FastAPI version:\", fastapi.__version__)\nprint(\"\u2705 Uvicorn version:\", uvicorn.__version__)\nprint(\"\u2705 SQLAlchemy version:\", sqlalchemy.__version__)\nprint(\"\ud83c\udf89 \u00a1Configuraci\u00f3n exitosa!\")\n</code></pre> <p>Ejec\u00fatalo:</p> <pre><code>python test_setup.py\n</code></pre> <p>Si ves las versiones sin errores, \u00a1todo est\u00e1 listo!</p>"},{"location":"tutorial/api2/02-configuracion-entorno/#comandos-utiles","title":"Comandos \u00datiles","text":""},{"location":"tutorial/api2/02-configuracion-entorno/#gestion-del-entorno-virtual","title":"Gesti\u00f3n del entorno virtual:","text":"<pre><code># Activar entorno\nsource .venv/bin/activate  # macOS/Linux\n.venv\\Scripts\\activate     # Windows\n\n# Desactivar entorno\ndeactivate\n\n# Ver paquetes instalados\npip list\n\n# Actualizar pip\npip install --upgrade pip\n</code></pre>"},{"location":"tutorial/api2/02-configuracion-entorno/#gestion-de-dependencias","title":"Gesti\u00f3n de dependencias:","text":"<pre><code># Instalar nueva dependencia\npip install nombre_paquete\n\n# Generar requirements.txt actualizado\npip freeze &gt; requirements.txt\n\n# Instalar desde requirements.txt\npip install -r requirements.txt\n</code></pre>"},{"location":"tutorial/api2/02-configuracion-entorno/#solucion-de-problemas-comunes","title":"Soluci\u00f3n de Problemas Comunes","text":""},{"location":"tutorial/api2/02-configuracion-entorno/#error-python-no-se-reconoce-como-comando","title":"Error: \"python no se reconoce como comando\"","text":"<p>Soluci\u00f3n: Agregar Python al PATH del sistema o usar <code>python3</code></p>"},{"location":"tutorial/api2/02-configuracion-entorno/#error-no-se-puede-activar-el-entorno-virtual","title":"Error: \"No se puede activar el entorno virtual\"","text":"<p>Windows PowerShell: <pre><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n</code></pre></p>"},{"location":"tutorial/api2/02-configuracion-entorno/#error-pip-no-encontrado","title":"Error: \"pip no encontrado\"","text":"<p>Soluci\u00f3n: Reinstalar Python con la opci\u00f3n \"Add to PATH\" marcada</p>"},{"location":"tutorial/api2/02-configuracion-entorno/#error-de-permisos-en-macoslinux","title":"Error de permisos en macOS/Linux","text":"<p>Soluci\u00f3n: Usar <code>python3 -m pip</code> en lugar de solo <code>pip</code></p>"},{"location":"tutorial/api2/02-configuracion-entorno/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<ol> <li>Siempre usar entornos virtuales para cada proyecto</li> <li>Mantener requirements.txt actualizado con versiones espec\u00edficas</li> <li>No subir .venv/ a control de versiones (agregar a .gitignore)</li> <li>Documentar la configuraci\u00f3n para otros desarrolladores</li> <li>Usar nombres descriptivos para carpetas y archivos</li> </ol>"},{"location":"tutorial/api2/02-configuracion-entorno/#archivo-gitignore-recomendado","title":"Archivo .gitignore Recomendado","text":"<p>Crea un archivo <code>.gitignore</code> para excluir archivos innecesarios:</p> <pre><code># Entorno virtual\n.venv/\nvenv/\nenv/\n\n# Cache de Python\n__pycache__/\n*.pyc\n*.pyo\n*.pyd\n\n# Base de datos\n*.db\n*.sqlite3\n\n# IDE\n.vscode/\n.idea/\n\n# Logs\n*.log\n\n# Variables de entorno\n.env\n</code></pre> <p>Siguiente: Estructura del Proyecto</p> <p>Anterior: Introducci\u00f3n y Conceptos B\u00e1sicos</p>"},{"location":"tutorial/api2/03-estructura-proyecto/","title":"3. Estructura del Proyecto","text":""},{"location":"tutorial/api2/03-estructura-proyecto/#arquitectura-general","title":"Arquitectura General","text":"<p>Nuestro proyecto sigue el patr\u00f3n de arquitectura en capas, donde cada capa tiene una responsabilidad espec\u00edfica y bien definida.</p> <pre><code>api_simple/\n\u251c\u2500\u2500 \ud83d\udcc1 app/                    # Aplicaci\u00f3n principal\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 database/          # Configuraci\u00f3n de base de datos\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 models/            # Modelos de datos (SQLAlchemy)\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 schemas/           # Esquemas de validaci\u00f3n (Pydantic)\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 crud/              # Operaciones CRUD\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 routers/           # Rutas y endpoints\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 __init__.py        # Inicializaci\u00f3n del paquete\n\u251c\u2500\u2500 \ud83d\udcc1 docs/                  # Documentaci\u00f3n del proyecto\n\u251c\u2500\u2500 \ud83d\udcc4 main.py               # Punto de entrada de la aplicaci\u00f3n\n\u251c\u2500\u2500 \ud83d\udcc4 requirements.txt      # Dependencias del proyecto\n\u2514\u2500\u2500 \ud83d\udcc4 .gitignore            # Archivos a ignorar en Git\n</code></pre>"},{"location":"tutorial/api2/03-estructura-proyecto/#explicacion-de-cada-capa","title":"Explicaci\u00f3n de Cada Capa","text":""},{"location":"tutorial/api2/03-estructura-proyecto/#capa-de-base-de-datos-database","title":"\ud83d\uddc4\ufe0f Capa de Base de Datos (<code>database/</code>)","text":"<p>Prop\u00f3sito: Configurar la conexi\u00f3n y sesi\u00f3n de base de datos.</p> <pre><code># app/database/database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n# Configuraci\u00f3n de la base de datos\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\n# Funci\u00f3n para obtener sesi\u00f3n de BD\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>Responsabilidades: - Configurar la conexi\u00f3n a la base de datos - Crear el motor de SQLAlchemy - Gestionar sesiones de base de datos - Proporcionar la clase base para modelos</p>"},{"location":"tutorial/api2/03-estructura-proyecto/#capa-de-modelos-models","title":"\ud83c\udfd7\ufe0f Capa de Modelos (<code>models/</code>)","text":"<p>Prop\u00f3sito: Definir la estructura de las tablas de base de datos.</p> <pre><code># app/models/models.py\nfrom sqlalchemy import Column, Integer, String, Float\nfrom app.database.database import Base\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n\nclass Product(Base):\n    __tablename__ = \"products\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    price = Column(Float)\n\nclass Order(Base):\n    __tablename__ = \"orders\"\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer)\n    product_id = Column(Integer)\n    quantity = Column(Integer)\n</code></pre> <p>Responsabilidades: - Definir estructura de tablas - Especificar tipos de datos - Establecer relaciones entre tablas - Mapear objetos Python a tablas SQL</p>"},{"location":"tutorial/api2/03-estructura-proyecto/#capa-de-esquemas-schemas","title":"\u2705 Capa de Esquemas (<code>schemas/</code>)","text":"<p>Prop\u00f3sito: Validar y serializar datos de entrada y salida.</p> <pre><code># app/schemas/schemas.py\nfrom pydantic import BaseModel\n\nclass User(BaseModel):\n    id: int = None\n    name: str\n    email: str\n\n    class Config:\n        from_attributes = True\n\nclass Product(BaseModel):\n    id: int = None\n    name: str\n    price: float\n\n    class Config:\n        from_attributes = True\n\nclass Order(BaseModel):\n    id: int = None\n    user_id: int\n    product_id: int\n    quantity: int\n\n    class Config:\n        from_attributes = True\n</code></pre> <p>Responsabilidades: - Validar datos de entrada - Serializar datos de salida - Documentar la estructura de la API - Convertir entre formatos (JSON \u2194 Python)</p>"},{"location":"tutorial/api2/03-estructura-proyecto/#capa-crud-crud","title":"\ud83d\udd27 Capa CRUD (<code>crud/</code>)","text":"<p>Prop\u00f3sito: Implementar operaciones de base de datos.</p> <pre><code># app/crud/crud.py\nfrom sqlalchemy.orm import Session\nfrom app.models import models\nfrom app.schemas import schemas\n\ndef get_all(db: Session, model):\n    return db.query(model).all()\n\ndef get_by_id(db: Session, model, item_id: int):\n    return db.query(model).filter(model.id == item_id).first()\n\ndef create_item(db: Session, model, item_data):\n    db_item = model(**item_data.dict(exclude={'id'}))\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n</code></pre> <p>Responsabilidades: - Ejecutar consultas SQL - Manejar transacciones - Implementar l\u00f3gica de negocio - Abstraer operaciones de base de datos</p>"},{"location":"tutorial/api2/03-estructura-proyecto/#capa-de-rutas-routers","title":"\ud83c\udf10 Capa de Rutas (<code>routers/</code>)","text":"<p>Prop\u00f3sito: Definir endpoints y manejar peticiones HTTP.</p> <pre><code># app/routers/users.py\nfrom fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\nfrom app.crud import crud\nfrom app.schemas import schemas\nfrom app.models import models\nfrom app.database.database import get_db\n\nrouter = APIRouter(prefix=\"/users\")\n\n@router.post(\"/\")\ndef create_user(user: schemas.User, db: Session = Depends(get_db)):\n    return crud.create_item(db, models.User, user)\n\n@router.get(\"/\")\ndef get_users(db: Session = Depends(get_db)):\n    return crud.get_all(db, models.User)\n\n@router.get(\"/{user_id}\")\ndef get_user(user_id: int, db: Session = Depends(get_db)):\n    return crud.get_by_id(db, models.User, user_id)\n</code></pre> <p>Responsabilidades: - Definir rutas HTTP - Manejar par\u00e1metros de petici\u00f3n - Validar entrada - Coordinar entre capas - Retornar respuestas HTTP</p>"},{"location":"tutorial/api2/03-estructura-proyecto/#aplicacion-principal-mainpy","title":"\ud83d\ude80 Aplicaci\u00f3n Principal (<code>main.py</code>)","text":"<p>Prop\u00f3sito: Inicializar y configurar la aplicaci\u00f3n FastAPI.</p> <pre><code># main.py\nfrom fastapi import FastAPI\nfrom app.database.database import engine\nfrom app.models import models\nfrom app.routers import users, products, orders\n\n# Crear tablas en la base de datos\nmodels.Base.metadata.create_all(bind=engine)\n\n# Crear aplicaci\u00f3n FastAPI\napp = FastAPI()\n\n# Incluir routers\napp.include_router(users.router)\napp.include_router(products.router)\napp.include_router(orders.router)\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"API Simple\"}\n</code></pre> <p>Responsabilidades: - Inicializar FastAPI - Configurar la aplicaci\u00f3n - Registrar routers - Crear tablas de base de datos</p>"},{"location":"tutorial/api2/03-estructura-proyecto/#flujo-de-datos","title":"Flujo de Datos","text":"<p>Veamos c\u00f3mo fluyen los datos a trav\u00e9s de las capas:</p> <pre><code>1. \ud83c\udf10 Cliente hace petici\u00f3n HTTP\n   \u2193\n2. \ud83d\udee3\ufe0f Router recibe y valida la petici\u00f3n\n   \u2193\n3. \u2705 Schema valida los datos de entrada\n   \u2193\n4. \ud83d\udd27 CRUD ejecuta operaci\u00f3n en base de datos\n   \u2193\n5. \ud83d\uddc4\ufe0f Model interact\u00faa con la base de datos\n   \u2193\n6. \ud83d\udd27 CRUD retorna datos a router\n   \u2193\n7. \u2705 Schema serializa datos de salida\n   \u2193\n8. \ud83d\udee3\ufe0f Router env\u00eda respuesta HTTP\n   \u2193\n9. \ud83c\udf10 Cliente recibe respuesta\n</code></pre>"},{"location":"tutorial/api2/03-estructura-proyecto/#ejemplo-practico-crear-un-usuario","title":"Ejemplo Pr\u00e1ctico: Crear un Usuario","text":"<ol> <li>Cliente env\u00eda: <code>POST /users</code> con JSON</li> <li>Router (<code>users.py</code>) recibe la petici\u00f3n</li> <li>Schema (<code>schemas.User</code>) valida los datos</li> <li>CRUD (<code>crud.create_item</code>) crea el usuario</li> <li>Model (<code>models.User</code>) define la estructura</li> <li>Database guarda en SQLite</li> <li>CRUD retorna el usuario creado</li> <li>Schema serializa la respuesta</li> <li>Router env\u00eda JSON al cliente</li> </ol>"},{"location":"tutorial/api2/03-estructura-proyecto/#ventajas-de-esta-arquitectura","title":"Ventajas de Esta Arquitectura","text":""},{"location":"tutorial/api2/03-estructura-proyecto/#separacion-de-responsabilidades","title":"\ud83d\udd04 Separaci\u00f3n de Responsabilidades","text":"<ul> <li>Cada capa tiene una funci\u00f3n espec\u00edfica</li> <li>F\u00e1cil de entender y mantener</li> <li>Cambios en una capa no afectan otras</li> </ul>"},{"location":"tutorial/api2/03-estructura-proyecto/#testabilidad","title":"\ud83e\uddea Testabilidad","text":"<ul> <li>Cada capa se puede probar independientemente</li> <li>F\u00e1cil crear mocks y stubs</li> <li>Tests m\u00e1s r\u00e1pidos y confiables</li> </ul>"},{"location":"tutorial/api2/03-estructura-proyecto/#mantenibilidad","title":"\ud83d\udd27 Mantenibilidad","text":"<ul> <li>C\u00f3digo organizado y predecible</li> <li>F\u00e1cil encontrar y modificar funcionalidades</li> <li>Menos bugs por acoplamiento</li> </ul>"},{"location":"tutorial/api2/03-estructura-proyecto/#escalabilidad","title":"\ud83d\udcc8 Escalabilidad","text":"<ul> <li>F\u00e1cil agregar nuevas funcionalidades</li> <li>Reutilizaci\u00f3n de componentes</li> <li>Paralelizaci\u00f3n del desarrollo</li> </ul>"},{"location":"tutorial/api2/03-estructura-proyecto/#patrones-de-diseno-utilizados","title":"Patrones de Dise\u00f1o Utilizados","text":""},{"location":"tutorial/api2/03-estructura-proyecto/#1-repository-pattern-crud","title":"1. Repository Pattern (CRUD)","text":"<ul> <li>Abstrae el acceso a datos</li> <li>Facilita cambios de base de datos</li> <li>Mejora la testabilidad</li> </ul>"},{"location":"tutorial/api2/03-estructura-proyecto/#2-dependency-injection-fastapi","title":"2. Dependency Injection (FastAPI)","text":"<ul> <li>Inyecci\u00f3n de dependencias autom\u00e1tica</li> <li>F\u00e1cil gesti\u00f3n de recursos</li> <li>Mejor control del ciclo de vida</li> </ul>"},{"location":"tutorial/api2/03-estructura-proyecto/#3-data-transfer-object-schemas","title":"3. Data Transfer Object (Schemas)","text":"<ul> <li>Transferencia segura de datos</li> <li>Validaci\u00f3n autom\u00e1tica</li> <li>Documentaci\u00f3n impl\u00edcita</li> </ul>"},{"location":"tutorial/api2/03-estructura-proyecto/#4-layered-architecture","title":"4. Layered Architecture","text":"<ul> <li>Organizaci\u00f3n en capas</li> <li>Flujo unidireccional</li> <li>Bajo acoplamiento</li> </ul>"},{"location":"tutorial/api2/03-estructura-proyecto/#convenciones-de-nomenclatura","title":"Convenciones de Nomenclatura","text":""},{"location":"tutorial/api2/03-estructura-proyecto/#archivos-y-carpetas","title":"Archivos y Carpetas","text":"<ul> <li>Carpetas: snake_case (<code>app/</code>, <code>models/</code>)</li> <li>Archivos Python: snake_case (<code>models.py</code>, <code>crud.py</code>)</li> <li>Clases: PascalCase (<code>User</code>, <code>Product</code>)</li> <li>Funciones: snake_case (<code>get_user</code>, <code>create_item</code>)</li> <li>Variables: snake_case (<code>user_id</code>, <code>db_session</code>)</li> </ul>"},{"location":"tutorial/api2/03-estructura-proyecto/#base-de-datos","title":"Base de Datos","text":"<ul> <li>Tablas: plural, snake_case (<code>users</code>, <code>products</code>)</li> <li>Columnas: snake_case (<code>user_id</code>, <code>created_at</code>)</li> <li>\u00cdndices: descriptivos (<code>idx_user_email</code>)</li> </ul>"},{"location":"tutorial/api2/03-estructura-proyecto/#api-endpoints","title":"API Endpoints","text":"<ul> <li>Rutas: kebab-case si es necesario (<code>/users</code>, <code>/user-profiles</code>)</li> <li>Par\u00e1metros: snake_case (<code>user_id</code>, <code>page_size</code>)</li> </ul>"},{"location":"tutorial/api2/03-estructura-proyecto/#configuracion-adicional","title":"Configuraci\u00f3n Adicional","text":""},{"location":"tutorial/api2/03-estructura-proyecto/#variables-de-entorno","title":"Variables de Entorno","text":"<p>Para configuraciones sensibles, usa un archivo <code>.env</code>:</p> <pre><code>DATABASE_URL=sqlite:///./test.db\nSECRET_KEY=your-secret-key\nDEBUG=True\n</code></pre>"},{"location":"tutorial/api2/03-estructura-proyecto/#logging","title":"Logging","text":"<p>Configura logging para debugging:</p> <pre><code>import logging\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n)\n</code></pre>"},{"location":"tutorial/api2/03-estructura-proyecto/#configuracion-de-cors","title":"Configuraci\u00f3n de CORS","text":"<p>Para aplicaciones web frontend:</p> <pre><code>from fastapi.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"tutorial/api2/03-estructura-proyecto/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>Ahora que entendemos la estructura, en los siguientes cap\u00edtulos implementaremos cada capa paso a paso:</p> <ol> <li>Base de datos y modelos - Configurar SQLAlchemy</li> <li>Esquemas - Crear validaciones con Pydantic</li> <li>CRUD - Implementar operaciones de base de datos</li> <li>Routers - Crear endpoints HTTP</li> <li>Integraci\u00f3n - Conectar todo en main.py</li> </ol> <p>Siguiente: Base de Datos y Modelos</p> <p>Anterior: Configuraci\u00f3n del Entorno</p>"},{"location":"tutorial/api2/04-base-datos-modelos/","title":"4. Base de Datos y Modelos","text":""},{"location":"tutorial/api2/04-base-datos-modelos/#que-es-sqlalchemy","title":"\u00bfQu\u00e9 es SQLAlchemy?","text":"<p>SQLAlchemy es un ORM (Object-Relational Mapping) que nos permite: - Trabajar con bases de datos usando objetos Python - Escribir menos SQL manual - Cambiar de base de datos f\u00e1cilmente - Tener mayor seguridad contra inyecciones SQL</p>"},{"location":"tutorial/api2/04-base-datos-modelos/#orm-vs-sql-tradicional","title":"ORM vs SQL Tradicional","text":"<p>SQL Tradicional: <pre><code>CREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n\nINSERT INTO users (name, email) VALUES ('Juan', 'juan@email.com');\nSELECT * FROM users WHERE id = 1;\n</code></pre></p> <p>Con SQLAlchemy ORM: <pre><code>class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n\n# Crear usuario\nuser = User(name=\"Juan\", email=\"juan@email.com\")\ndb.add(user)\ndb.commit()\n\n# Obtener usuario\nuser = db.query(User).filter(User.id == 1).first()\n</code></pre></p>"},{"location":"tutorial/api2/04-base-datos-modelos/#configuracion-de-la-base-de-datos","title":"Configuraci\u00f3n de la Base de Datos","text":""},{"location":"tutorial/api2/04-base-datos-modelos/#paso-1-crear-el-archivo-de-configuracion","title":"Paso 1: Crear el archivo de configuraci\u00f3n","text":"<p>Creamos <code>app/database/database.py</code>:</p> <pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n# URL de conexi\u00f3n a la base de datos\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\n\n# Crear el motor de base de datos\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\n\n# Crear la clase de sesi\u00f3n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# Crear la clase base para los modelos\nBase = declarative_base()\n\n# Funci\u00f3n para obtener una sesi\u00f3n de base de datos\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#explicacion-detallada","title":"Explicaci\u00f3n Detallada","text":""},{"location":"tutorial/api2/04-base-datos-modelos/#create_engine","title":"\ud83d\udd27 <code>create_engine()</code>","text":"<p><pre><code>engine = create_engine(SQLALCHEMY_DATABASE_URL)\n</code></pre> - Prop\u00f3sito: Crea la conexi\u00f3n principal a la base de datos - SQLite: Base de datos en archivo local (ideal para desarrollo) - Archivo: <code>test.db</code> se crea autom\u00e1ticamente</p>"},{"location":"tutorial/api2/04-base-datos-modelos/#sessionmaker","title":"\ud83d\udcdd <code>sessionmaker()</code>","text":"<p><pre><code>SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n</code></pre> - autocommit=False: Las transacciones deben confirmarse manualmente - autoflush=False: Los cambios no se env\u00edan autom\u00e1ticamente - bind=engine: Vincula las sesiones al motor de base de datos</p>"},{"location":"tutorial/api2/04-base-datos-modelos/#declarative_base","title":"\ud83c\udfd7\ufe0f <code>declarative_base()</code>","text":"<p><pre><code>Base = declarative_base()\n</code></pre> - Prop\u00f3sito: Clase base para todos nuestros modelos - Funcionalidad: Proporciona metadatos y funciones ORM</p>"},{"location":"tutorial/api2/04-base-datos-modelos/#get_db","title":"\ud83d\udd04 <code>get_db()</code>","text":"<p><pre><code>def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> - Patr\u00f3n: Dependency Injection de FastAPI - yield: Genera una sesi\u00f3n y la mantiene abierta - finally: Garantiza que la sesi\u00f3n se cierre</p>"},{"location":"tutorial/api2/04-base-datos-modelos/#creacion-de-modelos","title":"Creaci\u00f3n de Modelos","text":""},{"location":"tutorial/api2/04-base-datos-modelos/#paso-2-definir-los-modelos","title":"Paso 2: Definir los modelos","text":"<p>Creamos <code>app/models/models.py</code>:</p> <pre><code>from sqlalchemy import Column, Integer, String, Float\nfrom app.database.database import Base\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n\nclass Product(Base):\n    __tablename__ = \"products\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    price = Column(Float)\n\nclass Order(Base):\n    __tablename__ = \"orders\"\n\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer)\n    product_id = Column(Integer)\n    quantity = Column(Integer)\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#anatomia-de-un-modelo","title":"Anatom\u00eda de un Modelo","text":"<p>Veamos el modelo <code>User</code> en detalle:</p> <pre><code>class User(Base):                    # 1. Hereda de Base\n    __tablename__ = \"users\"          # 2. Nombre de la tabla\n\n    id = Column(Integer, primary_key=True)  # 3. Clave primaria\n    name = Column(String)                    # 4. Columna de texto\n    email = Column(String)                   # 5. Otra columna\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#1-herencia-de-base","title":"1. Herencia de Base","text":"<ul> <li>Todos los modelos heredan de <code>Base</code></li> <li>Proporciona funcionalidad ORM autom\u00e1tica</li> <li>Permite crear tablas autom\u00e1ticamente</li> </ul>"},{"location":"tutorial/api2/04-base-datos-modelos/#2-__tablename__","title":"2. <code>__tablename__</code>","text":"<ul> <li>Define el nombre de la tabla en la base de datos</li> <li>Convenci\u00f3n: plural, snake_case</li> <li>Ejemplos: <code>users</code>, <code>products</code>, <code>order_items</code></li> </ul>"},{"location":"tutorial/api2/04-base-datos-modelos/#3-clave-primaria","title":"3. Clave Primaria","text":"<p><pre><code>id = Column(Integer, primary_key=True)\n</code></pre> - Integer: Tipo de dato entero - primary_key=True: Identifica \u00fanicamente cada registro - Auto-incremento: SQLite lo hace autom\u00e1ticamente</p>"},{"location":"tutorial/api2/04-base-datos-modelos/#4-columnas-de-datos","title":"4. Columnas de Datos","text":"<pre><code>name = Column(String)\nemail = Column(String)\nprice = Column(Float)\nquantity = Column(Integer)\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#tipos-de-datos-comunes","title":"Tipos de Datos Comunes","text":"Tipo SQLAlchemy Tipo Python Descripci\u00f3n Ejemplo <code>Integer</code> <code>int</code> N\u00fameros enteros <code>age = Column(Integer)</code> <code>String</code> <code>str</code> Texto variable <code>name = Column(String(100))</code> <code>Float</code> <code>float</code> N\u00fameros decimales <code>price = Column(Float)</code> <code>Boolean</code> <code>bool</code> Verdadero/Falso <code>active = Column(Boolean)</code> <code>DateTime</code> <code>datetime</code> Fecha y hora <code>created_at = Column(DateTime)</code> <code>Text</code> <code>str</code> Texto largo <code>description = Column(Text)</code>"},{"location":"tutorial/api2/04-base-datos-modelos/#ejemplo-con-mas-tipos","title":"Ejemplo con M\u00e1s Tipos","text":"<pre><code>from sqlalchemy import Column, Integer, String, Float, Boolean, DateTime, Text\nfrom datetime import datetime\n\nclass Product(Base):\n    __tablename__ = \"products\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100))              # L\u00edmite de caracteres\n    description = Column(Text)              # Texto largo\n    price = Column(Float)\n    in_stock = Column(Boolean, default=True) # Valor por defecto\n    created_at = Column(DateTime, default=datetime.utcnow)\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#relaciones-entre-modelos","title":"Relaciones Entre Modelos","text":"<p>Aunque nuestro proyecto usa un enfoque simple, es importante entender las relaciones:</p>"},{"location":"tutorial/api2/04-base-datos-modelos/#tipos-de-relaciones","title":"Tipos de Relaciones","text":""},{"location":"tutorial/api2/04-base-datos-modelos/#1-uno-a-muchos-one-to-many","title":"1. Uno a Muchos (One-to-Many)","text":"<pre><code>from sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import relationship\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n    # Relaci\u00f3n: Un usuario puede tener muchas \u00f3rdenes\n    orders = relationship(\"Order\", back_populates=\"user\")\n\nclass Order(Base):\n    __tablename__ = \"orders\"\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))  # Clave for\u00e1nea\n\n    # Relaci\u00f3n: Una orden pertenece a un usuario\n    user = relationship(\"User\", back_populates=\"orders\")\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#2-muchos-a-muchos-many-to-many","title":"2. Muchos a Muchos (Many-to-Many)","text":"<pre><code>from sqlalchemy import Table\n\n# Tabla de asociaci\u00f3n\nuser_product_association = Table(\n    'user_products',\n    Base.metadata,\n    Column('user_id', Integer, ForeignKey('users.id')),\n    Column('product_id', Integer, ForeignKey('products.id'))\n)\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n\n    # Un usuario puede tener muchos productos favoritos\n    favorite_products = relationship(\n        \"Product\",\n        secondary=user_product_association,\n        back_populates=\"favorited_by\"\n    )\n\nclass Product(Base):\n    __tablename__ = \"products\"\n    id = Column(Integer, primary_key=True)\n\n    # Un producto puede ser favorito de muchos usuarios\n    favorited_by = relationship(\n        \"User\",\n        secondary=user_product_association,\n        back_populates=\"favorite_products\"\n    )\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#creacion-de-tablas","title":"Creaci\u00f3n de Tablas","text":""},{"location":"tutorial/api2/04-base-datos-modelos/#metodo-automatico","title":"M\u00e9todo Autom\u00e1tico","text":"<p>En <code>main.py</code>, las tablas se crean autom\u00e1ticamente:</p> <pre><code>from app.database.database import engine\nfrom app.models import models\n\n# Crear todas las tablas definidas en los modelos\nmodels.Base.metadata.create_all(bind=engine)\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#que-hace-create_all","title":"\u00bfQu\u00e9 hace <code>create_all()</code>?","text":"<ol> <li>Examina todos los modelos que heredan de <code>Base</code></li> <li>Genera el SQL necesario para crear las tablas</li> <li>Ejecuta las sentencias CREATE TABLE</li> <li>Ignora tablas que ya existen</li> </ol>"},{"location":"tutorial/api2/04-base-datos-modelos/#sql-generado","title":"SQL Generado","text":"<p>Para nuestros modelos, SQLAlchemy genera:</p> <pre><code>CREATE TABLE users (\n    id INTEGER NOT NULL PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE products (\n    id INTEGER NOT NULL PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT\n);\n\nCREATE TABLE orders (\n    id INTEGER NOT NULL PRIMARY KEY,\n    user_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER\n);\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#operaciones-basicas-con-modelos","title":"Operaciones B\u00e1sicas con Modelos","text":""},{"location":"tutorial/api2/04-base-datos-modelos/#crear-un-registro","title":"Crear un Registro","text":"<pre><code>from sqlalchemy.orm import Session\nfrom app.models.models import User\nfrom app.database.database import SessionLocal\n\n# Crear sesi\u00f3n\ndb = SessionLocal()\n\n# Crear usuario\nuser = User(name=\"Juan P\u00e9rez\", email=\"juan@email.com\")\n\n# Agregar a la sesi\u00f3n\ndb.add(user)\n\n# Confirmar cambios\ndb.commit()\n\n# Refrescar para obtener el ID generado\ndb.refresh(user)\n\nprint(f\"Usuario creado con ID: {user.id}\")\n\n# Cerrar sesi\u00f3n\ndb.close()\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#consultar-registros","title":"Consultar Registros","text":"<pre><code># Obtener todos los usuarios\nusers = db.query(User).all()\n\n# Obtener usuario por ID\nuser = db.query(User).filter(User.id == 1).first()\n\n# Obtener usuario por email\nuser = db.query(User).filter(User.email == \"juan@email.com\").first()\n\n# Obtener m\u00faltiples usuarios con filtro\nusers = db.query(User).filter(User.name.like(\"%Juan%\")).all()\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#actualizar-registros","title":"Actualizar Registros","text":"<pre><code># Obtener usuario\nuser = db.query(User).filter(User.id == 1).first()\n\n# Modificar datos\nuser.name = \"Juan Carlos P\u00e9rez\"\nuser.email = \"juancarlos@email.com\"\n\n# Confirmar cambios\ndb.commit()\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#eliminar-registros","title":"Eliminar Registros","text":"<pre><code># Obtener usuario\nuser = db.query(User).filter(User.id == 1).first()\n\n# Eliminar\ndb.delete(user)\ndb.commit()\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#validaciones-y-restricciones","title":"Validaciones y Restricciones","text":""},{"location":"tutorial/api2/04-base-datos-modelos/#restricciones-a-nivel-de-base-de-datos","title":"Restricciones a Nivel de Base de Datos","text":"<pre><code>from sqlalchemy import Column, Integer, String, Float, UniqueConstraint, CheckConstraint\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100), nullable=False)      # No puede ser NULL\n    email = Column(String(255), unique=True)        # Debe ser \u00fanico\n    age = Column(Integer, CheckConstraint('age &gt;= 0'))  # Debe ser positivo\n\n    # Restricci\u00f3n de tabla\n    __table_args__ = (\n        UniqueConstraint('name', 'email', name='unique_name_email'),\n    )\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#valores-por-defecto","title":"Valores por Defecto","text":"<pre><code>from datetime import datetime\nfrom sqlalchemy import Column, Integer, String, DateTime, Boolean\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n    active = Column(Boolean, default=True)                    # Valor por defecto\n    created_at = Column(DateTime, default=datetime.utcnow)    # Funci\u00f3n por defecto\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#indices-para-rendimiento","title":"\u00cdndices para Rendimiento","text":"<pre><code>from sqlalchemy import Column, Integer, String, Index\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String, index=True)  # \u00cdndice simple\n\n    # \u00cdndice compuesto\n    __table_args__ = (\n        Index('idx_name_email', 'name', 'email'),\n    )\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"tutorial/api2/04-base-datos-modelos/#1-nomenclatura-consistente","title":"1. Nomenclatura Consistente","text":"<pre><code># \u2705 Bueno\nclass User(Base):\n    __tablename__ = \"users\"  # Plural, snake_case\n\n    id = Column(Integer, primary_key=True)\n    first_name = Column(String)  # snake_case\n    created_at = Column(DateTime)\n\n# \u274c Malo\nclass user(Base):  # Deber\u00eda ser PascalCase\n    __tablename__ = \"User\"  # Deber\u00eda ser plural y snake_case\n\n    ID = Column(Integer, primary_key=True)  # Deber\u00eda ser snake_case\n    firstName = Column(String)  # Deber\u00eda ser snake_case\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#2-documentacion-de-modelos","title":"2. Documentaci\u00f3n de Modelos","text":"<pre><code>class User(Base):\n    \"\"\"Modelo para usuarios del sistema.\n\n    Attributes:\n        id: Identificador \u00fanico del usuario\n        name: Nombre completo del usuario\n        email: Direcci\u00f3n de correo electr\u00f3nico (\u00fanico)\n        created_at: Fecha y hora de creaci\u00f3n\n    \"\"\"\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, comment=\"ID \u00fanico del usuario\")\n    name = Column(String(100), nullable=False, comment=\"Nombre completo\")\n    email = Column(String(255), unique=True, comment=\"Email \u00fanico\")\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#3-validacion-de-datos","title":"3. Validaci\u00f3n de Datos","text":"<pre><code>from sqlalchemy.orm import validates\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n\n    @validates('email')\n    def validate_email(self, key, address):\n        if '@' not in address:\n            raise ValueError(\"Email inv\u00e1lido\")\n        return address\n\n    @validates('name')\n    def validate_name(self, key, name):\n        if len(name) &lt; 2:\n            raise ValueError(\"Nombre muy corto\")\n        return name\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#debugging-y-logging","title":"Debugging y Logging","text":""},{"location":"tutorial/api2/04-base-datos-modelos/#habilitar-logging-sql","title":"Habilitar Logging SQL","text":"<pre><code>import logging\n\n# Configurar logging para ver las consultas SQL\nlogging.basicConfig()\nlogging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\n\n# Crear engine con echo=True para desarrollo\nengine = create_engine(SQLALCHEMY_DATABASE_URL, echo=True)\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#inspeccionar-la-base-de-datos","title":"Inspeccionar la Base de Datos","text":"<pre><code>from sqlalchemy import inspect\n\n# Crear inspector\ninspector = inspect(engine)\n\n# Obtener nombres de tablas\ntable_names = inspector.get_table_names()\nprint(f\"Tablas: {table_names}\")\n\n# Obtener columnas de una tabla\ncolumns = inspector.get_columns('users')\nfor column in columns:\n    print(f\"Columna: {column['name']}, Tipo: {column['type']}\")\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#migracion-de-esquemas","title":"Migraci\u00f3n de Esquemas","text":"<p>Para proyectos en producci\u00f3n, considera usar Alembic:</p> <pre><code># Instalar Alembic\npip install alembic\n\n# Inicializar\nalembic init alembic\n\n# Crear migraci\u00f3n\nalembic revision --autogenerate -m \"Crear tabla users\"\n\n# Aplicar migraci\u00f3n\nalembic upgrade head\n</code></pre>"},{"location":"tutorial/api2/04-base-datos-modelos/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":""},{"location":"tutorial/api2/04-base-datos-modelos/#ejercicio-1-modelo-extendido","title":"Ejercicio 1: Modelo Extendido","text":"<p>Crea un modelo <code>Category</code> con: - <code>id</code> (clave primaria) - <code>name</code> (string, \u00fanico) - <code>description</code> (texto largo) - <code>active</code> (boolean, por defecto True)</p>"},{"location":"tutorial/api2/04-base-datos-modelos/#ejercicio-2-validaciones","title":"Ejercicio 2: Validaciones","text":"<p>Agrega validaciones al modelo <code>Product</code>: - El precio debe ser mayor a 0 - El nombre debe tener al menos 3 caracteres</p>"},{"location":"tutorial/api2/04-base-datos-modelos/#ejercicio-3-consultas","title":"Ejercicio 3: Consultas","text":"<p>Escribe funciones para: - Obtener productos por rango de precio - Buscar usuarios por parte del nombre - Contar \u00f3rdenes por usuario</p>"},{"location":"tutorial/api2/04-base-datos-modelos/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>En el siguiente cap\u00edtulo aprenderemos sobre Esquemas de Validaci\u00f3n con Pydantic, que nos permitir\u00e1n: - Validar datos de entrada - Serializar datos de salida - Documentar autom\u00e1ticamente la API - Convertir entre formatos JSON y Python</p> <p>Siguiente: Esquemas de Validaci\u00f3n</p> <p>Anterior: Estructura del Proyecto</p>"},{"location":"tutorial/api2/05-esquemas-validacion/","title":"5. Esquemas de Validaci\u00f3n con Pydantic","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#que-es-pydantic","title":"\u00bfQu\u00e9 es Pydantic?","text":"<p>Pydantic es una librer\u00eda de Python que utiliza type hints para: - Validar datos autom\u00e1ticamente - Serializar/Deserializar entre JSON y objetos Python - Documentar la estructura de datos - Generar documentaci\u00f3n autom\u00e1tica de APIs</p>"},{"location":"tutorial/api2/05-esquemas-validacion/#por-que-usar-pydantic","title":"\u00bfPor qu\u00e9 usar Pydantic?","text":"<p>Sin Pydantic: <pre><code># Datos sin validar\ndef create_user(data):\n    name = data.get('name')  # \u00bfExiste? \u00bfEs string?\n    email = data.get('email')  # \u00bfEs email v\u00e1lido?\n    age = data.get('age')  # \u00bfEs n\u00famero? \u00bfEs positivo?\n\n    # Validaci\u00f3n manual (tedioso y propenso a errores)\n    if not name or not isinstance(name, str):\n        raise ValueError(\"Nombre inv\u00e1lido\")\n    if not email or '@' not in email:\n        raise ValueError(\"Email inv\u00e1lido\")\n    # ... m\u00e1s validaciones\n</code></pre></p> <p>Con Pydantic: <pre><code>from pydantic import BaseModel, EmailStr\n\nclass UserCreate(BaseModel):\n    name: str\n    email: EmailStr\n    age: int\n\ndef create_user(user: UserCreate):\n    # \u00a1Datos ya validados autom\u00e1ticamente!\n    print(f\"Usuario: {user.name}, Email: {user.email}\")\n</code></pre></p>"},{"location":"tutorial/api2/05-esquemas-validacion/#conceptos-fundamentales","title":"Conceptos Fundamentales","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#basemodel","title":"BaseModel","text":"<p>Todos los esquemas heredan de <code>BaseModel</code>:</p> <pre><code>from pydantic import BaseModel\n\nclass User(BaseModel):\n    id: int = None  # Opcional con valor por defecto\n    name: str       # Requerido\n    email: str      # Requerido\n    age: int        # Requerido\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#type-hints","title":"Type Hints","text":"<p>Pydantic usa las anotaciones de tipo de Python:</p> <pre><code>from typing import Optional, List\nfrom datetime import datetime\n\nclass Product(BaseModel):\n    id: Optional[int] = None    # Opcional\n    name: str                   # String requerido\n    price: float               # Float requerido\n    tags: List[str] = []       # Lista de strings, por defecto vac\u00eda\n    created_at: datetime       # Datetime requerido\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#creacion-de-esquemas","title":"Creaci\u00f3n de Esquemas","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#paso-1-esquemas-basicos","title":"Paso 1: Esquemas B\u00e1sicos","text":"<p>Creamos <code>app/schemas/schemas.py</code>:</p> <pre><code>from pydantic import BaseModel\nfrom typing import Optional\n\nclass User(BaseModel):\n    id: Optional[int] = None\n    name: str\n    email: str\n\n    class Config:\n        from_attributes = True\n\nclass Product(BaseModel):\n    id: Optional[int] = None\n    name: str\n    price: float\n\n    class Config:\n        from_attributes = True\n\nclass Order(BaseModel):\n    id: Optional[int] = None\n    user_id: int\n    product_id: int\n    quantity: int\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#explicacion-de-config","title":"Explicaci\u00f3n de <code>Config</code>","text":"<pre><code>class Config:\n    from_attributes = True\n</code></pre> <ul> <li>from_attributes: Permite crear el esquema desde objetos SQLAlchemy</li> <li>Antes se llamaba: <code>orm_mode = True</code> (versiones anteriores)</li> <li>Funci\u00f3n: Convierte <code>user.name</code> en <code>user['name']</code> autom\u00e1ticamente</li> </ul>"},{"location":"tutorial/api2/05-esquemas-validacion/#ejemplo-de-conversion","title":"Ejemplo de Conversi\u00f3n","text":"<pre><code># Objeto SQLAlchemy\nuser_db = User(id=1, name=\"Juan\", email=\"juan@email.com\")\n\n# Convertir a esquema Pydantic\nuser_schema = UserSchema.from_orm(user_db)  # Versi\u00f3n antigua\nuser_schema = UserSchema.model_validate(user_db)  # Versi\u00f3n nueva\n\n# Convertir a JSON\nuser_json = user_schema.model_dump_json()\n# Resultado: '{\"id\": 1, \"name\": \"Juan\", \"email\": \"juan@email.com\"}'\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#tipos-de-esquemas","title":"Tipos de Esquemas","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#patron-basecreateresponse","title":"Patr\u00f3n Base/Create/Response","text":"<p>Una pr\u00e1ctica com\u00fan es crear diferentes esquemas para diferentes prop\u00f3sitos:</p> <pre><code>from pydantic import BaseModel\nfrom typing import Optional\nfrom datetime import datetime\n\n# Esquema base con campos comunes\nclass UserBase(BaseModel):\n    name: str\n    email: str\n\n# Esquema para crear (sin ID)\nclass UserCreate(UserBase):\n    password: str  # Solo para creaci\u00f3n\n\n# Esquema para actualizar (campos opcionales)\nclass UserUpdate(BaseModel):\n    name: Optional[str] = None\n    email: Optional[str] = None\n    password: Optional[str] = None\n\n# Esquema para respuesta (con ID y sin password)\nclass UserResponse(UserBase):\n    id: int\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#uso-en-endpoints","title":"Uso en Endpoints","text":"<pre><code>from fastapi import APIRouter\n\nrouter = APIRouter()\n\n@router.post(\"/users/\", response_model=UserResponse)\ndef create_user(user: UserCreate):\n    # user.password est\u00e1 disponible aqu\u00ed\n    # pero no se incluir\u00e1 en la respuesta\n    pass\n\n@router.put(\"/users/{user_id}\", response_model=UserResponse)\ndef update_user(user_id: int, user: UserUpdate):\n    # Solo los campos proporcionados se actualizar\u00e1n\n    pass\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#validaciones-avanzadas","title":"Validaciones Avanzadas","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#validadores-de-campo","title":"Validadores de Campo","text":"<pre><code>from pydantic import BaseModel, validator, Field\nimport re\n\nclass User(BaseModel):\n    name: str = Field(..., min_length=2, max_length=50)\n    email: str\n    age: int = Field(..., ge=0, le=120)  # ge = greater equal, le = less equal\n\n    @validator('email')\n    def validate_email(cls, v):\n        if '@' not in v:\n            raise ValueError('Email debe contener @')\n        return v.lower()  # Convertir a min\u00fasculas\n\n    @validator('name')\n    def validate_name(cls, v):\n        if not v.strip():\n            raise ValueError('Nombre no puede estar vac\u00edo')\n        return v.strip().title()  # Capitalizar\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#field-para-restricciones","title":"Field() para Restricciones","text":"<pre><code>from pydantic import BaseModel, Field\nfrom typing import List\n\nclass Product(BaseModel):\n    name: str = Field(\n        ...,  # Requerido\n        min_length=3,\n        max_length=100,\n        description=\"Nombre del producto\"\n    )\n    price: float = Field(\n        ...,\n        gt=0,  # Greater than 0\n        description=\"Precio en USD\"\n    )\n    tags: List[str] = Field(\n        default=[],\n        max_items=10,\n        description=\"Etiquetas del producto\"\n    )\n    description: str = Field(\n        None,  # Opcional\n        max_length=1000,\n        description=\"Descripci\u00f3n detallada\"\n    )\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#validadores-root","title":"Validadores Root","text":"<pre><code>from pydantic import BaseModel, root_validator\n\nclass Order(BaseModel):\n    user_id: int\n    product_id: int\n    quantity: int\n    discount: float = 0.0\n\n    @root_validator\n    def validate_order(cls, values):\n        quantity = values.get('quantity')\n        discount = values.get('discount')\n\n        if quantity and quantity &lt;= 0:\n            raise ValueError('Cantidad debe ser positiva')\n\n        if discount and (discount &lt; 0 or discount &gt; 1):\n            raise ValueError('Descuento debe estar entre 0 y 1')\n\n        return values\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#tipos-de-datos-especiales","title":"Tipos de Datos Especiales","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#emailstr-y-httpurl","title":"EmailStr y HttpUrl","text":"<pre><code>from pydantic import BaseModel, EmailStr, HttpUrl\nfrom typing import Optional\n\nclass User(BaseModel):\n    name: str\n    email: EmailStr  # Validaci\u00f3n autom\u00e1tica de email\n    website: Optional[HttpUrl] = None  # URL v\u00e1lida\n\n# Nota: Requiere instalar email-validator\n# pip install email-validator\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#uuid-y-datetime","title":"UUID y Datetime","text":"<pre><code>from pydantic import BaseModel\nfrom uuid import UUID\nfrom datetime import datetime\nfrom typing import Optional\n\nclass User(BaseModel):\n    id: Optional[UUID] = None\n    name: str\n    created_at: Optional[datetime] = None\n    updated_at: Optional[datetime] = None\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#enums","title":"Enums","text":"<pre><code>from enum import Enum\nfrom pydantic import BaseModel\n\nclass StatusEnum(str, Enum):\n    ACTIVE = \"active\"\n    INACTIVE = \"inactive\"\n    PENDING = \"pending\"\n\nclass User(BaseModel):\n    name: str\n    status: StatusEnum = StatusEnum.ACTIVE\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#serializacion-y-deserializacion","title":"Serializaci\u00f3n y Deserializaci\u00f3n","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#de-json-a-objeto","title":"De JSON a Objeto","text":"<pre><code># JSON string\njson_data = '{\"name\": \"Juan\", \"email\": \"juan@email.com\", \"age\": 25}'\n\n# Crear objeto desde JSON\nuser = User.model_validate_json(json_data)\nprint(user.name)  # \"Juan\"\n\n# Desde diccionario\ndict_data = {\"name\": \"Ana\", \"email\": \"ana@email.com\", \"age\": 30}\nuser = User.model_validate(dict_data)\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#de-objeto-a-json","title":"De Objeto a JSON","text":"<pre><code>user = User(name=\"Carlos\", email=\"carlos@email.com\", age=28)\n\n# A diccionario\nuser_dict = user.model_dump()\n# {'name': 'Carlos', 'email': 'carlos@email.com', 'age': 28}\n\n# A JSON string\nuser_json = user.model_dump_json()\n# '{\"name\": \"Carlos\", \"email\": \"carlos@email.com\", \"age\": 28}'\n\n# Excluir campos\nuser_dict = user.model_dump(exclude={'age'})\n# {'name': 'Carlos', 'email': 'carlos@email.com'}\n\n# Solo incluir campos espec\u00edficos\nuser_dict = user.model_dump(include={'name', 'email'})\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#esquemas-anidados","title":"Esquemas Anidados","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#relaciones-simples","title":"Relaciones Simples","text":"<pre><code>class Address(BaseModel):\n    street: str\n    city: str\n    country: str\n\nclass User(BaseModel):\n    name: str\n    email: str\n    address: Address  # Esquema anidado\n\n# Uso\nuser_data = {\n    \"name\": \"Juan\",\n    \"email\": \"juan@email.com\",\n    \"address\": {\n        \"street\": \"Calle 123\",\n        \"city\": \"Madrid\",\n        \"country\": \"Espa\u00f1a\"\n    }\n}\n\nuser = User.model_validate(user_data)\nprint(user.address.city)  # \"Madrid\"\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#listas-de-objetos","title":"Listas de Objetos","text":"<pre><code>from typing import List\n\nclass OrderItem(BaseModel):\n    product_id: int\n    quantity: int\n    price: float\n\nclass Order(BaseModel):\n    id: int\n    user_id: int\n    items: List[OrderItem]  # Lista de esquemas\n    total: float\n\n# Uso\norder_data = {\n    \"id\": 1,\n    \"user_id\": 123,\n    \"items\": [\n        {\"product_id\": 1, \"quantity\": 2, \"price\": 10.0},\n        {\"product_id\": 2, \"quantity\": 1, \"price\": 25.0}\n    ],\n    \"total\": 45.0\n}\n\norder = Order.model_validate(order_data)\nprint(len(order.items))  # 2\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#configuracion-avanzada","title":"Configuraci\u00f3n Avanzada","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#alias-de-campos","title":"Alias de Campos","text":"<pre><code>from pydantic import BaseModel, Field\n\nclass User(BaseModel):\n    name: str = Field(alias=\"full_name\")\n    email: str = Field(alias=\"email_address\")\n\n    class Config:\n        allow_population_by_field_name = True  # Permite usar ambos nombres\n\n# Uso con alias\nuser_data = {\"full_name\": \"Juan\", \"email_address\": \"juan@email.com\"}\nuser = User.model_validate(user_data)\n\n# Uso con nombre original (si allow_population_by_field_name = True)\nuser_data = {\"name\": \"Juan\", \"email\": \"juan@email.com\"}\nuser = User.model_validate(user_data)\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#configuraciones-utiles","title":"Configuraciones \u00datiles","text":"<pre><code>class User(BaseModel):\n    name: str\n    email: str\n\n    class Config:\n        # Permitir campos extra (por defecto se ignoran)\n        extra = \"allow\"  # \"allow\", \"ignore\", \"forbid\"\n\n        # Validar asignaciones despu\u00e9s de la creaci\u00f3n\n        validate_assignment = True\n\n        # Usar enum values en lugar de nombres\n        use_enum_values = True\n\n        # Permitir mutaci\u00f3n de campos\n        allow_mutation = True\n\n        # Esquema JSON personalizado\n        schema_extra = {\n            \"example\": {\n                \"name\": \"Juan P\u00e9rez\",\n                \"email\": \"juan@example.com\"\n            }\n        }\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#manejo-de-errores","title":"Manejo de Errores","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#capturar-errores-de-validacion","title":"Capturar Errores de Validaci\u00f3n","text":"<pre><code>from pydantic import ValidationError\n\ntry:\n    user = User(name=\"\", email=\"email-invalido\", age=-5)\nexcept ValidationError as e:\n    print(e.json(indent=2))\n    # Muestra errores detallados en JSON\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#errores-personalizados","title":"Errores Personalizados","text":"<pre><code>from pydantic import BaseModel, validator, ValidationError\n\nclass User(BaseModel):\n    username: str\n    password: str\n\n    @validator('username')\n    def username_must_be_unique(cls, v):\n        # Simular verificaci\u00f3n en base de datos\n        existing_users = [\"admin\", \"root\", \"test\"]\n        if v.lower() in existing_users:\n            raise ValueError(f'Username \"{v}\" ya est\u00e1 en uso')\n        return v\n\n    @validator('password')\n    def password_strength(cls, v):\n        if len(v) &lt; 8:\n            raise ValueError('Password debe tener al menos 8 caracteres')\n        if not any(c.isupper() for c in v):\n            raise ValueError('Password debe tener al menos una may\u00fascula')\n        return v\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#integracion-con-fastapi","title":"Integraci\u00f3n con FastAPI","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#documentacion-automatica","title":"Documentaci\u00f3n Autom\u00e1tica","text":"<p>FastAPI usa los esquemas Pydantic para generar documentaci\u00f3n autom\u00e1tica:</p> <pre><code>from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()\n\nclass UserCreate(BaseModel):\n    \"\"\"Esquema para crear un usuario nuevo.\"\"\"\n    name: str = Field(..., description=\"Nombre completo del usuario\")\n    email: str = Field(..., description=\"Direcci\u00f3n de correo electr\u00f3nico\")\n    age: int = Field(..., ge=0, le=120, description=\"Edad en a\u00f1os\")\n\nclass UserResponse(BaseModel):\n    \"\"\"Esquema de respuesta con datos del usuario.\"\"\"\n    id: int\n    name: str\n    email: str\n    age: int\n\n@app.post(\"/users/\", response_model=UserResponse)\ndef create_user(user: UserCreate):\n    \"\"\"Crear un nuevo usuario en el sistema.\"\"\"\n    # La documentaci\u00f3n se genera autom\u00e1ticamente\n    pass\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#validacion-automatica","title":"Validaci\u00f3n Autom\u00e1tica","text":"<pre><code>@app.post(\"/users/\")\ndef create_user(user: UserCreate):\n    # FastAPI valida autom\u00e1ticamente:\n    # - Tipos de datos\n    # - Campos requeridos\n    # - Restricciones de Field()\n    # - Validadores personalizados\n\n    # Si hay errores, retorna 422 autom\u00e1ticamente\n    return {\"message\": \"Usuario creado\", \"user\": user}\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#1-organizacion-de-esquemas","title":"1. Organizaci\u00f3n de Esquemas","text":"<pre><code># app/schemas/user.py\nfrom pydantic import BaseModel\nfrom typing import Optional\n\nclass UserBase(BaseModel):\n    name: str\n    email: str\n\nclass UserCreate(UserBase):\n    password: str\n\nclass UserUpdate(BaseModel):\n    name: Optional[str] = None\n    email: Optional[str] = None\n\nclass UserInDB(UserBase):\n    id: int\n    hashed_password: str\n\n    class Config:\n        from_attributes = True\n\nclass UserResponse(UserBase):\n    id: int\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#2-reutilizacion-de-validadores","title":"2. Reutilizaci\u00f3n de Validadores","text":"<pre><code>from pydantic import validator\nimport re\n\ndef validate_email(email: str) -&gt; str:\n    \"\"\"Validador reutilizable para emails.\"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if not re.match(pattern, email):\n        raise ValueError('Formato de email inv\u00e1lido')\n    return email.lower()\n\nclass User(BaseModel):\n    email: str\n\n    @validator('email')\n    def email_validator(cls, v):\n        return validate_email(v)\n\nclass Contact(BaseModel):\n    email: str\n\n    @validator('email')\n    def email_validator(cls, v):\n        return validate_email(v)\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#3-documentacion-clara","title":"3. Documentaci\u00f3n Clara","text":"<pre><code>from pydantic import BaseModel, Field\nfrom typing import Optional\n\nclass Product(BaseModel):\n    \"\"\"Modelo de producto para el cat\u00e1logo.\n\n    Este esquema representa un producto en nuestro sistema de e-commerce.\n    Incluye validaciones para precio y nombre.\n    \"\"\"\n\n    name: str = Field(\n        ...,\n        min_length=3,\n        max_length=100,\n        description=\"Nombre del producto\",\n        example=\"iPhone 13 Pro\"\n    )\n\n    price: float = Field(\n        ...,\n        gt=0,\n        description=\"Precio en USD\",\n        example=999.99\n    )\n\n    description: Optional[str] = Field(\n        None,\n        max_length=1000,\n        description=\"Descripci\u00f3n detallada del producto\",\n        example=\"Smartphone con c\u00e1mara profesional\"\n    )\n\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"name\": \"MacBook Pro\",\n                \"price\": 1299.99,\n                \"description\": \"Laptop profesional para desarrolladores\"\n            }\n        }\n</code></pre>"},{"location":"tutorial/api2/05-esquemas-validacion/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":""},{"location":"tutorial/api2/05-esquemas-validacion/#ejercicio-1-esquema-de-producto-completo","title":"Ejercicio 1: Esquema de Producto Completo","text":"<p>Crea un esquema <code>ProductCreate</code> con: - Nombre (3-100 caracteres) - Precio (mayor a 0) - Categor\u00eda (enum: electronics, clothing, books) - Tags (lista de m\u00e1ximo 5 strings) - Descripci\u00f3n (opcional, m\u00e1ximo 500 caracteres)</p>"},{"location":"tutorial/api2/05-esquemas-validacion/#ejercicio-2-validacion-de-pedido","title":"Ejercicio 2: Validaci\u00f3n de Pedido","text":"<p>Crea un esquema <code>OrderCreate</code> que valide: - La cantidad sea positiva - El descuento est\u00e9 entre 0% y 50% - La fecha de entrega sea futura</p>"},{"location":"tutorial/api2/05-esquemas-validacion/#ejercicio-3-esquema-anidado","title":"Ejercicio 3: Esquema Anidado","text":"<p>Crea esquemas para: - <code>Address</code> (calle, ciudad, c\u00f3digo postal) - <code>User</code> que incluya una direcci\u00f3n - Validar que el c\u00f3digo postal tenga el formato correcto</p>"},{"location":"tutorial/api2/05-esquemas-validacion/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>En el siguiente cap\u00edtulo aprenderemos sobre Operaciones CRUD, donde utilizaremos estos esquemas para: - Validar datos antes de guardar en la base de datos - Convertir entre modelos SQLAlchemy y esquemas Pydantic - Manejar errores de validaci\u00f3n en las operaciones - Implementar l\u00f3gica de negocio robusta</p> <p>Siguiente: Operaciones CRUD</p> <p>Anterior: Base de Datos y Modelos</p>"},{"location":"tutorial/api2/06-operaciones-crud/","title":"6. Operaciones CRUD","text":""},{"location":"tutorial/api2/06-operaciones-crud/#que-es-crud","title":"\u00bfQu\u00e9 es CRUD?","text":"<p>CRUD es un acr\u00f3nimo que representa las cuatro operaciones b\u00e1sicas de persistencia de datos:</p> <ul> <li>Create (Crear) - Insertar nuevos registros</li> <li>Read (Leer) - Consultar registros existentes</li> <li>Update (Actualizar) - Modificar registros existentes</li> <li>Delete (Eliminar) - Borrar registros</li> </ul>"},{"location":"tutorial/api2/06-operaciones-crud/#por-que-una-capa-crud","title":"\u00bfPor qu\u00e9 una Capa CRUD?","text":"<p>La capa CRUD act\u00faa como un intermediario entre los endpoints de la API y la base de datos:</p> <pre><code>\ud83c\udf10 API Endpoints\n       \u2195\ufe0f\n\ud83d\udd27 Capa CRUD        \u2190 L\u00f3gica de negocio\n       \u2195\ufe0f\n\ud83d\uddc4\ufe0f Base de Datos\n</code></pre> <p>Ventajas: - Reutilizaci\u00f3n: Una funci\u00f3n CRUD puede usarse en m\u00faltiples endpoints - Mantenimiento: Cambios en la l\u00f3gica de datos en un solo lugar - Testing: F\u00e1cil probar la l\u00f3gica de negocio independientemente - Abstracci\u00f3n: Los endpoints no necesitan conocer detalles de la BD</p>"},{"location":"tutorial/api2/06-operaciones-crud/#estructura-de-nuestro-crud","title":"Estructura de Nuestro CRUD","text":""},{"location":"tutorial/api2/06-operaciones-crud/#enfoque-generico","title":"Enfoque Gen\u00e9rico","text":"<p>Nuestro proyecto usa un enfoque gen\u00e9rico que funciona con cualquier modelo:</p> <pre><code># app/crud/crud.py\nfrom sqlalchemy.orm import Session\nfrom app.models import models\nfrom app.schemas import schemas\n\ndef get_all(db: Session, model):\n    \"\"\"Obtener todos los registros de un modelo.\"\"\"\n    return db.query(model).all()\n\ndef get_by_id(db: Session, model, item_id: int):\n    \"\"\"Obtener un registro por ID.\"\"\"\n    return db.query(model).filter(model.id == item_id).first()\n\ndef create_item(db: Session, model, item_data):\n    \"\"\"Crear un nuevo registro.\"\"\"\n    db_item = model(**item_data.dict(exclude={'id'}))\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#ventajas-del-enfoque-generico","title":"Ventajas del Enfoque Gen\u00e9rico","text":"<ol> <li>Menos C\u00f3digo: Una funci\u00f3n para todos los modelos</li> <li>Consistencia: Mismo comportamiento para todas las entidades</li> <li>Mantenimiento: Cambios en un solo lugar</li> <li>Escalabilidad: F\u00e1cil agregar nuevos modelos</li> </ol>"},{"location":"tutorial/api2/06-operaciones-crud/#analisis-detallado-de-cada-operacion","title":"An\u00e1lisis Detallado de Cada Operaci\u00f3n","text":""},{"location":"tutorial/api2/06-operaciones-crud/#1-create-crear-registros","title":"1. CREATE - Crear Registros","text":"<pre><code>def create_item(db: Session, model, item_data):\n    \"\"\"Crear un nuevo registro en la base de datos.\n\n    Args:\n        db: Sesi\u00f3n de base de datos\n        model: Modelo SQLAlchemy (User, Product, Order)\n        item_data: Esquema Pydantic con los datos\n\n    Returns:\n        El objeto creado con ID asignado\n    \"\"\"\n    # 1. Convertir esquema Pydantic a diccionario\n    data_dict = item_data.dict(exclude={'id'})\n\n    # 2. Crear instancia del modelo\n    db_item = model(**data_dict)\n\n    # 3. Agregar a la sesi\u00f3n\n    db.add(db_item)\n\n    # 4. Confirmar cambios\n    db.commit()\n\n    # 5. Refrescar para obtener ID generado\n    db.refresh(db_item)\n\n    return db_item\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#paso-a-paso-del-create","title":"Paso a Paso del CREATE","text":"<p>1. Conversi\u00f3n de Datos <pre><code># Esquema Pydantic\nuser_data = UserCreate(name=\"Juan\", email=\"juan@email.com\")\n\n# Convertir a diccionario (excluyendo ID)\ndata_dict = user_data.dict(exclude={'id'})\n# Resultado: {'name': 'Juan', 'email': 'juan@email.com'}\n</code></pre></p> <p>2. Creaci\u00f3n del Objeto <pre><code># Crear instancia del modelo SQLAlchemy\ndb_user = User(**data_dict)\n# Equivale a: db_user = User(name=\"Juan\", email=\"juan@email.com\")\n</code></pre></p> <p>3. Persistencia <pre><code># Agregar a la sesi\u00f3n (a\u00fan no se guarda)\ndb.add(db_user)\n\n# Confirmar cambios (ejecuta INSERT)\ndb.commit()\n\n# Refrescar para obtener datos actualizados (como ID)\ndb.refresh(db_user)\nprint(db_user.id)  # Ahora tiene ID: 1, 2, 3...\n</code></pre></p>"},{"location":"tutorial/api2/06-operaciones-crud/#2-read-leer-registros","title":"2. READ - Leer Registros","text":""},{"location":"tutorial/api2/06-operaciones-crud/#obtener-todos-los-registros","title":"Obtener Todos los Registros","text":"<pre><code>def get_all(db: Session, model):\n    \"\"\"Obtener todos los registros de un modelo.\n\n    Args:\n        db: Sesi\u00f3n de base de datos\n        model: Modelo SQLAlchemy\n\n    Returns:\n        Lista de todos los registros\n    \"\"\"\n    return db.query(model).all()\n</code></pre> <p>SQL Generado: <pre><code>SELECT users.id, users.name, users.email \nFROM users;\n</code></pre></p>"},{"location":"tutorial/api2/06-operaciones-crud/#obtener-por-id","title":"Obtener por ID","text":"<pre><code>def get_by_id(db: Session, model, item_id: int):\n    \"\"\"Obtener un registro espec\u00edfico por ID.\n\n    Args:\n        db: Sesi\u00f3n de base de datos\n        model: Modelo SQLAlchemy\n        item_id: ID del registro a buscar\n\n    Returns:\n        El registro encontrado o None\n    \"\"\"\n    return db.query(model).filter(model.id == item_id).first()\n</code></pre> <p>SQL Generado: <pre><code>SELECT users.id, users.name, users.email \nFROM users \nWHERE users.id = 1 \nLIMIT 1;\n</code></pre></p>"},{"location":"tutorial/api2/06-operaciones-crud/#3-update-actualizar-registros","title":"3. UPDATE - Actualizar Registros","text":"<p>Aunque nuestro proyecto simple no incluye UPDATE, aqu\u00ed est\u00e1 la implementaci\u00f3n:</p> <pre><code>def update_item(db: Session, model, item_id: int, item_data):\n    \"\"\"Actualizar un registro existente.\n\n    Args:\n        db: Sesi\u00f3n de base de datos\n        model: Modelo SQLAlchemy\n        item_id: ID del registro a actualizar\n        item_data: Esquema con los nuevos datos\n\n    Returns:\n        El registro actualizado o None si no existe\n    \"\"\"\n    # 1. Buscar el registro existente\n    db_item = db.query(model).filter(model.id == item_id).first()\n\n    if not db_item:\n        return None\n\n    # 2. Obtener datos a actualizar (excluyendo None)\n    update_data = item_data.dict(exclude_unset=True, exclude={'id'})\n\n    # 3. Actualizar campos\n    for field, value in update_data.items():\n        setattr(db_item, field, value)\n\n    # 4. Confirmar cambios\n    db.commit()\n    db.refresh(db_item)\n\n    return db_item\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#actualizacion-parcial","title":"Actualizaci\u00f3n Parcial","text":"<pre><code># Esquema para actualizaci\u00f3n\nclass UserUpdate(BaseModel):\n    name: Optional[str] = None\n    email: Optional[str] = None\n\n# Uso\nuser_update = UserUpdate(name=\"Juan Carlos\")  # Solo actualizar nombre\nupdate_data = user_update.dict(exclude_unset=True)\n# Resultado: {'name': 'Juan Carlos'} - email no se incluye\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#4-delete-eliminar-registros","title":"4. DELETE - Eliminar Registros","text":"<pre><code>def delete_item(db: Session, model, item_id: int):\n    \"\"\"Eliminar un registro por ID.\n\n    Args:\n        db: Sesi\u00f3n de base de datos\n        model: Modelo SQLAlchemy\n        item_id: ID del registro a eliminar\n\n    Returns:\n        True si se elimin\u00f3, False si no exist\u00eda\n    \"\"\"\n    # 1. Buscar el registro\n    db_item = db.query(model).filter(model.id == item_id).first()\n\n    if not db_item:\n        return False\n\n    # 2. Eliminar\n    db.delete(db_item)\n    db.commit()\n\n    return True\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#operaciones-avanzadas","title":"Operaciones Avanzadas","text":""},{"location":"tutorial/api2/06-operaciones-crud/#busqueda-con-filtros","title":"B\u00fasqueda con Filtros","text":"<pre><code>def get_users_by_name(db: Session, name: str):\n    \"\"\"Buscar usuarios por nombre (b\u00fasqueda parcial).\"\"\"\n    return db.query(User).filter(User.name.like(f\"%{name}%\")).all()\n\ndef get_products_by_price_range(db: Session, min_price: float, max_price: float):\n    \"\"\"Buscar productos en un rango de precio.\"\"\"\n    return db.query(Product).filter(\n        Product.price &gt;= min_price,\n        Product.price &lt;= max_price\n    ).all()\n\ndef get_orders_by_user(db: Session, user_id: int):\n    \"\"\"Obtener todas las \u00f3rdenes de un usuario.\"\"\"\n    return db.query(Order).filter(Order.user_id == user_id).all()\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#paginacion","title":"Paginaci\u00f3n","text":"<pre><code>def get_paginated(db: Session, model, skip: int = 0, limit: int = 10):\n    \"\"\"Obtener registros con paginaci\u00f3n.\n\n    Args:\n        db: Sesi\u00f3n de base de datos\n        model: Modelo SQLAlchemy\n        skip: N\u00famero de registros a saltar\n        limit: N\u00famero m\u00e1ximo de registros a retornar\n\n    Returns:\n        Lista de registros paginados\n    \"\"\"\n    return db.query(model).offset(skip).limit(limit).all()\n\n# Uso\n# P\u00e1gina 1: skip=0, limit=10 (registros 1-10)\n# P\u00e1gina 2: skip=10, limit=10 (registros 11-20)\n# P\u00e1gina 3: skip=20, limit=10 (registros 21-30)\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#ordenamiento","title":"Ordenamiento","text":"<pre><code>from sqlalchemy import desc, asc\n\ndef get_products_sorted(db: Session, sort_by: str = \"name\", order: str = \"asc\"):\n    \"\"\"Obtener productos ordenados.\"\"\"\n    query = db.query(Product)\n\n    if sort_by == \"name\":\n        column = Product.name\n    elif sort_by == \"price\":\n        column = Product.price\n    else:\n        column = Product.id\n\n    if order == \"desc\":\n        query = query.order_by(desc(column))\n    else:\n        query = query.order_by(asc(column))\n\n    return query.all()\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#conteo-de-registros","title":"Conteo de Registros","text":"<pre><code>def count_items(db: Session, model):\n    \"\"\"Contar total de registros.\"\"\"\n    return db.query(model).count()\n\ndef count_users_by_domain(db: Session, domain: str):\n    \"\"\"Contar usuarios por dominio de email.\"\"\"\n    return db.query(User).filter(\n        User.email.like(f\"%@{domain}\")\n    ).count()\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#manejo-de-errores","title":"Manejo de Errores","text":""},{"location":"tutorial/api2/06-operaciones-crud/#errores-comunes-y-soluciones","title":"Errores Comunes y Soluciones","text":"<pre><code>from sqlalchemy.exc import IntegrityError\nfrom fastapi import HTTPException\n\ndef create_user_safe(db: Session, user_data: UserCreate):\n    \"\"\"Crear usuario con manejo de errores.\"\"\"\n    try:\n        # Verificar si el email ya existe\n        existing_user = db.query(User).filter(\n            User.email == user_data.email\n        ).first()\n\n        if existing_user:\n            raise HTTPException(\n                status_code=400,\n                detail=\"Email ya est\u00e1 registrado\"\n            )\n\n        # Crear usuario\n        db_user = User(**user_data.dict(exclude={'id'}))\n        db.add(db_user)\n        db.commit()\n        db.refresh(db_user)\n\n        return db_user\n\n    except IntegrityError:\n        db.rollback()\n        raise HTTPException(\n            status_code=400,\n            detail=\"Error de integridad en la base de datos\"\n        )\n    except Exception as e:\n        db.rollback()\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Error interno: {str(e)}\"\n        )\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#transacciones","title":"Transacciones","text":"<pre><code>def create_order_with_items(db: Session, order_data, items_data):\n    \"\"\"Crear orden con m\u00faltiples items en una transacci\u00f3n.\"\"\"\n    try:\n        # Iniciar transacci\u00f3n impl\u00edcita\n\n        # 1. Crear la orden\n        db_order = Order(**order_data.dict(exclude={'id'}))\n        db.add(db_order)\n        db.flush()  # Obtener ID sin hacer commit\n\n        # 2. Crear los items\n        for item_data in items_data:\n            db_item = OrderItem(\n                order_id=db_order.id,\n                **item_data.dict(exclude={'id'})\n            )\n            db.add(db_item)\n\n        # 3. Confirmar toda la transacci\u00f3n\n        db.commit()\n        db.refresh(db_order)\n\n        return db_order\n\n    except Exception as e:\n        # Revertir todos los cambios\n        db.rollback()\n        raise e\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#optimizacion-de-consultas","title":"Optimizaci\u00f3n de Consultas","text":""},{"location":"tutorial/api2/06-operaciones-crud/#eager-loading-carga-anticipada","title":"Eager Loading (Carga Anticipada)","text":"<pre><code>from sqlalchemy.orm import joinedload\n\ndef get_orders_with_user(db: Session):\n    \"\"\"Obtener \u00f3rdenes con datos del usuario (una sola consulta).\"\"\"\n    return db.query(Order).options(\n        joinedload(Order.user)\n    ).all()\n\n# Sin joinedload: N+1 consultas (1 para \u00f3rdenes + N para usuarios)\n# Con joinedload: 1 sola consulta con JOIN\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#consultas-especificas","title":"Consultas Espec\u00edficas","text":"<pre><code>def get_user_summary(db: Session, user_id: int):\n    \"\"\"Obtener resumen de usuario con estad\u00edsticas.\"\"\"\n    from sqlalchemy import func\n\n    result = db.query(\n        User.id,\n        User.name,\n        User.email,\n        func.count(Order.id).label('total_orders'),\n        func.sum(Order.total).label('total_spent')\n    ).outerjoin(Order).filter(\n        User.id == user_id\n    ).group_by(User.id).first()\n\n    return result\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#indices-para-rendimiento","title":"\u00cdndices para Rendimiento","text":"<pre><code># En los modelos\nfrom sqlalchemy import Index\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String, index=True)  # \u00cdndice simple\n\n    # \u00cdndice compuesto\n    __table_args__ = (\n        Index('idx_name_email', 'name', 'email'),\n    )\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#testing-de-crud","title":"Testing de CRUD","text":""},{"location":"tutorial/api2/06-operaciones-crud/#test-unitario","title":"Test Unitario","text":"<pre><code>import pytest\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom app.database.database import Base\nfrom app.models.models import User\nfrom app.crud.crud import create_item, get_by_id\nfrom app.schemas.schemas import User as UserSchema\n\n# Configurar base de datos de prueba\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n@pytest.fixture\ndef db_session():\n    Base.metadata.create_all(bind=engine)\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n        Base.metadata.drop_all(bind=engine)\n\ndef test_create_user(db_session):\n    # Datos de prueba\n    user_data = UserSchema(name=\"Test User\", email=\"test@example.com\")\n\n    # Crear usuario\n    created_user = create_item(db_session, User, user_data)\n\n    # Verificaciones\n    assert created_user.id is not None\n    assert created_user.name == \"Test User\"\n    assert created_user.email == \"test@example.com\"\n\ndef test_get_user_by_id(db_session):\n    # Crear usuario primero\n    user_data = UserSchema(name=\"Test User\", email=\"test@example.com\")\n    created_user = create_item(db_session, User, user_data)\n\n    # Buscar por ID\n    found_user = get_by_id(db_session, User, created_user.id)\n\n    # Verificaciones\n    assert found_user is not None\n    assert found_user.id == created_user.id\n    assert found_user.name == \"Test User\"\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"tutorial/api2/06-operaciones-crud/#1-separacion-de-responsabilidades","title":"1. Separaci\u00f3n de Responsabilidades","text":"<pre><code># \u2705 Bueno: CRUD solo maneja datos\ndef create_user(db: Session, user_data: UserCreate):\n    db_user = User(**user_data.dict(exclude={'id'}))\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n# \u274c Malo: CRUD con l\u00f3gica de negocio\ndef create_user(db: Session, user_data: UserCreate):\n    # Enviar email de bienvenida (deber\u00eda estar en otra capa)\n    send_welcome_email(user_data.email)\n\n    db_user = User(**user_data.dict(exclude={'id'}))\n    db.add(db_user)\n    db.commit()\n    return db_user\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#2-manejo-consistente-de-errores","title":"2. Manejo Consistente de Errores","text":"<pre><code>def get_user_or_404(db: Session, user_id: int):\n    \"\"\"Obtener usuario o lanzar error 404.\"\"\"\n    user = get_by_id(db, User, user_id)\n    if not user:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"Usuario con ID {user_id} no encontrado\"\n        )\n    return user\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#3-validaciones-de-negocio","title":"3. Validaciones de Negocio","text":"<pre><code>def create_order(db: Session, order_data: OrderCreate):\n    \"\"\"Crear orden con validaciones de negocio.\"\"\"\n    # Verificar que el usuario existe\n    user = get_user_or_404(db, order_data.user_id)\n\n    # Verificar que el producto existe\n    product = get_by_id(db, Product, order_data.product_id)\n    if not product:\n        raise HTTPException(404, \"Producto no encontrado\")\n\n    # Verificar stock (si tuvi\u00e9ramos ese campo)\n    # if product.stock &lt; order_data.quantity:\n    #     raise HTTPException(400, \"Stock insuficiente\")\n\n    # Crear la orden\n    return create_item(db, Order, order_data)\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#4-documentacion-clara","title":"4. Documentaci\u00f3n Clara","text":"<pre><code>def get_filtered_products(\n    db: Session,\n    name: Optional[str] = None,\n    min_price: Optional[float] = None,\n    max_price: Optional[float] = None,\n    skip: int = 0,\n    limit: int = 100\n):\n    \"\"\"Obtener productos con filtros opcionales.\n\n    Args:\n        db: Sesi\u00f3n de base de datos\n        name: Filtrar por nombre (b\u00fasqueda parcial)\n        min_price: Precio m\u00ednimo (inclusive)\n        max_price: Precio m\u00e1ximo (inclusive)\n        skip: N\u00famero de registros a saltar para paginaci\u00f3n\n        limit: N\u00famero m\u00e1ximo de registros a retornar\n\n    Returns:\n        Lista de productos que cumplen los criterios\n\n    Example:\n        # Buscar productos caros con \"phone\" en el nombre\n        products = get_filtered_products(\n            db, \n            name=\"phone\", \n            min_price=500.0,\n            skip=0, \n            limit=10\n        )\n    \"\"\"\n    query = db.query(Product)\n\n    if name:\n        query = query.filter(Product.name.like(f\"%{name}%\"))\n    if min_price is not None:\n        query = query.filter(Product.price &gt;= min_price)\n    if max_price is not None:\n        query = query.filter(Product.price &lt;= max_price)\n\n    return query.offset(skip).limit(limit).all()\n</code></pre>"},{"location":"tutorial/api2/06-operaciones-crud/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":""},{"location":"tutorial/api2/06-operaciones-crud/#ejercicio-1-crud-completo","title":"Ejercicio 1: CRUD Completo","text":"<p>Implementa las operaciones faltantes: - <code>update_item()</code> - <code>delete_item()</code> - Pru\u00e9balas con diferentes modelos</p>"},{"location":"tutorial/api2/06-operaciones-crud/#ejercicio-2-busquedas-avanzadas","title":"Ejercicio 2: B\u00fasquedas Avanzadas","text":"<p>Crea funciones para: - Buscar usuarios por dominio de email - Obtener productos m\u00e1s vendidos - Calcular total de ventas por usuario</p>"},{"location":"tutorial/api2/06-operaciones-crud/#ejercicio-3-validaciones","title":"Ejercicio 3: Validaciones","text":"<p>Agrega validaciones para: - No permitir \u00f3rdenes con cantidad 0 - Verificar que el email sea \u00fanico al crear usuarios - Validar que el precio sea positivo</p>"},{"location":"tutorial/api2/06-operaciones-crud/#ejercicio-4-optimizacion","title":"Ejercicio 4: Optimizaci\u00f3n","text":"<p>Implementa: - Paginaci\u00f3n con informaci\u00f3n de total de p\u00e1ginas - B\u00fasqueda con m\u00faltiples criterios - Cache de consultas frecuentes</p>"},{"location":"tutorial/api2/06-operaciones-crud/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>En el siguiente cap\u00edtulo aprenderemos sobre Rutas y Endpoints, donde: - Conectaremos las operaciones CRUD con HTTP - Definiremos los endpoints de nuestra API - Manejaremos par\u00e1metros de consulta y cuerpo de peticiones - Implementaremos respuestas HTTP apropiadas</p> <p>Siguiente: Rutas y Endpoints</p> <p>Anterior: Esquemas de Validaci\u00f3n</p>"},{"location":"tutorial/api2/07-rutas-endpoints/","title":"7. Rutas y Endpoints","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#que-son-las-rutas-y-endpoints","title":"\u00bfQu\u00e9 son las Rutas y Endpoints?","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#definiciones","title":"Definiciones","text":"<ul> <li>Ruta: El camino URL que identifica un recurso (<code>/users</code>, <code>/products/{id}</code>)</li> <li>Endpoint: La combinaci\u00f3n de una ruta + m\u00e9todo HTTP (<code>GET /users</code>, <code>POST /products</code>)</li> <li>Router: Agrupador de endpoints relacionados</li> </ul>"},{"location":"tutorial/api2/07-rutas-endpoints/#anatomia-de-un-endpoint","title":"Anatom\u00eda de un Endpoint","text":"<pre><code>M\u00c9TODO + RUTA + FUNCI\u00d3N = ENDPOINT\n\nPOST + /users + create_user() = Endpoint para crear usuarios\nGET + /users/{id} + get_user() = Endpoint para obtener un usuario\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#metodos-http-y-su-proposito","title":"M\u00e9todos HTTP y su Prop\u00f3sito","text":"M\u00e9todo Prop\u00f3sito Ejemplo Idempotente* <code>GET</code> Obtener datos <code>GET /users</code> \u2705 <code>POST</code> Crear recursos <code>POST /users</code> \u274c <code>PUT</code> Actualizar completo <code>PUT /users/1</code> \u2705 <code>PATCH</code> Actualizar parcial <code>PATCH /users/1</code> \u274c <code>DELETE</code> Eliminar <code>DELETE /users/1</code> \u2705 <p>*Idempotente: M\u00faltiples llamadas producen el mismo resultado</p>"},{"location":"tutorial/api2/07-rutas-endpoints/#estructura-de-routers-en-fastapi","title":"Estructura de Routers en FastAPI","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#apirouter","title":"APIRouter","text":"<p>FastAPI usa <code>APIRouter</code> para organizar endpoints:</p> <pre><code>from fastapi import APIRouter\n\n# Crear router con prefijo\nrouter = APIRouter(\n    prefix=\"/users\",           # Todas las rutas empezar\u00e1n con /users\n    tags=[\"users\"],           # Agrupaci\u00f3n en documentaci\u00f3n\n    responses={404: {\"description\": \"Not found\"}}\n)\n\n@router.get(\"/\")              # Ruta completa: GET /users/\ndef get_users():\n    pass\n\n@router.get(\"/{user_id}\")     # Ruta completa: GET /users/{user_id}\ndef get_user(user_id: int):\n    pass\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#organizacion-por-recursos","title":"Organizaci\u00f3n por Recursos","text":"<p>Cada recurso (User, Product, Order) tiene su propio router:</p> <pre><code>app/routers/\n\u251c\u2500\u2500 users.py      # Endpoints de usuarios\n\u251c\u2500\u2500 products.py   # Endpoints de productos\n\u2514\u2500\u2500 orders.py     # Endpoints de \u00f3rdenes\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#implementacion-de-routers","title":"Implementaci\u00f3n de Routers","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#router-de-usuarios","title":"Router de Usuarios","text":"<p>Veamos <code>app/routers/users.py</code> en detalle:</p> <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom typing import List\n\nfrom app.crud import crud\nfrom app.schemas import schemas\nfrom app.models import models\nfrom app.database.database import get_db\n\n# Crear router\nrouter = APIRouter(\n    prefix=\"/users\",\n    tags=[\"users\"]\n)\n\n@router.post(\"/\", response_model=schemas.User)\ndef create_user(user: schemas.User, db: Session = Depends(get_db)):\n    \"\"\"Crear un nuevo usuario.\"\"\"\n    return crud.create_item(db, models.User, user)\n\n@router.get(\"/\", response_model=List[schemas.User])\ndef get_users(db: Session = Depends(get_db)):\n    \"\"\"Obtener todos los usuarios.\"\"\"\n    return crud.get_all(db, models.User)\n\n@router.get(\"/{user_id}\", response_model=schemas.User)\ndef get_user(user_id: int, db: Session = Depends(get_db)):\n    \"\"\"Obtener un usuario por ID.\"\"\"\n    user = crud.get_by_id(db, models.User, user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"Usuario no encontrado\")\n    return user\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#analisis-detallado","title":"An\u00e1lisis Detallado","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#1-decoradores-de-ruta","title":"1. Decoradores de Ruta","text":"<pre><code>@router.post(\"/\", response_model=schemas.User)\n</code></pre> <ul> <li><code>@router.post</code>: Define m\u00e9todo HTTP POST</li> <li><code>\"/\"</code>: Ruta relativa (se combina con prefix)</li> <li><code>response_model</code>: Esquema para la respuesta</li> </ul>"},{"location":"tutorial/api2/07-rutas-endpoints/#2-parametros-de-funcion","title":"2. Par\u00e1metros de Funci\u00f3n","text":"<pre><code>def create_user(user: schemas.User, db: Session = Depends(get_db)):\n</code></pre> <ul> <li><code>user: schemas.User</code>: Cuerpo de la petici\u00f3n (JSON \u2192 Pydantic)</li> <li><code>db: Session = Depends(get_db)</code>: Inyecci\u00f3n de dependencia</li> </ul>"},{"location":"tutorial/api2/07-rutas-endpoints/#3-dependency-injection","title":"3. Dependency Injection","text":"<pre><code>db: Session = Depends(get_db)\n</code></pre> <p>FastAPI autom\u00e1ticamente: 1. Llama a <code>get_db()</code> 2. Obtiene una sesi\u00f3n de base de datos 3. La pasa como par\u00e1metro <code>db</code> 4. Cierra la sesi\u00f3n al terminar</p>"},{"location":"tutorial/api2/07-rutas-endpoints/#4-response-model","title":"4. Response Model","text":"<pre><code>response_model=schemas.User\n</code></pre> <ul> <li>Valida que la respuesta cumpla el esquema</li> <li>Genera documentaci\u00f3n autom\u00e1tica</li> <li>Serializa el objeto a JSON</li> <li>Excluye campos no definidos en el esquema</li> </ul>"},{"location":"tutorial/api2/07-rutas-endpoints/#tipos-de-parametros","title":"Tipos de Par\u00e1metros","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#1-path-parameters-parametros-de-ruta","title":"1. Path Parameters (Par\u00e1metros de Ruta)","text":"<pre><code>@router.get(\"/users/{user_id}\")\ndef get_user(user_id: int):\n    \"\"\"user_id se extrae de la URL.\"\"\"\n    pass\n\n# Ejemplos de URLs:\n# GET /users/1     \u2192 user_id = 1\n# GET /users/123   \u2192 user_id = 123\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#validacion-de-path-parameters","title":"Validaci\u00f3n de Path Parameters","text":"<pre><code>from fastapi import Path\n\n@router.get(\"/users/{user_id}\")\ndef get_user(\n    user_id: int = Path(..., gt=0, description=\"ID del usuario\")\n):\n    \"\"\"user_id debe ser mayor a 0.\"\"\"\n    pass\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#2-query-parameters-parametros-de-consulta","title":"2. Query Parameters (Par\u00e1metros de Consulta)","text":"<pre><code>@router.get(\"/users/\")\ndef get_users(\n    skip: int = 0,\n    limit: int = 10,\n    name: str = None,\n    db: Session = Depends(get_db)\n):\n    \"\"\"Par\u00e1metros opcionales en la URL.\"\"\"\n    # Implementar filtros y paginaci\u00f3n\n    pass\n\n# Ejemplos de URLs:\n# GET /users/                           \u2192 skip=0, limit=10, name=None\n# GET /users/?skip=20&amp;limit=5          \u2192 skip=20, limit=5, name=None\n# GET /users/?name=Juan&amp;limit=100      \u2192 skip=0, limit=100, name=\"Juan\"\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#validacion-de-query-parameters","title":"Validaci\u00f3n de Query Parameters","text":"<pre><code>from fastapi import Query\n\n@router.get(\"/users/\")\ndef get_users(\n    skip: int = Query(0, ge=0, description=\"Registros a saltar\"),\n    limit: int = Query(10, ge=1, le=100, description=\"M\u00e1ximo registros\"),\n    name: str = Query(None, min_length=2, description=\"Filtrar por nombre\")\n):\n    pass\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#3-request-body-cuerpo-de-peticion","title":"3. Request Body (Cuerpo de Petici\u00f3n)","text":"<pre><code>@router.post(\"/users/\")\ndef create_user(user: schemas.UserCreate):\n    \"\"\"user se extrae del JSON del cuerpo.\"\"\"\n    pass\n\n# Ejemplo de petici\u00f3n:\n# POST /users/\n# Content-Type: application/json\n# {\n#   \"name\": \"Juan P\u00e9rez\",\n#   \"email\": \"juan@example.com\"\n# }\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#4-combinando-parametros","title":"4. Combinando Par\u00e1metros","text":"<pre><code>@router.put(\"/users/{user_id}\")\ndef update_user(\n    user_id: int,                    # Path parameter\n    user: schemas.UserUpdate,        # Request body\n    force: bool = False,             # Query parameter\n    db: Session = Depends(get_db)    # Dependency\n):\n    \"\"\"Actualizar usuario con m\u00faltiples tipos de par\u00e1metros.\"\"\"\n    pass\n\n# Ejemplo de petici\u00f3n:\n# PUT /users/123?force=true\n# {\n#   \"name\": \"Juan Carlos\"\n# }\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#manejo-de-respuestas-http","title":"Manejo de Respuestas HTTP","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#codigos-de-estado","title":"C\u00f3digos de Estado","text":"<pre><code>from fastapi import status\n\n@router.post(\"/users/\", status_code=status.HTTP_201_CREATED)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    \"\"\"Retorna 201 Created en lugar de 200 OK.\"\"\"\n    return crud.create_item(db, models.User, user)\n\n@router.delete(\"/users/{user_id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_user(user_id: int, db: Session = Depends(get_db)):\n    \"\"\"Retorna 204 No Content (sin cuerpo de respuesta).\"\"\"\n    # L\u00f3gica de eliminaci\u00f3n\n    pass\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#respuestas-de-error","title":"Respuestas de Error","text":"<pre><code>from fastapi import HTTPException\n\n@router.get(\"/users/{user_id}\")\ndef get_user(user_id: int, db: Session = Depends(get_db)):\n    user = crud.get_by_id(db, models.User, user_id)\n\n    if not user:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Usuario no encontrado\"\n        )\n\n    return user\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#multiples-respuestas-posibles","title":"M\u00faltiples Respuestas Posibles","text":"<pre><code>@router.get(\n    \"/users/{user_id}\",\n    response_model=schemas.User,\n    responses={\n        404: {\"description\": \"Usuario no encontrado\"},\n        400: {\"description\": \"ID de usuario inv\u00e1lido\"}\n    }\n)\ndef get_user(user_id: int, db: Session = Depends(get_db)):\n    if user_id &lt;= 0:\n        raise HTTPException(400, \"ID debe ser positivo\")\n\n    user = crud.get_by_id(db, models.User, user_id)\n    if not user:\n        raise HTTPException(404, \"Usuario no encontrado\")\n\n    return user\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#endpoints-completos-por-recurso","title":"Endpoints Completos por Recurso","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#usuarios-crud-completo","title":"Usuarios (CRUD Completo)","text":"<pre><code># app/routers/users.py\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\n\nfrom app.crud import crud\nfrom app.schemas import schemas\nfrom app.models import models\nfrom app.database.database import get_db\n\nrouter = APIRouter(prefix=\"/users\", tags=[\"users\"])\n\n@router.post(\"/\", response_model=schemas.User, status_code=status.HTTP_201_CREATED)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    \"\"\"Crear un nuevo usuario.\"\"\"\n    # Verificar si el email ya existe\n    existing_user = db.query(models.User).filter(\n        models.User.email == user.email\n    ).first()\n\n    if existing_user:\n        raise HTTPException(\n            status_code=400,\n            detail=\"Email ya est\u00e1 registrado\"\n        )\n\n    return crud.create_item(db, models.User, user)\n\n@router.get(\"/\", response_model=List[schemas.User])\ndef get_users(\n    skip: int = 0,\n    limit: int = 100,\n    name: Optional[str] = None,\n    db: Session = Depends(get_db)\n):\n    \"\"\"Obtener lista de usuarios con filtros opcionales.\"\"\"\n    query = db.query(models.User)\n\n    if name:\n        query = query.filter(models.User.name.like(f\"%{name}%\"))\n\n    users = query.offset(skip).limit(limit).all()\n    return users\n\n@router.get(\"/{user_id}\", response_model=schemas.User)\ndef get_user(user_id: int, db: Session = Depends(get_db)):\n    \"\"\"Obtener un usuario por ID.\"\"\"\n    user = crud.get_by_id(db, models.User, user_id)\n\n    if not user:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"Usuario con ID {user_id} no encontrado\"\n        )\n\n    return user\n\n@router.put(\"/{user_id}\", response_model=schemas.User)\ndef update_user(\n    user_id: int,\n    user_update: schemas.UserUpdate,\n    db: Session = Depends(get_db)\n):\n    \"\"\"Actualizar un usuario existente.\"\"\"\n    user = crud.get_by_id(db, models.User, user_id)\n\n    if not user:\n        raise HTTPException(404, \"Usuario no encontrado\")\n\n    # Actualizar campos\n    update_data = user_update.dict(exclude_unset=True)\n    for field, value in update_data.items():\n        setattr(user, field, value)\n\n    db.commit()\n    db.refresh(user)\n    return user\n\n@router.delete(\"/{user_id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_user(user_id: int, db: Session = Depends(get_db)):\n    \"\"\"Eliminar un usuario.\"\"\"\n    user = crud.get_by_id(db, models.User, user_id)\n\n    if not user:\n        raise HTTPException(404, \"Usuario no encontrado\")\n\n    db.delete(user)\n    db.commit()\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#productos-con-busqueda-avanzada","title":"Productos con B\u00fasqueda Avanzada","text":"<pre><code># app/routers/products.py\nfrom fastapi import APIRouter, Depends, Query\nfrom typing import List, Optional\n\nrouter = APIRouter(prefix=\"/products\", tags=[\"products\"])\n\n@router.get(\"/\", response_model=List[schemas.Product])\ndef get_products(\n    skip: int = Query(0, ge=0),\n    limit: int = Query(10, ge=1, le=100),\n    name: Optional[str] = Query(None, min_length=2),\n    min_price: Optional[float] = Query(None, ge=0),\n    max_price: Optional[float] = Query(None, ge=0),\n    sort_by: str = Query(\"name\", regex=\"^(name|price|id)$\"),\n    order: str = Query(\"asc\", regex=\"^(asc|desc)$\"),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Buscar productos con filtros avanzados.\"\"\"\n    query = db.query(models.Product)\n\n    # Aplicar filtros\n    if name:\n        query = query.filter(models.Product.name.like(f\"%{name}%\"))\n    if min_price is not None:\n        query = query.filter(models.Product.price &gt;= min_price)\n    if max_price is not None:\n        query = query.filter(models.Product.price &lt;= max_price)\n\n    # Aplicar ordenamiento\n    if sort_by == \"name\":\n        column = models.Product.name\n    elif sort_by == \"price\":\n        column = models.Product.price\n    else:\n        column = models.Product.id\n\n    if order == \"desc\":\n        query = query.order_by(column.desc())\n    else:\n        query = query.order_by(column.asc())\n\n    # Aplicar paginaci\u00f3n\n    products = query.offset(skip).limit(limit).all()\n    return products\n\n@router.get(\"/search\", response_model=List[schemas.Product])\ndef search_products(\n    q: str = Query(..., min_length=2, description=\"T\u00e9rmino de b\u00fasqueda\"),\n    db: Session = Depends(get_db)\n):\n    \"\"\"B\u00fasqueda de texto completo en productos.\"\"\"\n    products = db.query(models.Product).filter(\n        models.Product.name.like(f\"%{q}%\")\n    ).all()\n\n    return products\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#ordenes-con-validaciones-de-negocio","title":"\u00d3rdenes con Validaciones de Negocio","text":"<pre><code># app/routers/orders.py\nfrom fastapi import APIRouter, Depends, HTTPException\n\nrouter = APIRouter(prefix=\"/orders\", tags=[\"orders\"])\n\n@router.post(\"/\", response_model=schemas.Order, status_code=201)\ndef create_order(order: schemas.OrderCreate, db: Session = Depends(get_db)):\n    \"\"\"Crear una nueva orden con validaciones.\"\"\"\n    # Validar que el usuario existe\n    user = crud.get_by_id(db, models.User, order.user_id)\n    if not user:\n        raise HTTPException(404, \"Usuario no encontrado\")\n\n    # Validar que el producto existe\n    product = crud.get_by_id(db, models.Product, order.product_id)\n    if not product:\n        raise HTTPException(404, \"Producto no encontrado\")\n\n    # Validar cantidad\n    if order.quantity &lt;= 0:\n        raise HTTPException(400, \"La cantidad debe ser positiva\")\n\n    return crud.create_item(db, models.Order, order)\n\n@router.get(\"/user/{user_id}\", response_model=List[schemas.Order])\ndef get_user_orders(user_id: int, db: Session = Depends(get_db)):\n    \"\"\"Obtener todas las \u00f3rdenes de un usuario.\"\"\"\n    # Verificar que el usuario existe\n    user = crud.get_by_id(db, models.User, user_id)\n    if not user:\n        raise HTTPException(404, \"Usuario no encontrado\")\n\n    orders = db.query(models.Order).filter(\n        models.Order.user_id == user_id\n    ).all()\n\n    return orders\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#middleware-y-hooks","title":"Middleware y Hooks","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#middleware-de-logging","title":"Middleware de Logging","text":"<pre><code>from fastapi import Request\nimport time\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n@app.middleware(\"http\")\nasync def log_requests(request: Request, call_next):\n    start_time = time.time()\n\n    # Procesar petici\u00f3n\n    response = await call_next(request)\n\n    # Calcular tiempo de procesamiento\n    process_time = time.time() - start_time\n\n    logger.info(\n        f\"{request.method} {request.url} - \"\n        f\"Status: {response.status_code} - \"\n        f\"Time: {process_time:.4f}s\"\n    )\n\n    return response\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#manejo-global-de-errores","title":"Manejo Global de Errores","text":"<pre><code>from fastapi import Request, HTTPException\nfrom fastapi.responses import JSONResponse\nfrom sqlalchemy.exc import IntegrityError\n\n@app.exception_handler(IntegrityError)\nasync def integrity_error_handler(request: Request, exc: IntegrityError):\n    return JSONResponse(\n        status_code=400,\n        content={\"detail\": \"Error de integridad en la base de datos\"}\n    )\n\n@app.exception_handler(ValueError)\nasync def value_error_handler(request: Request, exc: ValueError):\n    return JSONResponse(\n        status_code=400,\n        content={\"detail\": str(exc)}\n    )\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#documentacion-automatica","title":"Documentaci\u00f3n Autom\u00e1tica","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#configuracion-de-openapi","title":"Configuraci\u00f3n de OpenAPI","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI(\n    title=\"API Simple\",\n    description=\"Una API REST simple para aprender FastAPI\",\n    version=\"1.0.0\",\n    docs_url=\"/docs\",      # Swagger UI\n    redoc_url=\"/redoc\",    # ReDoc\n    openapi_url=\"/openapi.json\"\n)\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#metadatos-de-endpoints","title":"Metadatos de Endpoints","text":"<pre><code>@router.post(\n    \"/users/\",\n    response_model=schemas.User,\n    status_code=201,\n    summary=\"Crear usuario\",\n    description=\"Crear un nuevo usuario en el sistema\",\n    response_description=\"Usuario creado exitosamente\",\n    tags=[\"users\"],\n    responses={\n        400: {\"description\": \"Email ya registrado\"},\n        422: {\"description\": \"Datos de entrada inv\u00e1lidos\"}\n    }\n)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    \"\"\"Crear un nuevo usuario.\n\n    - **name**: Nombre completo del usuario\n    - **email**: Direcci\u00f3n de correo electr\u00f3nico \u00fanica\n    \"\"\"\n    pass\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#testing-de-endpoints","title":"Testing de Endpoints","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#test-con-testclient","title":"Test con TestClient","text":"<pre><code>from fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_create_user():\n    response = client.post(\n        \"/users/\",\n        json={\"name\": \"Test User\", \"email\": \"test@example.com\"}\n    )\n    assert response.status_code == 201\n    data = response.json()\n    assert data[\"name\"] == \"Test User\"\n    assert data[\"email\"] == \"test@example.com\"\n    assert \"id\" in data\n\ndef test_get_user():\n    # Crear usuario primero\n    create_response = client.post(\n        \"/users/\",\n        json={\"name\": \"Test User\", \"email\": \"test@example.com\"}\n    )\n    user_id = create_response.json()[\"id\"]\n\n    # Obtener usuario\n    response = client.get(f\"/users/{user_id}\")\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"id\"] == user_id\n\ndef test_get_nonexistent_user():\n    response = client.get(\"/users/999\")\n    assert response.status_code == 404\n    assert \"no encontrado\" in response.json()[\"detail\"]\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#1-consistencia-en-urls","title":"1. Consistencia en URLs","text":"<pre><code># \u2705 Bueno: URLs consistentes\n/users/          # GET (lista), POST (crear)\n/users/{id}      # GET (obtener), PUT (actualizar), DELETE (eliminar)\n/users/{id}/orders  # GET \u00f3rdenes del usuario\n\n# \u274c Malo: URLs inconsistentes\n/getUsers/\n/user/create\n/deleteUser/{id}\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#2-codigos-de-estado-apropiados","title":"2. C\u00f3digos de Estado Apropiados","text":"<pre><code># \u2705 Bueno\n@router.post(\"/users/\", status_code=201)  # Created\n@router.get(\"/users/\")                    # 200 OK (por defecto)\n@router.put(\"/users/{id}\")                # 200 OK\n@router.delete(\"/users/{id}\", status_code=204)  # No Content\n\n# \u274c Malo: Siempre 200\n@router.post(\"/users/\")  # Deber\u00eda ser 201\n@router.delete(\"/users/{id}\")  # Deber\u00eda ser 204\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#3-validacion-completa","title":"3. Validaci\u00f3n Completa","text":"<pre><code>@router.get(\"/users/{user_id}\")\ndef get_user(\n    user_id: int = Path(..., gt=0, description=\"ID del usuario\"),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Validar que user_id sea positivo.\"\"\"\n    pass\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#4-manejo-de-errores-descriptivo","title":"4. Manejo de Errores Descriptivo","text":"<pre><code># \u2705 Bueno: Errores descriptivos\nif not user:\n    raise HTTPException(\n        status_code=404,\n        detail=f\"Usuario con ID {user_id} no encontrado\"\n    )\n\n# \u274c Malo: Errores gen\u00e9ricos\nif not user:\n    raise HTTPException(404, \"Not found\")\n</code></pre>"},{"location":"tutorial/api2/07-rutas-endpoints/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":""},{"location":"tutorial/api2/07-rutas-endpoints/#ejercicio-1-endpoint-de-estadisticas","title":"Ejercicio 1: Endpoint de Estad\u00edsticas","text":"<p>Crea un endpoint <code>GET /stats</code> que retorne: - Total de usuarios - Total de productos - Total de \u00f3rdenes - Producto m\u00e1s vendido</p>"},{"location":"tutorial/api2/07-rutas-endpoints/#ejercicio-2-busqueda-avanzada","title":"Ejercicio 2: B\u00fasqueda Avanzada","text":"<p>Implementa <code>GET /search</code> que permita buscar en: - Usuarios por nombre o email - Productos por nombre - \u00d3rdenes por ID de usuario</p>"},{"location":"tutorial/api2/07-rutas-endpoints/#ejercicio-3-validaciones-de-negocio","title":"Ejercicio 3: Validaciones de Negocio","text":"<p>Agrega validaciones para: - No permitir crear \u00f3rdenes de productos inexistentes - Verificar que el email sea \u00fanico al crear usuarios - Validar rangos de precio en productos</p>"},{"location":"tutorial/api2/07-rutas-endpoints/#ejercicio-4-paginacion-completa","title":"Ejercicio 4: Paginaci\u00f3n Completa","text":"<p>Implementa paginaci\u00f3n que incluya: - N\u00famero total de registros - N\u00famero total de p\u00e1ginas - Enlaces a p\u00e1gina anterior/siguiente</p>"},{"location":"tutorial/api2/07-rutas-endpoints/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>En el siguiente cap\u00edtulo aprenderemos sobre la Aplicaci\u00f3n Principal, donde: - Configuraremos la aplicaci\u00f3n FastAPI - Registraremos todos los routers - Configuraremos middleware - Manejaremos la inicializaci\u00f3n de la base de datos</p> <p>Siguiente: Aplicaci\u00f3n Principal</p> <p>Anterior: Operaciones CRUD</p>"},{"location":"tutorial/api2/08-aplicacion-principal/","title":"8. Aplicaci\u00f3n Principal","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#que-es-mainpy","title":"\u00bfQu\u00e9 es main.py?","text":"<p>El archivo <code>main.py</code> es el punto de entrada de nuestra aplicaci\u00f3n FastAPI. Es donde:</p> <ul> <li>Se crea la instancia de FastAPI</li> <li>Se configuran los routers</li> <li>Se inicializa la base de datos</li> <li>Se configuran middleware y CORS</li> <li>Se definen endpoints globales</li> </ul>"},{"location":"tutorial/api2/08-aplicacion-principal/#arquitectura-de-la-aplicacion","title":"Arquitectura de la Aplicaci\u00f3n","text":"<pre><code>main.py (Aplicaci\u00f3n Principal)\n    \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  FastAPI App                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u2022 Configuraci\u00f3n                    \u2502\n\u2502  \u2022 Middleware                       \u2502\n\u2502  \u2022 Routers                          \u2502\n\u2502  \u2022 Manejo de errores                \u2502\n\u2502  \u2022 Documentaci\u00f3n                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Routers                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u2022 /users    (users.py)             \u2502\n\u2502  \u2022 /products (products.py)          \u2502\n\u2502  \u2022 /orders   (orders.py)            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Base de Datos                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u2022 Modelos SQLAlchemy               \u2502\n\u2502  \u2022 Sesiones                         \u2502\n\u2502  \u2022 Tablas                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#implementacion-basica","title":"Implementaci\u00f3n B\u00e1sica","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#version-simple-nuestro-proyecto","title":"Versi\u00f3n Simple (Nuestro Proyecto)","text":"<pre><code># main.py\nfrom fastapi import FastAPI\nfrom app.database.database import engine\nfrom app.models import models\nfrom app.routers import users, products, orders\n\n# Crear tablas en la base de datos\nmodels.Base.metadata.create_all(bind=engine)\n\n# Crear aplicaci\u00f3n FastAPI\napp = FastAPI()\n\n# Incluir routers\napp.include_router(users.router)\napp.include_router(products.router)\napp.include_router(orders.router)\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"API Simple\"}\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#analisis-paso-a-paso","title":"An\u00e1lisis Paso a Paso","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#1-importaciones","title":"1. Importaciones","text":"<pre><code>from fastapi import FastAPI\nfrom app.database.database import engine\nfrom app.models import models\nfrom app.routers import users, products, orders\n</code></pre> <ul> <li><code>FastAPI</code>: Clase principal de la aplicaci\u00f3n</li> <li><code>engine</code>: Motor de base de datos SQLAlchemy</li> <li><code>models</code>: Modelos de datos (User, Product, Order)</li> <li><code>routers</code>: M\u00f3dulos con endpoints organizados</li> </ul>"},{"location":"tutorial/api2/08-aplicacion-principal/#2-creacion-de-tablas","title":"2. Creaci\u00f3n de Tablas","text":"<pre><code>models.Base.metadata.create_all(bind=engine)\n</code></pre> <p>\u00bfQu\u00e9 hace esto? - Examina todos los modelos que heredan de <code>Base</code> - Genera SQL CREATE TABLE para cada modelo - Ejecuta las sentencias en la base de datos - Idempotente: No falla si las tablas ya existen</p> <p>SQL Generado: <pre><code>CREATE TABLE IF NOT EXISTS users (\n    id INTEGER NOT NULL PRIMARY KEY,\n    name VARCHAR,\n    email VARCHAR\n);\n\nCREATE TABLE IF NOT EXISTS products (\n    id INTEGER NOT NULL PRIMARY KEY,\n    name VARCHAR,\n    price FLOAT\n);\n\nCREATE TABLE IF NOT EXISTS orders (\n    id INTEGER NOT NULL PRIMARY KEY,\n    user_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER\n);\n</code></pre></p>"},{"location":"tutorial/api2/08-aplicacion-principal/#3-creacion-de-la-aplicacion","title":"3. Creaci\u00f3n de la Aplicaci\u00f3n","text":"<pre><code>app = FastAPI()\n</code></pre> <p>Crea una instancia de FastAPI con configuraci\u00f3n por defecto.</p>"},{"location":"tutorial/api2/08-aplicacion-principal/#4-registro-de-routers","title":"4. Registro de Routers","text":"<pre><code>app.include_router(users.router)\napp.include_router(products.router)\napp.include_router(orders.router)\n</code></pre> <p>\u00bfQu\u00e9 hace <code>include_router()</code>? - Registra todos los endpoints del router - Combina prefijos de ruta - Agrupa endpoints por tags - Incluye en la documentaci\u00f3n autom\u00e1tica</p> <p>Resultado: <pre><code>Endpoints registrados:\nGET    /users/\nPOST   /users/\nGET    /users/{user_id}\nGET    /products/\nPOST   /products/\nGET    /products/{product_id}\nGET    /orders/\nPOST   /orders/\nGET    /orders/{order_id}\n</code></pre></p>"},{"location":"tutorial/api2/08-aplicacion-principal/#5-endpoint-raiz","title":"5. Endpoint Ra\u00edz","text":"<pre><code>@app.get(\"/\")\ndef root():\n    return {\"message\": \"API Simple\"}\n</code></pre> <p>Endpoint b\u00e1sico para verificar que la API est\u00e1 funcionando.</p>"},{"location":"tutorial/api2/08-aplicacion-principal/#configuracion-avanzada","title":"Configuraci\u00f3n Avanzada","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#aplicacion-con-metadatos","title":"Aplicaci\u00f3n con Metadatos","text":"<pre><code>from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nimport logging\n\n# Configurar logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# Crear aplicaci\u00f3n con metadatos\napp = FastAPI(\n    title=\"API Simple\",\n    description=\"\"\"Una API REST simple para aprender FastAPI.\n\n    Esta API permite gestionar:\n    * **Usuarios**: Crear y consultar usuarios\n    * **Productos**: Gestionar cat\u00e1logo de productos\n    * **\u00d3rdenes**: Procesar pedidos de usuarios\n    \"\"\",\n    version=\"1.0.0\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Equipo de Desarrollo\",\n        \"url\": \"http://example.com/contact/\",\n        \"email\": \"dev@example.com\",\n    },\n    license_info={\n        \"name\": \"MIT\",\n        \"url\": \"https://opensource.org/licenses/MIT\",\n    },\n    docs_url=\"/docs\",      # URL de Swagger UI\n    redoc_url=\"/redoc\",    # URL de ReDoc\n    openapi_url=\"/openapi.json\"  # URL del esquema OpenAPI\n)\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#configuracion-de-cors","title":"Configuraci\u00f3n de CORS","text":"<pre><code># Configurar CORS para aplicaciones web\norigins = [\n    \"http://localhost\",\n    \"http://localhost:3000\",  # React dev server\n    \"http://localhost:8080\",  # Vue dev server\n    \"https://myapp.com\",      # Producci\u00f3n\n]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#middleware-personalizado","title":"Middleware Personalizado","text":"<pre><code>from fastapi import Request, Response\nimport time\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    \"\"\"Agregar tiempo de procesamiento a las respuestas.\"\"\"\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n\n@app.middleware(\"http\")\nasync def log_requests(request: Request, call_next):\n    \"\"\"Registrar todas las peticiones.\"\"\"\n    logger.info(f\"Petici\u00f3n: {request.method} {request.url}\")\n    response = await call_next(request)\n    logger.info(f\"Respuesta: {response.status_code}\")\n    return response\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#manejo-de-errores-global","title":"Manejo de Errores Global","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#exception-handlers","title":"Exception Handlers","text":"<pre><code>from fastapi import Request, HTTPException\nfrom fastapi.responses import JSONResponse\nfrom sqlalchemy.exc import IntegrityError\nfrom pydantic import ValidationError\n\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    \"\"\"Manejar errores HTTP personalizados.\"\"\"\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"error\": \"HTTP Error\",\n            \"detail\": exc.detail,\n            \"status_code\": exc.status_code\n        }\n    )\n\n@app.exception_handler(ValidationError)\nasync def validation_exception_handler(request: Request, exc: ValidationError):\n    \"\"\"Manejar errores de validaci\u00f3n de Pydantic.\"\"\"\n    return JSONResponse(\n        status_code=422,\n        content={\n            \"error\": \"Validation Error\",\n            \"detail\": exc.errors(),\n            \"body\": exc.body\n        }\n    )\n\n@app.exception_handler(IntegrityError)\nasync def integrity_error_handler(request: Request, exc: IntegrityError):\n    \"\"\"Manejar errores de integridad de base de datos.\"\"\"\n    return JSONResponse(\n        status_code=400,\n        content={\n            \"error\": \"Database Integrity Error\",\n            \"detail\": \"Los datos violan restricciones de la base de datos\"\n        }\n    )\n\n@app.exception_handler(Exception)\nasync def general_exception_handler(request: Request, exc: Exception):\n    \"\"\"Manejar errores generales no capturados.\"\"\"\n    logger.error(f\"Error no manejado: {str(exc)}\", exc_info=True)\n    return JSONResponse(\n        status_code=500,\n        content={\n            \"error\": \"Internal Server Error\",\n            \"detail\": \"Ha ocurrido un error interno del servidor\"\n        }\n    )\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#eventos-de-ciclo-de-vida","title":"Eventos de Ciclo de Vida","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#startup-y-shutdown","title":"Startup y Shutdown","text":"<pre><code>@app.on_event(\"startup\")\nasync def startup_event():\n    \"\"\"Ejecutar al iniciar la aplicaci\u00f3n.\"\"\"\n    logger.info(\"Iniciando aplicaci\u00f3n...\")\n\n    # Crear tablas\n    models.Base.metadata.create_all(bind=engine)\n    logger.info(\"Tablas de base de datos creadas\")\n\n    # Inicializar datos de prueba (opcional)\n    # await create_initial_data()\n\n    logger.info(\"Aplicaci\u00f3n iniciada correctamente\")\n\n@app.on_event(\"shutdown\")\nasync def shutdown_event():\n    \"\"\"Ejecutar al cerrar la aplicaci\u00f3n.\"\"\"\n    logger.info(\"Cerrando aplicaci\u00f3n...\")\n\n    # Cerrar conexiones de base de datos\n    engine.dispose()\n\n    logger.info(\"Aplicaci\u00f3n cerrada correctamente\")\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#datos-iniciales","title":"Datos Iniciales","text":"<pre><code>from app.database.database import SessionLocal\nfrom app.models.models import User, Product\n\nasync def create_initial_data():\n    \"\"\"Crear datos iniciales si no existen.\"\"\"\n    db = SessionLocal()\n    try:\n        # Verificar si ya hay datos\n        user_count = db.query(User).count()\n        if user_count == 0:\n            # Crear usuarios de ejemplo\n            users = [\n                User(name=\"Admin\", email=\"admin@example.com\"),\n                User(name=\"Usuario Demo\", email=\"demo@example.com\")\n            ]\n            db.add_all(users)\n\n            # Crear productos de ejemplo\n            products = [\n                Product(name=\"Laptop\", price=999.99),\n                Product(name=\"Mouse\", price=29.99),\n                Product(name=\"Teclado\", price=79.99)\n            ]\n            db.add_all(products)\n\n            db.commit()\n            logger.info(\"Datos iniciales creados\")\n        else:\n            logger.info(\"Datos iniciales ya existen\")\n    except Exception as e:\n        logger.error(f\"Error creando datos iniciales: {e}\")\n        db.rollback()\n    finally:\n        db.close()\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#configuracion-por-entorno","title":"Configuraci\u00f3n por Entorno","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#variables-de-entorno","title":"Variables de Entorno","text":"<pre><code>import os\nfrom functools import lru_cache\nfrom pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    \"\"\"Configuraci\u00f3n de la aplicaci\u00f3n.\"\"\"\n    app_name: str = \"API Simple\"\n    debug: bool = False\n    database_url: str = \"sqlite:///./test.db\"\n    secret_key: str = \"your-secret-key-here\"\n\n    class Config:\n        env_file = \".env\"\n\n@lru_cache()\ndef get_settings():\n    return Settings()\n\n# Usar configuraci\u00f3n\nsettings = get_settings()\n\napp = FastAPI(\n    title=settings.app_name,\n    debug=settings.debug\n)\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#archivo-env","title":"Archivo .env","text":"<pre><code># .env\nAPP_NAME=\"API Simple - Desarrollo\"\nDEBUG=true\nDATABASE_URL=\"sqlite:///./dev.db\"\nSECRET_KEY=\"dev-secret-key-123\"\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#organizacion-modular","title":"Organizaci\u00f3n Modular","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#estructura-avanzada","title":"Estructura Avanzada","text":"<pre><code># main.py\nfrom fastapi import FastAPI\nfrom app.core.config import settings\nfrom app.core.database import init_db\nfrom app.api.api_v1.api import api_router\nfrom app.core.middleware import setup_middleware\nfrom app.core.exceptions import setup_exception_handlers\n\ndef create_application() -&gt; FastAPI:\n    \"\"\"Factory para crear la aplicaci\u00f3n FastAPI.\"\"\"\n    app = FastAPI(\n        title=settings.PROJECT_NAME,\n        version=settings.VERSION,\n        description=settings.DESCRIPTION,\n        openapi_url=f\"{settings.API_V1_STR}/openapi.json\"\n    )\n\n    # Configurar middleware\n    setup_middleware(app)\n\n    # Configurar manejo de errores\n    setup_exception_handlers(app)\n\n    # Incluir routers\n    app.include_router(api_router, prefix=settings.API_V1_STR)\n\n    return app\n\n# Crear aplicaci\u00f3n\napp = create_application()\n\n@app.on_event(\"startup\")\nasync def startup():\n    await init_db()\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=8000,\n        reload=True\n    )\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#documentacion-automatica","title":"Documentaci\u00f3n Autom\u00e1tica","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#personalizacion-de-openapi","title":"Personalizaci\u00f3n de OpenAPI","text":"<pre><code>from fastapi.openapi.utils import get_openapi\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n\n    openapi_schema = get_openapi(\n        title=\"API Simple\",\n        version=\"1.0.0\",\n        description=\"API REST para gesti\u00f3n de usuarios, productos y \u00f3rdenes\",\n        routes=app.routes,\n    )\n\n    # Personalizar esquema\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://example.com/logo.png\"\n    }\n\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#tags-para-organizacion","title":"Tags para Organizaci\u00f3n","text":"<pre><code>tags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operaciones con usuarios. Permite crear y consultar usuarios.\",\n    },\n    {\n        \"name\": \"products\",\n        \"description\": \"Gesti\u00f3n de productos. Cat\u00e1logo de productos disponibles.\",\n    },\n    {\n        \"name\": \"orders\",\n        \"description\": \"Procesamiento de \u00f3rdenes. Gesti\u00f3n de pedidos de usuarios.\",\n    },\n]\n\napp = FastAPI(\n    title=\"API Simple\",\n    description=\"API REST para e-commerce b\u00e1sico\",\n    version=\"1.0.0\",\n    openapi_tags=tags_metadata\n)\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#testing-de-la-aplicacion","title":"Testing de la Aplicaci\u00f3n","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#test-de-integracion","title":"Test de Integraci\u00f3n","text":"<pre><code># test_main.py\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_read_main():\n    \"\"\"Test del endpoint ra\u00edz.\"\"\"\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"API Simple\"}\n\ndef test_docs_accessible():\n    \"\"\"Test que la documentaci\u00f3n sea accesible.\"\"\"\n    response = client.get(\"/docs\")\n    assert response.status_code == 200\n\ndef test_openapi_schema():\n    \"\"\"Test del esquema OpenAPI.\"\"\"\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    schema = response.json()\n    assert \"openapi\" in schema\n    assert \"info\" in schema\n    assert \"paths\" in schema\n\ndef test_health_check():\n    \"\"\"Test de salud de la aplicaci\u00f3n.\"\"\"\n    response = client.get(\"/health\")\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"status\"] == \"healthy\"\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#endpoint-de-salud","title":"Endpoint de Salud","text":"<pre><code>@app.get(\"/health\")\ndef health_check():\n    \"\"\"Endpoint para verificar el estado de la aplicaci\u00f3n.\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"timestamp\": datetime.utcnow().isoformat(),\n        \"version\": \"1.0.0\"\n    }\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#deployment-y-produccion","title":"Deployment y Producci\u00f3n","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#configuracion-para-produccion","title":"Configuraci\u00f3n para Producci\u00f3n","text":"<pre><code># main.py para producci\u00f3n\nimport os\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\n\napp = FastAPI(\n    title=\"API Simple\",\n    version=\"1.0.0\",\n    docs_url=None if os.getenv(\"ENVIRONMENT\") == \"production\" else \"/docs\",\n    redoc_url=None if os.getenv(\"ENVIRONMENT\") == \"production\" else \"/redoc\"\n)\n\n# Middleware de seguridad para producci\u00f3n\nif os.getenv(\"ENVIRONMENT\") == \"production\":\n    app.add_middleware(\n        TrustedHostMiddleware,\n        allowed_hosts=[\"api.mycompany.com\", \"*.mycompany.com\"]\n    )\n\n# CORS m\u00e1s restrictivo para producci\u00f3n\nallowed_origins = [\n    \"https://myapp.com\",\n    \"https://www.myapp.com\"\n] if os.getenv(\"ENVIRONMENT\") == \"production\" else [\"*\"]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=allowed_origins,\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#comando-de-inicio","title":"Comando de Inicio","text":"<pre><code># Para desarrollo\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\n        \"main:app\",\n        host=\"127.0.0.1\",\n        port=8000,\n        reload=True,\n        log_level=\"info\"\n    )\n\n# Para producci\u00f3n (usar gunicorn)\n# gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#1-separacion-de-configuracion","title":"1. Separaci\u00f3n de Configuraci\u00f3n","text":"<pre><code># \u2705 Bueno: Configuraci\u00f3n separada\nfrom app.core.config import settings\n\napp = FastAPI(\n    title=settings.APP_NAME,\n    debug=settings.DEBUG\n)\n\n# \u274c Malo: Configuraci\u00f3n hardcodeada\napp = FastAPI(\n    title=\"API Simple\",\n    debug=True\n)\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#2-manejo-de-errores-robusto","title":"2. Manejo de Errores Robusto","text":"<pre><code># \u2705 Bueno: Manejo espec\u00edfico de errores\n@app.exception_handler(ValidationError)\nasync def validation_error_handler(request, exc):\n    return JSONResponse(\n        status_code=422,\n        content={\"detail\": exc.errors()}\n    )\n\n# \u274c Malo: Sin manejo de errores\n# Los errores se propagan sin control\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#3-logging-apropiado","title":"3. Logging Apropiado","text":"<pre><code># \u2705 Bueno: Logging estructurado\nimport logging\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n)\nlogger = logging.getLogger(__name__)\n\n@app.on_event(\"startup\")\nasync def startup():\n    logger.info(\"Aplicaci\u00f3n iniciando...\")\n\n# \u274c Malo: Sin logging\n# Dif\u00edcil debuggear problemas\n</code></pre>"},{"location":"tutorial/api2/08-aplicacion-principal/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":""},{"location":"tutorial/api2/08-aplicacion-principal/#ejercicio-1-configuracion-avanzada","title":"Ejercicio 1: Configuraci\u00f3n Avanzada","text":"<p>Modifica <code>main.py</code> para incluir: - Configuraci\u00f3n por variables de entorno - Middleware de logging - Manejo de errores personalizado</p>"},{"location":"tutorial/api2/08-aplicacion-principal/#ejercicio-2-endpoint-de-salud","title":"Ejercicio 2: Endpoint de Salud","text":"<p>Crea un endpoint <code>/health</code> que retorne: - Estado de la aplicaci\u00f3n - Versi\u00f3n - Timestamp - Estado de la base de datos</p>"},{"location":"tutorial/api2/08-aplicacion-principal/#ejercicio-3-datos-iniciales","title":"Ejercicio 3: Datos Iniciales","text":"<p>Implementa una funci\u00f3n que cree datos de ejemplo: - 5 usuarios - 10 productos - 15 \u00f3rdenes</p>"},{"location":"tutorial/api2/08-aplicacion-principal/#ejercicio-4-testing-completo","title":"Ejercicio 4: Testing Completo","text":"<p>Escribe tests para: - Todos los endpoints principales - Manejo de errores - Configuraci\u00f3n de la aplicaci\u00f3n</p>"},{"location":"tutorial/api2/08-aplicacion-principal/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>En el siguiente cap\u00edtulo aprenderemos sobre Testing y Debugging, donde: - Escribiremos tests unitarios y de integraci\u00f3n - Configuraremos herramientas de debugging - Implementaremos logging efectivo - Aprenderemos a usar herramientas de profiling</p> <p>Siguiente: Testing y Debugging</p> <p>Anterior: Rutas y Endpoints</p>"},{"location":"tutorial/api2/09-testing-debugging/","title":"9. Testing y Debugging","text":""},{"location":"tutorial/api2/09-testing-debugging/#por-que-testing","title":"\u00bfPor qu\u00e9 Testing?","text":"<p>El testing (pruebas) es fundamental para:</p> <ul> <li>Confiabilidad: Asegurar que el c\u00f3digo funciona como se espera</li> <li>Mantenimiento: Detectar errores al modificar c\u00f3digo</li> <li>Documentaci\u00f3n: Los tests sirven como documentaci\u00f3n viva</li> <li>Refactoring: Cambiar c\u00f3digo con confianza</li> <li>Calidad: Mejorar la calidad general del software</li> </ul>"},{"location":"tutorial/api2/09-testing-debugging/#tipos-de-testing","title":"Tipos de Testing","text":"<pre><code>Pir\u00e1mide de Testing\n\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502   E2E Tests     \u2502  \u2190 Pocos, lentos, costosos\n    \u2502   (End-to-End) \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 Integration     \u2502  \u2190 Algunos, moderados\n    \u2502 Tests           \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 Unit Tests      \u2502  \u2190 Muchos, r\u00e1pidos, baratos\n    \u2502                 \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#configuracion-de-testing","title":"Configuraci\u00f3n de Testing","text":""},{"location":"tutorial/api2/09-testing-debugging/#instalacion-de-dependencias","title":"Instalaci\u00f3n de Dependencias","text":"<pre><code># Instalar pytest y dependencias de testing\npip install pytest pytest-asyncio httpx\n\n# Para coverage (cobertura de c\u00f3digo)\npip install pytest-cov\n\n# Para testing de base de datos\npip install pytest-mock\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#estructura-de-archivos-de-test","title":"Estructura de Archivos de Test","text":"<pre><code>api_simple/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 schemas/\n\u2502   \u251c\u2500\u2500 crud/\n\u2502   \u2514\u2500\u2500 routers/\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 conftest.py          # Configuraci\u00f3n de pytest\n\u2502   \u251c\u2500\u2500 test_main.py         # Tests de la aplicaci\u00f3n principal\n\u2502   \u251c\u2500\u2500 test_models.py       # Tests de modelos\n\u2502   \u251c\u2500\u2500 test_schemas.py      # Tests de schemas\n\u2502   \u251c\u2500\u2500 test_crud.py         # Tests de CRUD\n\u2502   \u2514\u2500\u2500 test_routers/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 test_users.py    # Tests de endpoints de usuarios\n\u2502       \u251c\u2500\u2500 test_products.py # Tests de endpoints de productos\n\u2502       \u2514\u2500\u2500 test_orders.py   # Tests de endpoints de \u00f3rdenes\n\u251c\u2500\u2500 pytest.ini              # Configuraci\u00f3n de pytest\n\u2514\u2500\u2500 requirements-test.txt    # Dependencias de testing\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#configuracion-de-pytest","title":"Configuraci\u00f3n de Pytest","text":""},{"location":"tutorial/api2/09-testing-debugging/#pytestini","title":"pytest.ini","text":"<pre><code># pytest.ini\n[tool:pytest]\npython_files = test_*.py *_test.py\npython_classes = Test*\npython_functions = test_*\ntestpaths = tests\naddopts = \n    -v\n    --tb=short\n    --strict-markers\n    --disable-warnings\n    --cov=app\n    --cov-report=term-missing\n    --cov-report=html\nmarkers =\n    slow: marks tests as slow\n    integration: marks tests as integration tests\n    unit: marks tests as unit tests\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#conftestpy","title":"conftest.py","text":"<pre><code># tests/conftest.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom app.main import app\nfrom app.database.database import get_db, Base\nfrom app.models.models import User, Product, Order\n\n# Base de datos en memoria para testing\nSQLALCHEMY_DATABASE_URL = \"sqlite:///:memory:\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\n        \"check_same_thread\": False,\n    },\n    poolclass=StaticPool,\n)\n\nTestingSessionLocal = sessionmaker(\n    autocommit=False, autoflush=False, bind=engine\n)\n\n@pytest.fixture(scope=\"function\")\ndef db_session():\n    \"\"\"Crear una sesi\u00f3n de base de datos para testing.\"\"\"\n    Base.metadata.create_all(bind=engine)\n    session = TestingSessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()\n        Base.metadata.drop_all(bind=engine)\n\n@pytest.fixture(scope=\"function\")\ndef client(db_session):\n    \"\"\"Crear un cliente de testing con base de datos de prueba.\"\"\"\n    def override_get_db():\n        try:\n            yield db_session\n        finally:\n            db_session.close()\n\n    app.dependency_overrides[get_db] = override_get_db\n\n    with TestClient(app) as test_client:\n        yield test_client\n\n    app.dependency_overrides.clear()\n\n@pytest.fixture\ndef sample_user_data():\n    \"\"\"Datos de ejemplo para usuario.\"\"\"\n    return {\n        \"name\": \"Juan P\u00e9rez\",\n        \"email\": \"juan@example.com\"\n    }\n\n@pytest.fixture\ndef sample_product_data():\n    \"\"\"Datos de ejemplo para producto.\"\"\"\n    return {\n        \"name\": \"Laptop Gaming\",\n        \"price\": 1299.99\n    }\n\n@pytest.fixture\ndef sample_order_data():\n    \"\"\"Datos de ejemplo para orden.\"\"\"\n    return {\n        \"user_id\": 1,\n        \"product_id\": 1,\n        \"quantity\": 2\n    }\n\n@pytest.fixture\ndef create_sample_user(db_session):\n    \"\"\"Crear un usuario de ejemplo en la base de datos.\"\"\"\n    user = User(name=\"Test User\", email=\"test@example.com\")\n    db_session.add(user)\n    db_session.commit()\n    db_session.refresh(user)\n    return user\n\n@pytest.fixture\ndef create_sample_product(db_session):\n    \"\"\"Crear un producto de ejemplo en la base de datos.\"\"\"\n    product = Product(name=\"Test Product\", price=99.99)\n    db_session.add(product)\n    db_session.commit()\n    db_session.refresh(product)\n    return product\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#unit-tests","title":"Unit Tests","text":""},{"location":"tutorial/api2/09-testing-debugging/#testing-de-modelos","title":"Testing de Modelos","text":"<pre><code># tests/test_models.py\nimport pytest\nfrom app.models.models import User, Product, Order\n\nclass TestUserModel:\n    \"\"\"Tests para el modelo User.\"\"\"\n\n    def test_create_user(self, db_session):\n        \"\"\"Test crear usuario.\"\"\"\n        user = User(name=\"Test User\", email=\"test@example.com\")\n        db_session.add(user)\n        db_session.commit()\n\n        assert user.id is not None\n        assert user.name == \"Test User\"\n        assert user.email == \"test@example.com\"\n\n    def test_user_representation(self, db_session):\n        \"\"\"Test representaci\u00f3n string del usuario.\"\"\"\n        user = User(name=\"Test User\", email=\"test@example.com\")\n        db_session.add(user)\n        db_session.commit()\n\n        assert str(user) == \"&lt;User(name='Test User', email='test@example.com')&gt;\"\n\n    def test_user_email_unique(self, db_session):\n        \"\"\"Test que el email sea \u00fanico.\"\"\"\n        user1 = User(name=\"User 1\", email=\"same@example.com\")\n        user2 = User(name=\"User 2\", email=\"same@example.com\")\n\n        db_session.add(user1)\n        db_session.commit()\n\n        db_session.add(user2)\n\n        with pytest.raises(Exception):  # IntegrityError\n            db_session.commit()\n\nclass TestProductModel:\n    \"\"\"Tests para el modelo Product.\"\"\"\n\n    def test_create_product(self, db_session):\n        \"\"\"Test crear producto.\"\"\"\n        product = Product(name=\"Test Product\", price=99.99)\n        db_session.add(product)\n        db_session.commit()\n\n        assert product.id is not None\n        assert product.name == \"Test Product\"\n        assert product.price == 99.99\n\n    def test_product_price_positive(self, db_session):\n        \"\"\"Test que el precio sea positivo.\"\"\"\n        # Esto depender\u00eda de validaciones en el modelo\n        product = Product(name=\"Test Product\", price=-10.0)\n        db_session.add(product)\n\n        # En un modelo m\u00e1s robusto, esto deber\u00eda fallar\n        # with pytest.raises(ValueError):\n        #     db_session.commit()\n\nclass TestOrderModel:\n    \"\"\"Tests para el modelo Order.\"\"\"\n\n    def test_create_order(self, db_session, create_sample_user, create_sample_product):\n        \"\"\"Test crear orden.\"\"\"\n        user = create_sample_user\n        product = create_sample_product\n\n        order = Order(\n            user_id=user.id,\n            product_id=product.id,\n            quantity=2\n        )\n        db_session.add(order)\n        db_session.commit()\n\n        assert order.id is not None\n        assert order.user_id == user.id\n        assert order.product_id == product.id\n        assert order.quantity == 2\n\n    def test_order_quantity_positive(self, db_session, create_sample_user, create_sample_product):\n        \"\"\"Test que la cantidad sea positiva.\"\"\"\n        user = create_sample_user\n        product = create_sample_product\n\n        order = Order(\n            user_id=user.id,\n            product_id=product.id,\n            quantity=0  # Cantidad inv\u00e1lida\n        )\n        db_session.add(order)\n\n        # En un modelo m\u00e1s robusto, esto deber\u00eda fallar\n        # with pytest.raises(ValueError):\n        #     db_session.commit()\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#testing-de-schemas","title":"Testing de Schemas","text":"<pre><code># tests/test_schemas.py\nimport pytest\nfrom pydantic import ValidationError\nfrom app.schemas.schemas import User, Product, Order\n\nclass TestUserSchema:\n    \"\"\"Tests para el schema User.\"\"\"\n\n    def test_valid_user_schema(self):\n        \"\"\"Test schema v\u00e1lido de usuario.\"\"\"\n        user_data = {\n            \"name\": \"Juan P\u00e9rez\",\n            \"email\": \"juan@example.com\"\n        }\n        user = User(**user_data)\n\n        assert user.name == \"Juan P\u00e9rez\"\n        assert user.email == \"juan@example.com\"\n\n    def test_user_schema_with_id(self):\n        \"\"\"Test schema de usuario con ID.\"\"\"\n        user_data = {\n            \"id\": 1,\n            \"name\": \"Juan P\u00e9rez\",\n            \"email\": \"juan@example.com\"\n        }\n        user = User(**user_data)\n\n        assert user.id == 1\n        assert user.name == \"Juan P\u00e9rez\"\n        assert user.email == \"juan@example.com\"\n\n    def test_user_schema_missing_name(self):\n        \"\"\"Test schema de usuario sin nombre.\"\"\"\n        user_data = {\n            \"email\": \"juan@example.com\"\n        }\n\n        with pytest.raises(ValidationError) as exc_info:\n            User(**user_data)\n\n        errors = exc_info.value.errors()\n        assert len(errors) == 1\n        assert errors[0][\"loc\"] == (\"name\",)\n        assert errors[0][\"type\"] == \"missing\"\n\n    def test_user_schema_invalid_email(self):\n        \"\"\"Test schema de usuario con email inv\u00e1lido.\"\"\"\n        user_data = {\n            \"name\": \"Juan P\u00e9rez\",\n            \"email\": \"email-invalido\"  # Email sin formato v\u00e1lido\n        }\n\n        # Nota: Esto pasar\u00eda con nuestro schema actual\n        # Para validaci\u00f3n de email real, necesitar\u00edamos EmailStr\n        user = User(**user_data)\n        assert user.email == \"email-invalido\"\n\nclass TestProductSchema:\n    \"\"\"Tests para el schema Product.\"\"\"\n\n    def test_valid_product_schema(self):\n        \"\"\"Test schema v\u00e1lido de producto.\"\"\"\n        product_data = {\n            \"name\": \"Laptop Gaming\",\n            \"price\": 1299.99\n        }\n        product = Product(**product_data)\n\n        assert product.name == \"Laptop Gaming\"\n        assert product.price == 1299.99\n\n    def test_product_schema_negative_price(self):\n        \"\"\"Test schema de producto con precio negativo.\"\"\"\n        product_data = {\n            \"name\": \"Laptop Gaming\",\n            \"price\": -100.0\n        }\n\n        # Con nuestro schema actual, esto pasar\u00eda\n        # Para validaci\u00f3n, necesitar\u00edamos Field(gt=0)\n        product = Product(**product_data)\n        assert product.price == -100.0\n\nclass TestOrderSchema:\n    \"\"\"Tests para el schema Order.\"\"\"\n\n    def test_valid_order_schema(self):\n        \"\"\"Test schema v\u00e1lido de orden.\"\"\"\n        order_data = {\n            \"user_id\": 1,\n            \"product_id\": 1,\n            \"quantity\": 2\n        }\n        order = Order(**order_data)\n\n        assert order.user_id == 1\n        assert order.product_id == 1\n        assert order.quantity == 2\n\n    def test_order_schema_missing_fields(self):\n        \"\"\"Test schema de orden con campos faltantes.\"\"\"\n        order_data = {\n            \"user_id\": 1\n            # Faltan product_id y quantity\n        }\n\n        with pytest.raises(ValidationError) as exc_info:\n            Order(**order_data)\n\n        errors = exc_info.value.errors()\n        assert len(errors) == 2  # product_id y quantity\n\n        error_fields = [error[\"loc\"][0] for error in errors]\n        assert \"product_id\" in error_fields\n        assert \"quantity\" in error_fields\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#testing-de-crud","title":"Testing de CRUD","text":"<pre><code># tests/test_crud.py\nimport pytest\nfrom app.crud.crud import get_all, get_by_id, create_item\nfrom app.models.models import User, Product, Order\nfrom app.schemas.schemas import User as UserSchema, Product as ProductSchema\n\nclass TestCRUDOperations:\n    \"\"\"Tests para operaciones CRUD.\"\"\"\n\n    def test_create_user(self, db_session):\n        \"\"\"Test crear usuario via CRUD.\"\"\"\n        user_data = UserSchema(name=\"Test User\", email=\"test@example.com\")\n        user = create_item(db_session, User, user_data)\n\n        assert user.id is not None\n        assert user.name == \"Test User\"\n        assert user.email == \"test@example.com\"\n\n    def test_get_all_users_empty(self, db_session):\n        \"\"\"Test obtener todos los usuarios cuando no hay ninguno.\"\"\"\n        users = get_all(db_session, User)\n        assert users == []\n\n    def test_get_all_users_with_data(self, db_session, create_sample_user):\n        \"\"\"Test obtener todos los usuarios con datos.\"\"\"\n        user = create_sample_user\n        users = get_all(db_session, User)\n\n        assert len(users) == 1\n        assert users[0].id == user.id\n        assert users[0].name == user.name\n\n    def test_get_user_by_id_exists(self, db_session, create_sample_user):\n        \"\"\"Test obtener usuario por ID que existe.\"\"\"\n        user = create_sample_user\n        found_user = get_by_id(db_session, User, user.id)\n\n        assert found_user is not None\n        assert found_user.id == user.id\n        assert found_user.name == user.name\n\n    def test_get_user_by_id_not_exists(self, db_session):\n        \"\"\"Test obtener usuario por ID que no existe.\"\"\"\n        user = get_by_id(db_session, User, 999)\n        assert user is None\n\n    def test_create_product(self, db_session):\n        \"\"\"Test crear producto via CRUD.\"\"\"\n        product_data = ProductSchema(name=\"Test Product\", price=99.99)\n        product = create_item(db_session, Product, product_data)\n\n        assert product.id is not None\n        assert product.name == \"Test Product\"\n        assert product.price == 99.99\n\n    def test_create_multiple_items(self, db_session):\n        \"\"\"Test crear m\u00faltiples elementos.\"\"\"\n        # Crear usuarios\n        user1_data = UserSchema(name=\"User 1\", email=\"user1@example.com\")\n        user2_data = UserSchema(name=\"User 2\", email=\"user2@example.com\")\n\n        user1 = create_item(db_session, User, user1_data)\n        user2 = create_item(db_session, User, user2_data)\n\n        # Verificar que se crearon correctamente\n        users = get_all(db_session, User)\n        assert len(users) == 2\n\n        user_names = [user.name for user in users]\n        assert \"User 1\" in user_names\n        assert \"User 2\" in user_names\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#integration-tests","title":"Integration Tests","text":""},{"location":"tutorial/api2/09-testing-debugging/#testing-de-endpoints","title":"Testing de Endpoints","text":"<pre><code># tests/test_routers/test_users.py\nimport pytest\nfrom fastapi import status\n\nclass TestUserEndpoints:\n    \"\"\"Tests para endpoints de usuarios.\"\"\"\n\n    def test_create_user_success(self, client, sample_user_data):\n        \"\"\"Test crear usuario exitosamente.\"\"\"\n        response = client.post(\"/users/\", json=sample_user_data)\n\n        assert response.status_code == status.HTTP_200_OK\n        data = response.json()\n        assert data[\"name\"] == sample_user_data[\"name\"]\n        assert data[\"email\"] == sample_user_data[\"email\"]\n        assert \"id\" in data\n\n    def test_create_user_invalid_data(self, client):\n        \"\"\"Test crear usuario con datos inv\u00e1lidos.\"\"\"\n        invalid_data = {\n            \"name\": \"\"  # Nombre vac\u00edo\n            # Falta email\n        }\n\n        response = client.post(\"/users/\", json=invalid_data)\n        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n\n    def test_get_users_empty(self, client):\n        \"\"\"Test obtener usuarios cuando no hay ninguno.\"\"\"\n        response = client.get(\"/users/\")\n\n        assert response.status_code == status.HTTP_200_OK\n        data = response.json()\n        assert data == []\n\n    def test_get_users_with_data(self, client, sample_user_data):\n        \"\"\"Test obtener usuarios con datos.\"\"\"\n        # Crear usuario primero\n        create_response = client.post(\"/users/\", json=sample_user_data)\n        assert create_response.status_code == status.HTTP_200_OK\n\n        # Obtener usuarios\n        response = client.get(\"/users/\")\n\n        assert response.status_code == status.HTTP_200_OK\n        data = response.json()\n        assert len(data) == 1\n        assert data[0][\"name\"] == sample_user_data[\"name\"]\n\n    def test_get_user_by_id_exists(self, client, sample_user_data):\n        \"\"\"Test obtener usuario por ID que existe.\"\"\"\n        # Crear usuario primero\n        create_response = client.post(\"/users/\", json=sample_user_data)\n        user_id = create_response.json()[\"id\"]\n\n        # Obtener usuario por ID\n        response = client.get(f\"/users/{user_id}\")\n\n        assert response.status_code == status.HTTP_200_OK\n        data = response.json()\n        assert data[\"id\"] == user_id\n        assert data[\"name\"] == sample_user_data[\"name\"]\n\n    def test_get_user_by_id_not_exists(self, client):\n        \"\"\"Test obtener usuario por ID que no existe.\"\"\"\n        response = client.get(\"/users/999\")\n\n        # Dependiendo de la implementaci\u00f3n, podr\u00eda ser 404 o None\n        # Con nuestra implementaci\u00f3n actual, retorna None\n        assert response.status_code == status.HTTP_200_OK\n        assert response.json() is None\n\n    def test_create_multiple_users(self, client):\n        \"\"\"Test crear m\u00faltiples usuarios.\"\"\"\n        users_data = [\n            {\"name\": \"User 1\", \"email\": \"user1@example.com\"},\n            {\"name\": \"User 2\", \"email\": \"user2@example.com\"},\n            {\"name\": \"User 3\", \"email\": \"user3@example.com\"}\n        ]\n\n        created_users = []\n        for user_data in users_data:\n            response = client.post(\"/users/\", json=user_data)\n            assert response.status_code == status.HTTP_200_OK\n            created_users.append(response.json())\n\n        # Verificar que todos se crearon\n        response = client.get(\"/users/\")\n        assert response.status_code == status.HTTP_200_OK\n\n        all_users = response.json()\n        assert len(all_users) == 3\n\n        user_names = [user[\"name\"] for user in all_users]\n        assert \"User 1\" in user_names\n        assert \"User 2\" in user_names\n        assert \"User 3\" in user_names\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#testing-de-productos","title":"Testing de Productos","text":"<pre><code># tests/test_routers/test_products.py\nimport pytest\nfrom fastapi import status\n\nclass TestProductEndpoints:\n    \"\"\"Tests para endpoints de productos.\"\"\"\n\n    def test_create_product_success(self, client, sample_product_data):\n        \"\"\"Test crear producto exitosamente.\"\"\"\n        response = client.post(\"/products/\", json=sample_product_data)\n\n        assert response.status_code == status.HTTP_200_OK\n        data = response.json()\n        assert data[\"name\"] == sample_product_data[\"name\"]\n        assert data[\"price\"] == sample_product_data[\"price\"]\n        assert \"id\" in data\n\n    def test_create_product_invalid_price(self, client):\n        \"\"\"Test crear producto con precio inv\u00e1lido.\"\"\"\n        invalid_data = {\n            \"name\": \"Test Product\",\n            \"price\": \"not-a-number\"  # Precio inv\u00e1lido\n        }\n\n        response = client.post(\"/products/\", json=invalid_data)\n        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n\n    def test_get_products_empty(self, client):\n        \"\"\"Test obtener productos cuando no hay ninguno.\"\"\"\n        response = client.get(\"/products/\")\n\n        assert response.status_code == status.HTTP_200_OK\n        data = response.json()\n        assert data == []\n\n    def test_get_product_by_id_exists(self, client, sample_product_data):\n        \"\"\"Test obtener producto por ID que existe.\"\"\"\n        # Crear producto primero\n        create_response = client.post(\"/products/\", json=sample_product_data)\n        product_id = create_response.json()[\"id\"]\n\n        # Obtener producto por ID\n        response = client.get(f\"/products/{product_id}\")\n\n        assert response.status_code == status.HTTP_200_OK\n        data = response.json()\n        assert data[\"id\"] == product_id\n        assert data[\"name\"] == sample_product_data[\"name\"]\n        assert data[\"price\"] == sample_product_data[\"price\"]\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#testing-de-ordenes","title":"Testing de \u00d3rdenes","text":"<pre><code># tests/test_routers/test_orders.py\nimport pytest\nfrom fastapi import status\n\nclass TestOrderEndpoints:\n    \"\"\"Tests para endpoints de \u00f3rdenes.\"\"\"\n\n    def test_create_order_success(self, client, sample_user_data, sample_product_data):\n        \"\"\"Test crear orden exitosamente.\"\"\"\n        # Crear usuario y producto primero\n        user_response = client.post(\"/users/\", json=sample_user_data)\n        user_id = user_response.json()[\"id\"]\n\n        product_response = client.post(\"/products/\", json=sample_product_data)\n        product_id = product_response.json()[\"id\"]\n\n        # Crear orden\n        order_data = {\n            \"user_id\": user_id,\n            \"product_id\": product_id,\n            \"quantity\": 2\n        }\n\n        response = client.post(\"/orders/\", json=order_data)\n\n        assert response.status_code == status.HTTP_200_OK\n        data = response.json()\n        assert data[\"user_id\"] == user_id\n        assert data[\"product_id\"] == product_id\n        assert data[\"quantity\"] == 2\n        assert \"id\" in data\n\n    def test_create_order_invalid_user(self, client, sample_product_data):\n        \"\"\"Test crear orden con usuario inexistente.\"\"\"\n        # Crear solo producto\n        product_response = client.post(\"/products/\", json=sample_product_data)\n        product_id = product_response.json()[\"id\"]\n\n        # Intentar crear orden con usuario inexistente\n        order_data = {\n            \"user_id\": 999,  # Usuario que no existe\n            \"product_id\": product_id,\n            \"quantity\": 2\n        }\n\n        response = client.post(\"/orders/\", json=order_data)\n\n        # Con nuestra implementaci\u00f3n actual, esto pasar\u00eda\n        # En una implementaci\u00f3n m\u00e1s robusta, deber\u00eda fallar\n        assert response.status_code == status.HTTP_200_OK\n\n    def test_get_orders_empty(self, client):\n        \"\"\"Test obtener \u00f3rdenes cuando no hay ninguna.\"\"\"\n        response = client.get(\"/orders/\")\n\n        assert response.status_code == status.HTTP_200_OK\n        data = response.json()\n        assert data == []\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#testing-de-la-aplicacion-principal","title":"Testing de la Aplicaci\u00f3n Principal","text":"<pre><code># tests/test_main.py\nimport pytest\nfrom fastapi import status\nfrom fastapi.testclient import TestClient\nfrom app.main import app\n\nclass TestMainApplication:\n    \"\"\"Tests para la aplicaci\u00f3n principal.\"\"\"\n\n    def test_read_main(self, client):\n        \"\"\"Test del endpoint ra\u00edz.\"\"\"\n        response = client.get(\"/\")\n\n        assert response.status_code == status.HTTP_200_OK\n        data = response.json()\n        assert data == {\"message\": \"API Simple\"}\n\n    def test_docs_accessible(self):\n        \"\"\"Test que la documentaci\u00f3n sea accesible.\"\"\"\n        with TestClient(app) as client:\n            response = client.get(\"/docs\")\n            assert response.status_code == status.HTTP_200_OK\n\n    def test_openapi_schema(self):\n        \"\"\"Test del esquema OpenAPI.\"\"\"\n        with TestClient(app) as client:\n            response = client.get(\"/openapi.json\")\n            assert response.status_code == status.HTTP_200_OK\n\n            schema = response.json()\n            assert \"openapi\" in schema\n            assert \"info\" in schema\n            assert \"paths\" in schema\n\n            # Verificar que nuestros endpoints est\u00e9n en el schema\n            paths = schema[\"paths\"]\n            assert \"/users/\" in paths\n            assert \"/products/\" in paths\n            assert \"/orders/\" in paths\n\n    def test_cors_headers(self, client):\n        \"\"\"Test headers CORS si est\u00e1n configurados.\"\"\"\n        response = client.options(\"/\")\n        # Esto depender\u00eda de la configuraci\u00f3n CORS\n        # assert \"Access-Control-Allow-Origin\" in response.headers\n\n    def test_404_endpoint(self, client):\n        \"\"\"Test endpoint que no existe.\"\"\"\n        response = client.get(\"/nonexistent\")\n        assert response.status_code == status.HTTP_404_NOT_FOUND\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#debugging","title":"Debugging","text":""},{"location":"tutorial/api2/09-testing-debugging/#configuracion-de-logging","title":"Configuraci\u00f3n de Logging","text":"<pre><code># app/core/logging.py\nimport logging\nimport sys\nfrom pathlib import Path\n\ndef setup_logging(log_level: str = \"INFO\"):\n    \"\"\"Configurar logging para la aplicaci\u00f3n.\"\"\"\n\n    # Crear directorio de logs\n    log_dir = Path(\"logs\")\n    log_dir.mkdir(exist_ok=True)\n\n    # Configurar formato\n    log_format = (\n        \"%(asctime)s - %(name)s - %(levelname)s - \"\n        \"%(filename)s:%(lineno)d - %(message)s\"\n    )\n\n    # Configurar logging\n    logging.basicConfig(\n        level=getattr(logging, log_level.upper()),\n        format=log_format,\n        handlers=[\n            logging.StreamHandler(sys.stdout),\n            logging.FileHandler(log_dir / \"app.log\"),\n            logging.FileHandler(log_dir / \"error.log\", level=logging.ERROR)\n        ]\n    )\n\n    # Configurar loggers espec\u00edficos\n    logging.getLogger(\"sqlalchemy.engine\").setLevel(logging.WARNING)\n    logging.getLogger(\"uvicorn\").setLevel(logging.INFO)\n\n    return logging.getLogger(__name__)\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#debugging-con-pdb","title":"Debugging con pdb","text":"<pre><code># Agregar breakpoints en el c\u00f3digo\nimport pdb\n\ndef create_item(db, model, item_data):\n    pdb.set_trace()  # Breakpoint aqu\u00ed\n\n    item_dict = item_data.dict()\n    db_item = model(**item_dict)\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#debugging-con-vs-code","title":"Debugging con VS Code","text":"<pre><code>// .vscode/launch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"FastAPI Debug\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/main.py\",\n            \"console\": \"integratedTerminal\",\n            \"env\": {\n                \"PYTHONPATH\": \"${workspaceFolder}\"\n            },\n            \"args\": []\n        },\n        {\n            \"name\": \"Pytest Debug\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"module\": \"pytest\",\n            \"args\": [\n                \"tests/\",\n                \"-v\",\n                \"--tb=short\"\n            ],\n            \"console\": \"integratedTerminal\",\n            \"env\": {\n                \"PYTHONPATH\": \"${workspaceFolder}\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#logging-en-endpoints","title":"Logging en Endpoints","text":"<pre><code># app/routers/users.py\nimport logging\nfrom fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\n\nlogger = logging.getLogger(__name__)\nrouter = APIRouter(prefix=\"/users\", tags=[\"users\"])\n\n@router.post(\"/\")\ndef create_user(user: User, db: Session = Depends(get_db)):\n    logger.info(f\"Creando usuario: {user.name} - {user.email}\")\n\n    try:\n        db_user = create_item(db, UserModel, user)\n        logger.info(f\"Usuario creado exitosamente con ID: {db_user.id}\")\n        return db_user\n    except Exception as e:\n        logger.error(f\"Error creando usuario: {str(e)}\", exc_info=True)\n        raise\n\n@router.get(\"/{user_id}\")\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    logger.debug(f\"Buscando usuario con ID: {user_id}\")\n\n    user = get_by_id(db, UserModel, user_id)\n\n    if user:\n        logger.debug(f\"Usuario encontrado: {user.name}\")\n    else:\n        logger.warning(f\"Usuario con ID {user_id} no encontrado\")\n\n    return user\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#herramientas-de-profiling","title":"Herramientas de Profiling","text":""},{"location":"tutorial/api2/09-testing-debugging/#memory-profiling","title":"Memory Profiling","text":"<pre><code># Instalar: pip install memory-profiler\n\n# Decorador para profiling de memoria\nfrom memory_profiler import profile\n\n@profile\ndef create_many_users(db, count=1000):\n    \"\"\"Funci\u00f3n para probar uso de memoria.\"\"\"\n    users = []\n    for i in range(count):\n        user_data = User(name=f\"User {i}\", email=f\"user{i}@example.com\")\n        user = create_item(db, UserModel, user_data)\n        users.append(user)\n    return users\n\n# Ejecutar: python -m memory_profiler script.py\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#performance-profiling","title":"Performance Profiling","text":"<pre><code># Instalar: pip install line-profiler\n\n# Decorador para profiling de tiempo\nfrom line_profiler import LineProfiler\n\n@profile\ndef slow_function():\n    \"\"\"Funci\u00f3n para analizar performance.\"\"\"\n    import time\n\n    # Operaci\u00f3n lenta\n    time.sleep(0.1)\n\n    # Operaci\u00f3n de base de datos\n    users = get_all(db, UserModel)\n\n    # Procesamiento\n    result = [user.name.upper() for user in users]\n\n    return result\n\n# Ejecutar: kernprof -l -v script.py\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#coverage-cobertura-de-codigo","title":"Coverage (Cobertura de C\u00f3digo)","text":""},{"location":"tutorial/api2/09-testing-debugging/#configuracion-de-coverage","title":"Configuraci\u00f3n de Coverage","text":"<pre><code># .coveragerc\n[run]\nsource = app\nomit = \n    app/tests/*\n    app/__init__.py\n    */venv/*\n    */virtualenv/*\n    */.tox/*\n\n[report]\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    raise AssertionError\n    raise NotImplementedError\n    if __name__ == .__main__.:\n\n[html]\ndirectory = htmlcov\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#ejecutar-coverage","title":"Ejecutar Coverage","text":"<pre><code># Ejecutar tests con coverage\npytest --cov=app --cov-report=html --cov-report=term-missing\n\n# Ver reporte en HTML\n# Abrir htmlcov/index.html en el navegador\n\n# Coverage m\u00ednimo requerido\npytest --cov=app --cov-fail-under=80\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#continuous-integration","title":"Continuous Integration","text":""},{"location":"tutorial/api2/09-testing-debugging/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/test.yml\nname: Tests\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install -r requirements-test.txt\n\n    - name: Run tests\n      run: |\n        pytest --cov=app --cov-report=xml --cov-fail-under=80\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        flags: unittests\n        name: codecov-umbrella\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"tutorial/api2/09-testing-debugging/#1-organizacion-de-tests","title":"1. Organizaci\u00f3n de Tests","text":"<pre><code># \u2705 Bueno: Tests organizados por funcionalidad\nclass TestUserCRUD:\n    def test_create_user(self):\n        pass\n\n    def test_get_user(self):\n        pass\n\n    def test_update_user(self):\n        pass\n\n# \u274c Malo: Tests mezclados sin organizaci\u00f3n\ndef test_user_stuff():\n    # Muchas cosas mezcladas\n    pass\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#2-nombres-descriptivos","title":"2. Nombres Descriptivos","text":"<pre><code># \u2705 Bueno: Nombres descriptivos\ndef test_create_user_with_valid_email_returns_user_with_id():\n    pass\n\ndef test_get_user_by_nonexistent_id_returns_none():\n    pass\n\n# \u274c Malo: Nombres poco descriptivos\ndef test_user1():\n    pass\n\ndef test_user2():\n    pass\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#3-fixtures-reutilizables","title":"3. Fixtures Reutilizables","text":"<pre><code># \u2705 Bueno: Fixtures espec\u00edficas y reutilizables\n@pytest.fixture\ndef user_with_orders(db_session):\n    user = User(name=\"Test User\", email=\"test@example.com\")\n    db_session.add(user)\n    db_session.commit()\n\n    # Agregar \u00f3rdenes\n    for i in range(3):\n        order = Order(user_id=user.id, product_id=1, quantity=i+1)\n        db_session.add(order)\n\n    db_session.commit()\n    return user\n\n# \u274c Malo: Configuraci\u00f3n repetida en cada test\ndef test_something(db_session):\n    # Repetir configuraci\u00f3n en cada test\n    user = User(...)\n    # ...\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#4-assertions-claras","title":"4. Assertions Claras","text":"<pre><code># \u2705 Bueno: Assertions espec\u00edficas\nassert response.status_code == 200\nassert \"id\" in response.json()\nassert response.json()[\"name\"] == \"Expected Name\"\n\n# \u274c Malo: Assertions vagas\nassert response  # \u00bfQu\u00e9 estamos verificando?\nassert len(data) &gt; 0  # \u00bfCu\u00e1ntos esperamos exactamente?\n</code></pre>"},{"location":"tutorial/api2/09-testing-debugging/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":""},{"location":"tutorial/api2/09-testing-debugging/#ejercicio-1-tests-basicos","title":"Ejercicio 1: Tests B\u00e1sicos","text":"<p>Escribe tests para: - Crear un usuario con email duplicado (deber\u00eda fallar) - Crear un producto con precio cero - Crear una orden con cantidad negativa</p>"},{"location":"tutorial/api2/09-testing-debugging/#ejercicio-2-tests-de-integracion","title":"Ejercicio 2: Tests de Integraci\u00f3n","text":"<p>Crea un test que: 1. Cree un usuario 2. Cree un producto 3. Cree una orden 4. Verifique que todo est\u00e9 relacionado correctamente</p>"},{"location":"tutorial/api2/09-testing-debugging/#ejercicio-3-mocking","title":"Ejercicio 3: Mocking","text":"<p>Implementa tests que usen mocks para: - Simular errores de base de datos - Simular respuestas lentas - Simular servicios externos</p>"},{"location":"tutorial/api2/09-testing-debugging/#ejercicio-4-performance-testing","title":"Ejercicio 4: Performance Testing","text":"<p>Crea tests que verifiquen: - Tiempo de respuesta de endpoints - Uso de memoria con muchos registros - Comportamiento bajo carga</p>"},{"location":"tutorial/api2/09-testing-debugging/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>En el siguiente cap\u00edtulo aprenderemos sobre Documentaci\u00f3n y Deployment, donde: - Generaremos documentaci\u00f3n autom\u00e1tica - Configuraremos OpenAPI/Swagger - Prepararemos la aplicaci\u00f3n para producci\u00f3n - Implementaremos estrategias de deployment</p> <p>Siguiente: Documentaci\u00f3n y Deployment</p> <p>Anterior: Aplicaci\u00f3n Principal</p>"},{"location":"tutorial/api2/10-documentacion-deployment/","title":"10. Documentaci\u00f3n y Deployment","text":""},{"location":"tutorial/api2/10-documentacion-deployment/#documentacion-automatica-con-fastapi","title":"Documentaci\u00f3n Autom\u00e1tica con FastAPI","text":"<p>Una de las caracter\u00edsticas m\u00e1s poderosas de FastAPI es la generaci\u00f3n autom\u00e1tica de documentaci\u00f3n. Esto significa que tu API tendr\u00e1 documentaci\u00f3n interactiva sin esfuerzo adicional.</p>"},{"location":"tutorial/api2/10-documentacion-deployment/#que-incluye-la-documentacion-automatica","title":"\u00bfQu\u00e9 Incluye la Documentaci\u00f3n Autom\u00e1tica?","text":"<ul> <li>Swagger UI: Interfaz interactiva para probar endpoints</li> <li>ReDoc: Documentaci\u00f3n est\u00e1tica elegante</li> <li>OpenAPI Schema: Especificaci\u00f3n est\u00e1ndar de la API</li> <li>Validaci\u00f3n autom\u00e1tica: Basada en los tipos de Python</li> <li>Ejemplos de request/response: Generados autom\u00e1ticamente</li> </ul>"},{"location":"tutorial/api2/10-documentacion-deployment/#urls-de-documentacion","title":"URLs de Documentaci\u00f3n","text":"<pre><code># URLs por defecto\nhttp://localhost:8000/docs      # Swagger UI\nhttp://localhost:8000/redoc     # ReDoc\nhttp://localhost:8000/openapi.json  # Schema OpenAPI\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#personalizacion-de-la-documentacion","title":"Personalizaci\u00f3n de la Documentaci\u00f3n","text":""},{"location":"tutorial/api2/10-documentacion-deployment/#metadatos-de-la-aplicacion","title":"Metadatos de la Aplicaci\u00f3n","text":"<pre><code># main.py\nfrom fastapi import FastAPI\n\napp = FastAPI(\n    title=\"API Simple E-commerce\",\n    description=\"\"\"Una API REST simple para aprender FastAPI.\n\n    Esta API permite gestionar:\n\n    * **Usuarios**: Crear y consultar usuarios del sistema\n    * **Productos**: Gestionar cat\u00e1logo de productos\n    * **\u00d3rdenes**: Procesar pedidos de usuarios\n\n    ## Caracter\u00edsticas\n\n    * Validaci\u00f3n autom\u00e1tica de datos\n    * Documentaci\u00f3n interactiva\n    * Respuestas en formato JSON\n    * Manejo de errores robusto\n    \"\"\",\n    version=\"1.0.0\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Equipo de Desarrollo\",\n        \"url\": \"http://example.com/contact/\",\n        \"email\": \"dev@example.com\",\n    },\n    license_info={\n        \"name\": \"MIT\",\n        \"url\": \"https://opensource.org/licenses/MIT\",\n    },\n)\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#tags-para-organizacion","title":"Tags para Organizaci\u00f3n","text":"<pre><code># Definir tags con descripciones\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operaciones con usuarios. Permite crear y consultar usuarios del sistema.\",\n        \"externalDocs\": {\n            \"description\": \"Documentaci\u00f3n externa de usuarios\",\n            \"url\": \"https://example.com/docs/users\",\n        },\n    },\n    {\n        \"name\": \"products\",\n        \"description\": \"Gesti\u00f3n de productos. Cat\u00e1logo de productos disponibles para la venta.\",\n    },\n    {\n        \"name\": \"orders\",\n        \"description\": \"Procesamiento de \u00f3rdenes. Gesti\u00f3n de pedidos realizados por usuarios.\",\n    },\n]\n\napp = FastAPI(\n    title=\"API Simple E-commerce\",\n    description=\"API REST para e-commerce b\u00e1sico\",\n    version=\"1.0.0\",\n    openapi_tags=tags_metadata\n)\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#documentacion-de-endpoints","title":"Documentaci\u00f3n de Endpoints","text":"<pre><code># app/routers/users.py\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom typing import List\n\nrouter = APIRouter(prefix=\"/users\", tags=[\"users\"])\n\n@router.post(\n    \"/\",\n    response_model=User,\n    status_code=status.HTTP_201_CREATED,\n    summary=\"Crear un nuevo usuario\",\n    description=\"Crea un nuevo usuario en el sistema con nombre y email \u00fanicos.\",\n    response_description=\"Usuario creado exitosamente\",\n)\ndef create_user(\n    user: UserCreate,\n    db: Session = Depends(get_db)\n):\n    \"\"\"\n    Crear un nuevo usuario:\n\n    - **name**: Nombre completo del usuario (requerido)\n    - **email**: Direcci\u00f3n de email \u00fanica (requerido)\n\n    Retorna el usuario creado con su ID asignado.\n    \"\"\"\n    # Verificar si el email ya existe\n    existing_user = db.query(User).filter(User.email == user.email).first()\n    if existing_user:\n        raise HTTPException(\n            status_code=400,\n            detail=\"El email ya est\u00e1 registrado\"\n        )\n\n    return create_item(db, User, user)\n\n@router.get(\n    \"/\",\n    response_model=List[User],\n    summary=\"Obtener todos los usuarios\",\n    description=\"Retorna una lista de todos los usuarios registrados en el sistema.\",\n)\ndef read_users(db: Session = Depends(get_db)):\n    \"\"\"\n    Obtener todos los usuarios del sistema.\n\n    Retorna una lista vac\u00eda si no hay usuarios registrados.\n    \"\"\"\n    return get_all(db, User)\n\n@router.get(\n    \"/{user_id}\",\n    response_model=User,\n    summary=\"Obtener usuario por ID\",\n    description=\"Obtiene un usuario espec\u00edfico por su ID \u00fanico.\",\n    responses={\n        200: {\n            \"description\": \"Usuario encontrado\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\n                        \"id\": 1,\n                        \"name\": \"Juan P\u00e9rez\",\n                        \"email\": \"juan@example.com\"\n                    }\n                }\n            }\n        },\n        404: {\n            \"description\": \"Usuario no encontrado\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\n                        \"detail\": \"Usuario no encontrado\"\n                    }\n                }\n            }\n        }\n    }\n)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Obtener un usuario espec\u00edfico por ID.\n\n    - **user_id**: ID \u00fanico del usuario\n\n    Retorna el usuario si existe, error 404 si no existe.\n    \"\"\"\n    user = get_by_id(db, User, user_id)\n    if user is None:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Usuario no encontrado\"\n        )\n    return user\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#esquemas-con-ejemplos","title":"Esquemas con Ejemplos","text":"<pre><code># app/schemas/schemas.py\nfrom pydantic import BaseModel, Field, EmailStr\nfrom typing import Optional\n\nclass UserBase(BaseModel):\n    name: str = Field(\n        ...,\n        title=\"Nombre del usuario\",\n        description=\"Nombre completo del usuario\",\n        min_length=2,\n        max_length=100,\n        example=\"Juan P\u00e9rez\"\n    )\n    email: EmailStr = Field(\n        ...,\n        title=\"Email del usuario\",\n        description=\"Direcci\u00f3n de email \u00fanica del usuario\",\n        example=\"juan@example.com\"\n    )\n\nclass UserCreate(UserBase):\n    \"\"\"Schema para crear un usuario.\"\"\"\n\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"name\": \"Mar\u00eda Garc\u00eda\",\n                \"email\": \"maria@example.com\"\n            }\n        }\n\nclass User(UserBase):\n    \"\"\"Schema de respuesta para usuario.\"\"\"\n    id: int = Field(\n        ...,\n        title=\"ID del usuario\",\n        description=\"Identificador \u00fanico del usuario\",\n        example=1\n    )\n\n    class Config:\n        from_attributes = True\n        schema_extra = {\n            \"example\": {\n                \"id\": 1,\n                \"name\": \"Juan P\u00e9rez\",\n                \"email\": \"juan@example.com\"\n            }\n        }\n\nclass ProductBase(BaseModel):\n    name: str = Field(\n        ...,\n        title=\"Nombre del producto\",\n        description=\"Nombre descriptivo del producto\",\n        min_length=2,\n        max_length=200,\n        example=\"Laptop Gaming ASUS ROG\"\n    )\n    price: float = Field(\n        ...,\n        title=\"Precio del producto\",\n        description=\"Precio en USD del producto\",\n        gt=0,\n        le=999999.99,\n        example=1299.99\n    )\n\nclass ProductCreate(ProductBase):\n    \"\"\"Schema para crear un producto.\"\"\"\n\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"name\": \"Mouse Gamer Logitech G502\",\n                \"price\": 79.99\n            }\n        }\n\nclass Product(ProductBase):\n    \"\"\"Schema de respuesta para producto.\"\"\"\n    id: int = Field(\n        ...,\n        title=\"ID del producto\",\n        description=\"Identificador \u00fanico del producto\",\n        example=1\n    )\n\n    class Config:\n        from_attributes = True\n        schema_extra = {\n            \"example\": {\n                \"id\": 1,\n                \"name\": \"Laptop Gaming ASUS ROG\",\n                \"price\": 1299.99\n            }\n        }\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#personalizacion-del-schema-openapi","title":"Personalizaci\u00f3n del Schema OpenAPI","text":"<pre><code># main.py\nfrom fastapi.openapi.utils import get_openapi\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n\n    openapi_schema = get_openapi(\n        title=\"API Simple E-commerce\",\n        version=\"1.0.0\",\n        description=\"API REST para gesti\u00f3n de e-commerce b\u00e1sico\",\n        routes=app.routes,\n    )\n\n    # Personalizar informaci\u00f3n adicional\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://example.com/logo.png\"\n    }\n\n    # Agregar informaci\u00f3n de servidores\n    openapi_schema[\"servers\"] = [\n        {\n            \"url\": \"http://localhost:8000\",\n            \"description\": \"Servidor de desarrollo\"\n        },\n        {\n            \"url\": \"https://api.example.com\",\n            \"description\": \"Servidor de producci\u00f3n\"\n        }\n    ]\n\n    # Agregar esquemas de seguridad (para futuras implementaciones)\n    openapi_schema[\"components\"][\"securitySchemes\"] = {\n        \"Bearer\": {\n            \"type\": \"http\",\n            \"scheme\": \"bearer\",\n            \"bearerFormat\": \"JWT\",\n        }\n    }\n\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#documentacion-adicional","title":"Documentaci\u00f3n Adicional","text":""},{"location":"tutorial/api2/10-documentacion-deployment/#readmemd-del-proyecto","title":"README.md del Proyecto","text":"<pre><code># API Simple E-commerce\n\nUna API REST simple construida con FastAPI para aprender desarrollo de APIs.\n\n## Caracter\u00edsticas\n\n- \u2705 CRUD completo para Usuarios, Productos y \u00d3rdenes\n- \u2705 Validaci\u00f3n autom\u00e1tica de datos\n- \u2705 Documentaci\u00f3n interactiva\n- \u2705 Base de datos SQLite\n- \u2705 Tests automatizados\n- \u2705 Logging configurado\n\n## Instalaci\u00f3n\n\n### Prerrequisitos\n\n- Python 3.8+\n- pip\n\n### Pasos\n\n1. Clonar el repositorio:\n```bash\ngit clone https://github.com/usuario/api-simple.git\ncd api-simple\n</code></pre> <ol> <li> <p>Crear entorno virtual: <pre><code>python -m venv venv\n\n# Windows\nvenv\\Scripts\\activate\n\n# Linux/Mac\nsource venv/bin/activate\n</code></pre></p> </li> <li> <p>Instalar dependencias: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Ejecutar la aplicaci\u00f3n: <pre><code>uvicorn main:app --reload\n</code></pre></p> </li> <li> <p>Abrir documentaci\u00f3n:</p> </li> <li>Swagger UI: http://localhost:8000/docs</li> <li>ReDoc: http://localhost:8000/redoc</li> </ol>"},{"location":"tutorial/api2/10-documentacion-deployment/#uso","title":"Uso","text":""},{"location":"tutorial/api2/10-documentacion-deployment/#crear-un-usuario","title":"Crear un usuario","text":"<pre><code>curl -X POST \"http://localhost:8000/users/\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"name\": \"Juan P\u00e9rez\",\n       \"email\": \"juan@example.com\"\n     }'\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#obtener-todos-los-usuarios","title":"Obtener todos los usuarios","text":"<pre><code>curl -X GET \"http://localhost:8000/users/\"\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#crear-un-producto","title":"Crear un producto","text":"<pre><code>curl -X POST \"http://localhost:8000/products/\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"name\": \"Laptop Gaming\",\n       \"price\": 1299.99\n     }'\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#testing","title":"Testing","text":"<pre><code># Ejecutar todos los tests\npytest\n\n# Ejecutar con coverage\npytest --cov=app\n\n# Ejecutar tests espec\u00edficos\npytest tests/test_users.py\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<pre><code>api_simple/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 crud/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 crud.py\n\u2502   \u251c\u2500\u2500 database/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 database.py\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 routers/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 users.py\n\u2502   \u2502   \u251c\u2500\u2500 products.py\n\u2502   \u2502   \u2514\u2500\u2500 orders.py\n\u2502   \u2514\u2500\u2500 schemas/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 schemas.py\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 [archivos de tutorial]\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 [archivos de test]\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#api-endpoints","title":"API Endpoints","text":""},{"location":"tutorial/api2/10-documentacion-deployment/#usuarios","title":"Usuarios","text":"<ul> <li><code>POST /users/</code> - Crear usuario</li> <li><code>GET /users/</code> - Obtener todos los usuarios</li> <li><code>GET /users/{user_id}</code> - Obtener usuario por ID</li> </ul>"},{"location":"tutorial/api2/10-documentacion-deployment/#productos","title":"Productos","text":"<ul> <li><code>POST /products/</code> - Crear producto</li> <li><code>GET /products/</code> - Obtener todos los productos</li> <li><code>GET /products/{product_id}</code> - Obtener producto por ID</li> </ul>"},{"location":"tutorial/api2/10-documentacion-deployment/#ordenes","title":"\u00d3rdenes","text":"<ul> <li><code>POST /orders/</code> - Crear orden</li> <li><code>GET /orders/</code> - Obtener todas las \u00f3rdenes</li> <li><code>GET /orders/{order_id}</code> - Obtener orden por ID</li> </ul>"},{"location":"tutorial/api2/10-documentacion-deployment/#contribuir","title":"Contribuir","text":"<ol> <li>Fork el proyecto</li> <li>Crear una rama para tu feature (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit tus cambios (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push a la rama (<code>git push origin feature/AmazingFeature</code>)</li> <li>Abrir un Pull Request</li> </ol>"},{"location":"tutorial/api2/10-documentacion-deployment/#licencia","title":"Licencia","text":"<p>Este proyecto est\u00e1 bajo la Licencia MIT - ver el archivo LICENSE para detalles. <pre><code>### Documentaci\u00f3n de API\n\n```markdown\n# docs/api.md\n\n# Documentaci\u00f3n de la API\n\n## Autenticaci\u00f3n\n\nActualmente la API no requiere autenticaci\u00f3n. En futuras versiones se implementar\u00e1 autenticaci\u00f3n JWT.\n\n## Formato de Respuestas\n\nTodas las respuestas est\u00e1n en formato JSON.\n\n### Respuestas Exitosas\n\n```json\n{\n  \"id\": 1,\n  \"name\": \"Juan P\u00e9rez\",\n  \"email\": \"juan@example.com\"\n}\n</code></pre></p>"},{"location":"tutorial/api2/10-documentacion-deployment/#respuestas-de-error","title":"Respuestas de Error","text":"<pre><code>{\n  \"detail\": \"Descripci\u00f3n del error\"\n}\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#codigos-de-estado-http","title":"C\u00f3digos de Estado HTTP","text":"<ul> <li><code>200 OK</code> - Operaci\u00f3n exitosa</li> <li><code>201 Created</code> - Recurso creado exitosamente</li> <li><code>400 Bad Request</code> - Datos inv\u00e1lidos</li> <li><code>404 Not Found</code> - Recurso no encontrado</li> <li><code>422 Unprocessable Entity</code> - Error de validaci\u00f3n</li> <li><code>500 Internal Server Error</code> - Error interno del servidor</li> </ul>"},{"location":"tutorial/api2/10-documentacion-deployment/#limites-de-rate","title":"L\u00edmites de Rate","text":"<p>Actualmente no hay l\u00edmites de rate implementados.</p>"},{"location":"tutorial/api2/10-documentacion-deployment/#versionado","title":"Versionado","text":"<p>La API actualmente est\u00e1 en la versi\u00f3n 1.0. Futuras versiones mantendr\u00e1n compatibilidad hacia atr\u00e1s. <pre><code>## Preparaci\u00f3n para Deployment\n\n### Variables de Entorno\n\n```python\n# app/core/config.py\nimport os\nfrom functools import lru_cache\nfrom pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    \"\"\"Configuraci\u00f3n de la aplicaci\u00f3n.\"\"\"\n\n    # Informaci\u00f3n de la aplicaci\u00f3n\n    app_name: str = \"API Simple E-commerce\"\n    version: str = \"1.0.0\"\n    description: str = \"API REST para e-commerce b\u00e1sico\"\n\n    # Configuraci\u00f3n del servidor\n    host: str = \"0.0.0.0\"\n    port: int = 8000\n    debug: bool = False\n\n    # Base de datos\n    database_url: str = \"sqlite:///./app.db\"\n\n    # Seguridad\n    secret_key: str = \"your-secret-key-change-in-production\"\n\n    # CORS\n    allowed_origins: list = [\"*\"]\n\n    # Logging\n    log_level: str = \"INFO\"\n\n    # Documentaci\u00f3n\n    docs_url: str = \"/docs\"\n    redoc_url: str = \"/redoc\"\n    openapi_url: str = \"/openapi.json\"\n\n    class Config:\n        env_file = \".env\"\n        case_sensitive = False\n\n@lru_cache()\ndef get_settings():\n    return Settings()\n\n# Instancia global\nsettings = get_settings()\n</code></pre></p>"},{"location":"tutorial/api2/10-documentacion-deployment/#archivo-env","title":"Archivo .env","text":"<pre><code># .env\n\n# Aplicaci\u00f3n\nAPP_NAME=\"API Simple E-commerce\"\nVERSION=\"1.0.0\"\nDEBUG=false\n\n# Servidor\nHOST=\"0.0.0.0\"\nPORT=8000\n\n# Base de datos\nDATABASE_URL=\"sqlite:///./production.db\"\n\n# Seguridad\nSECRET_KEY=\"your-super-secret-key-here\"\n\n# CORS\nALLOWED_ORIGINS=[\"https://myapp.com\", \"https://www.myapp.com\"]\n\n# Logging\nLOG_LEVEL=\"INFO\"\n\n# Documentaci\u00f3n (deshabilitada en producci\u00f3n)\nDOCS_URL=null\nREDOC_URL=null\nOPENAPI_URL=null\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#configuracion-para-produccion","title":"Configuraci\u00f3n para Producci\u00f3n","text":"<pre><code># main.py\nimport os\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\nfrom app.core.config import settings\nfrom app.database.database import engine\nfrom app.models import models\nfrom app.routers import users, products, orders\n\n# Crear tablas\nmodels.Base.metadata.create_all(bind=engine)\n\n# Crear aplicaci\u00f3n\napp = FastAPI(\n    title=settings.app_name,\n    version=settings.version,\n    description=settings.description,\n    docs_url=settings.docs_url if settings.debug else None,\n    redoc_url=settings.redoc_url if settings.debug else None,\n    openapi_url=settings.openapi_url if settings.debug else None,\n)\n\n# Middleware de seguridad para producci\u00f3n\nif not settings.debug:\n    app.add_middleware(\n        TrustedHostMiddleware,\n        allowed_hosts=[\"api.mycompany.com\", \"*.mycompany.com\"]\n    )\n\n# CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.allowed_origins,\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n\n# Incluir routers\napp.include_router(users.router)\napp.include_router(products.router)\napp.include_router(orders.router)\n\n@app.get(\"/\")\ndef root():\n    return {\n        \"message\": \"API Simple E-commerce\",\n        \"version\": settings.version,\n        \"docs\": f\"{settings.docs_url}\" if settings.debug else \"Documentaci\u00f3n no disponible en producci\u00f3n\"\n    }\n\n@app.get(\"/health\")\ndef health_check():\n    \"\"\"Endpoint de salud para monitoreo.\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"version\": settings.version\n    }\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\n        \"main:app\",\n        host=settings.host,\n        port=settings.port,\n        reload=settings.debug\n    )\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#deployment-con-docker","title":"Deployment con Docker","text":""},{"location":"tutorial/api2/10-documentacion-deployment/#dockerfile","title":"Dockerfile","text":"<pre><code># Dockerfile\nFROM python:3.10-slim\n\n# Establecer directorio de trabajo\nWORKDIR /app\n\n# Instalar dependencias del sistema\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copiar archivos de dependencias\nCOPY requirements.txt .\n\n# Instalar dependencias de Python\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copiar c\u00f3digo de la aplicaci\u00f3n\nCOPY . .\n\n# Crear usuario no-root\nRUN useradd --create-home --shell /bin/bash app \\\n    &amp;&amp; chown -R app:app /app\nUSER app\n\n# Exponer puerto\nEXPOSE 8000\n\n# Comando por defecto\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#docker-composeyml","title":"docker-compose.yml","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  api:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DATABASE_URL=sqlite:///./app.db\n      - DEBUG=false\n      - LOG_LEVEL=INFO\n    volumes:\n      - ./data:/app/data\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n\n  # Para futuras implementaciones con PostgreSQL\n  # db:\n  #   image: postgres:13\n  #   environment:\n  #     POSTGRES_DB: api_simple\n  #     POSTGRES_USER: api_user\n  #     POSTGRES_PASSWORD: api_password\n  #   volumes:\n  #     - postgres_data:/var/lib/postgresql/data\n  #   ports:\n  #     - \"5432:5432\"\n\n# volumes:\n#   postgres_data:\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#comandos-docker","title":"Comandos Docker","text":"<pre><code># Construir imagen\ndocker build -t api-simple .\n\n# Ejecutar contenedor\ndocker run -p 8000:8000 api-simple\n\n# Usar docker-compose\ndocker-compose up -d\n\n# Ver logs\ndocker-compose logs -f api\n\n# Parar servicios\ndocker-compose down\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#deployment-en-la-nube","title":"Deployment en la Nube","text":""},{"location":"tutorial/api2/10-documentacion-deployment/#heroku","title":"Heroku","text":"<pre><code># Procfile\nweb: uvicorn main:app --host 0.0.0.0 --port $PORT\n</code></pre> <pre><code># Comandos Heroku\nheroku create api-simple-app\nheroku config:set DEBUG=false\nheroku config:set SECRET_KEY=your-production-secret-key\ngit push heroku main\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#railway","title":"Railway","text":"<pre><code># railway.toml\n[build]\nbuilder = \"NIXPACKS\"\n\n[deploy]\nstartCommand = \"uvicorn main:app --host 0.0.0.0 --port $PORT\"\nrestartPolicyType = \"ON_FAILURE\"\nrestartPolicyMaxRetries = 10\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#render","title":"Render","text":"<pre><code># render.yaml\nservices:\n  - type: web\n    name: api-simple\n    env: python\n    buildCommand: pip install -r requirements.txt\n    startCommand: uvicorn main:app --host 0.0.0.0 --port $PORT\n    envVars:\n      - key: DEBUG\n        value: false\n      - key: SECRET_KEY\n        generateValue: true\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#digitalocean-app-platform","title":"DigitalOcean App Platform","text":"<pre><code># .do/app.yaml\nname: api-simple\nservices:\n- name: api\n  source_dir: /\n  github:\n    repo: usuario/api-simple\n    branch: main\n  run_command: uvicorn main:app --host 0.0.0.0 --port $PORT\n  environment_slug: python\n  instance_count: 1\n  instance_size_slug: basic-xxs\n  env:\n  - key: DEBUG\n    value: \"false\"\n  - key: SECRET_KEY\n    value: \"your-production-secret-key\"\n    type: SECRET\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#monitoreo-y-logging","title":"Monitoreo y Logging","text":""},{"location":"tutorial/api2/10-documentacion-deployment/#configuracion-de-logging","title":"Configuraci\u00f3n de Logging","text":"<pre><code># app/core/logging.py\nimport logging\nimport sys\nfrom pathlib import Path\nfrom app.core.config import settings\n\ndef setup_logging():\n    \"\"\"Configurar logging para la aplicaci\u00f3n.\"\"\"\n\n    # Crear directorio de logs\n    log_dir = Path(\"logs\")\n    log_dir.mkdir(exist_ok=True)\n\n    # Configurar formato\n    log_format = (\n        \"%(asctime)s - %(name)s - %(levelname)s - \"\n        \"%(filename)s:%(lineno)d - %(message)s\"\n    )\n\n    # Configurar handlers\n    handlers = [logging.StreamHandler(sys.stdout)]\n\n    if not settings.debug:\n        # En producci\u00f3n, tambi\u00e9n log a archivos\n        handlers.extend([\n            logging.FileHandler(log_dir / \"app.log\"),\n            logging.FileHandler(log_dir / \"error.log\", level=logging.ERROR)\n        ])\n\n    # Configurar logging\n    logging.basicConfig(\n        level=getattr(logging, settings.log_level.upper()),\n        format=log_format,\n        handlers=handlers\n    )\n\n    # Configurar loggers espec\u00edficos\n    logging.getLogger(\"sqlalchemy.engine\").setLevel(logging.WARNING)\n    logging.getLogger(\"uvicorn\").setLevel(logging.INFO)\n\n    return logging.getLogger(__name__)\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#middleware-de-logging","title":"Middleware de Logging","text":"<pre><code># app/middleware/logging.py\nimport time\nimport logging\nfrom fastapi import Request, Response\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nlogger = logging.getLogger(__name__)\n\nclass LoggingMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        start_time = time.time()\n\n        # Log request\n        logger.info(\n            f\"Request: {request.method} {request.url} - \"\n            f\"Client: {request.client.host if request.client else 'unknown'}\"\n        )\n\n        # Procesar request\n        response = await call_next(request)\n\n        # Calcular tiempo de procesamiento\n        process_time = time.time() - start_time\n\n        # Log response\n        logger.info(\n            f\"Response: {response.status_code} - \"\n            f\"Time: {process_time:.4f}s\"\n        )\n\n        # Agregar header de tiempo\n        response.headers[\"X-Process-Time\"] = str(process_time)\n\n        return response\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#health-check-avanzado","title":"Health Check Avanzado","text":"<pre><code># app/routers/health.py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom app.database.database import get_db\nfrom app.core.config import settings\nimport time\nimport psutil\n\nrouter = APIRouter(tags=[\"health\"])\n\n@router.get(\"/health\")\ndef health_check():\n    \"\"\"Health check b\u00e1sico.\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"version\": settings.version,\n        \"timestamp\": time.time()\n    }\n\n@router.get(\"/health/detailed\")\ndef detailed_health_check(db: Session = Depends(get_db)):\n    \"\"\"Health check detallado.\"\"\"\n    health_data = {\n        \"status\": \"healthy\",\n        \"version\": settings.version,\n        \"timestamp\": time.time(),\n        \"checks\": {}\n    }\n\n    # Check de base de datos\n    try:\n        db.execute(\"SELECT 1\")\n        health_data[\"checks\"][\"database\"] = \"healthy\"\n    except Exception as e:\n        health_data[\"checks\"][\"database\"] = f\"unhealthy: {str(e)}\"\n        health_data[\"status\"] = \"unhealthy\"\n\n    # Check de memoria\n    memory = psutil.virtual_memory()\n    health_data[\"checks\"][\"memory\"] = {\n        \"usage_percent\": memory.percent,\n        \"available_gb\": round(memory.available / (1024**3), 2)\n    }\n\n    # Check de disco\n    disk = psutil.disk_usage('/')\n    health_data[\"checks\"][\"disk\"] = {\n        \"usage_percent\": disk.percent,\n        \"free_gb\": round(disk.free / (1024**3), 2)\n    }\n\n    return health_data\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#seguridad","title":"Seguridad","text":""},{"location":"tutorial/api2/10-documentacion-deployment/#headers-de-seguridad","title":"Headers de Seguridad","text":"<pre><code># app/middleware/security.py\nfrom fastapi import Request, Response\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\nclass SecurityHeadersMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        response = await call_next(request)\n\n        # Headers de seguridad\n        response.headers[\"X-Content-Type-Options\"] = \"nosniff\"\n        response.headers[\"X-Frame-Options\"] = \"DENY\"\n        response.headers[\"X-XSS-Protection\"] = \"1; mode=block\"\n        response.headers[\"Strict-Transport-Security\"] = \"max-age=31536000; includeSubDomains\"\n        response.headers[\"Referrer-Policy\"] = \"strict-origin-when-cross-origin\"\n\n        return response\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#rate-limiting","title":"Rate Limiting","text":"<pre><code># Instalar: pip install slowapi\nfrom slowapi import Limiter, _rate_limit_exceeded_handler\nfrom slowapi.util import get_remote_address\nfrom slowapi.errors import RateLimitExceeded\n\nlimiter = Limiter(key_func=get_remote_address)\napp.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\n\n@app.get(\"/users/\")\n@limiter.limit(\"10/minute\")\ndef get_users(request: Request, db: Session = Depends(get_db)):\n    return get_all(db, User)\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#mejores-practicas-para-produccion","title":"Mejores Pr\u00e1cticas para Producci\u00f3n","text":""},{"location":"tutorial/api2/10-documentacion-deployment/#1-configuracion-por-entorno","title":"1. Configuraci\u00f3n por Entorno","text":"<pre><code># \u2705 Bueno: Configuraci\u00f3n por variables de entorno\nDATABASE_URL = os.getenv(\"DATABASE_URL\", \"sqlite:///./app.db\")\nDEBUG = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\n\n# \u274c Malo: Configuraci\u00f3n hardcodeada\nDATABASE_URL = \"sqlite:///./app.db\"\nDEBUG = True\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#2-manejo-de-secretos","title":"2. Manejo de Secretos","text":"<pre><code># \u2705 Bueno: Secretos en variables de entorno\nSECRET_KEY = os.getenv(\"SECRET_KEY\")\nif not SECRET_KEY:\n    raise ValueError(\"SECRET_KEY environment variable is required\")\n\n# \u274c Malo: Secretos en c\u00f3digo\nSECRET_KEY = \"my-secret-key-123\"\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#3-logging-apropiado","title":"3. Logging Apropiado","text":"<pre><code># \u2705 Bueno: Logging estructurado\nlogger.info(\"User created\", extra={\"user_id\": user.id, \"email\": user.email})\n\n# \u274c Malo: Print statements\nprint(f\"User created: {user.id}\")\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#4-manejo-de-errores","title":"4. Manejo de Errores","text":"<pre><code># \u2705 Bueno: Manejo espec\u00edfico de errores\ntry:\n    user = create_user(db, user_data)\nexcept IntegrityError:\n    raise HTTPException(status_code=400, detail=\"Email already exists\")\nexcept Exception as e:\n    logger.error(f\"Unexpected error: {e}\", exc_info=True)\n    raise HTTPException(status_code=500, detail=\"Internal server error\")\n\n# \u274c Malo: Errores sin manejar\nuser = create_user(db, user_data)  # Puede fallar sin control\n</code></pre>"},{"location":"tutorial/api2/10-documentacion-deployment/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":""},{"location":"tutorial/api2/10-documentacion-deployment/#ejercicio-1-documentacion-completa","title":"Ejercicio 1: Documentaci\u00f3n Completa","text":"<p>Mejora la documentaci\u00f3n de todos los endpoints: - Agrega ejemplos de request/response - Documenta todos los c\u00f3digos de error posibles - Agrega descripciones detalladas</p>"},{"location":"tutorial/api2/10-documentacion-deployment/#ejercicio-2-configuracion-de-produccion","title":"Ejercicio 2: Configuraci\u00f3n de Producci\u00f3n","text":"<p>Configura la aplicaci\u00f3n para producci\u00f3n: - Variables de entorno - Logging apropiado - Headers de seguridad - Deshabilitaci\u00f3n de documentaci\u00f3n</p>"},{"location":"tutorial/api2/10-documentacion-deployment/#ejercicio-3-docker-setup","title":"Ejercicio 3: Docker Setup","text":"<p>Crea un setup completo con Docker: - Dockerfile optimizado - docker-compose con base de datos - Scripts de deployment</p>"},{"location":"tutorial/api2/10-documentacion-deployment/#ejercicio-4-monitoreo","title":"Ejercicio 4: Monitoreo","text":"<p>Implementa monitoreo b\u00e1sico: - Health checks detallados - M\u00e9tricas de performance - Alertas b\u00e1sicas</p>"},{"location":"tutorial/api2/10-documentacion-deployment/#conclusion","title":"Conclusi\u00f3n","text":"<p>\u00a1Felicitaciones! Has completado el tutorial completo de construcci\u00f3n de una API REST con FastAPI. A lo largo de estos 10 cap\u00edtulos has aprendido:</p>"},{"location":"tutorial/api2/10-documentacion-deployment/#lo-que-has-construido","title":"Lo que has construido:","text":"<ul> <li>\u2705 Una API REST funcional con FastAPI</li> <li>\u2705 Modelos de base de datos con SQLAlchemy</li> <li>\u2705 Validaci\u00f3n de datos con Pydantic</li> <li>\u2705 Operaciones CRUD gen\u00e9ricas</li> <li>\u2705 Endpoints organizados con routers</li> <li>\u2705 Tests automatizados</li> <li>\u2705 Documentaci\u00f3n interactiva</li> <li>\u2705 Configuraci\u00f3n para deployment</li> </ul>"},{"location":"tutorial/api2/10-documentacion-deployment/#conceptos-aprendidos","title":"Conceptos aprendidos:","text":"<ul> <li>Arquitectura en capas: Separaci\u00f3n clara de responsabilidades</li> <li>ORM: Mapeo objeto-relacional con SQLAlchemy</li> <li>Validaci\u00f3n: Schemas con Pydantic</li> <li>Testing: Unit tests e integration tests</li> <li>Documentaci\u00f3n: OpenAPI/Swagger autom\u00e1tico</li> <li>Deployment: Preparaci\u00f3n para producci\u00f3n</li> </ul>"},{"location":"tutorial/api2/10-documentacion-deployment/#proximos-pasos-sugeridos","title":"Pr\u00f3ximos pasos sugeridos:","text":"<ol> <li>Autenticaci\u00f3n y Autorizaci\u00f3n</li> <li>JWT tokens</li> <li>Roles y permisos</li> <li> <p>OAuth2</p> </li> <li> <p>Base de Datos Avanzada</p> </li> <li>PostgreSQL</li> <li>Migraciones con Alembic</li> <li> <p>Relaciones complejas</p> </li> <li> <p>Performance</p> </li> <li>Caching con Redis</li> <li>Paginaci\u00f3n</li> <li> <p>Optimizaci\u00f3n de queries</p> </li> <li> <p>Microservicios</p> </li> <li>Separaci\u00f3n de servicios</li> <li>Comunicaci\u00f3n entre servicios</li> <li> <p>API Gateway</p> </li> <li> <p>Observabilidad</p> </li> <li>M\u00e9tricas con Prometheus</li> <li>Tracing distribuido</li> <li>Dashboards con Grafana</li> </ol>"},{"location":"tutorial/api2/10-documentacion-deployment/#recursos-adicionales","title":"Recursos adicionales:","text":"<ul> <li>Documentaci\u00f3n oficial de FastAPI</li> <li>SQLAlchemy Documentation</li> <li>Pydantic Documentation</li> <li>Pytest Documentation</li> </ul> <p>\u00a1Sigue practicando y construyendo APIs incre\u00edbles! \ud83d\ude80</p> <p>Anterior: Testing y Debugging</p> <p>Inicio: README</p>"},{"location":"tutorial/api2/11-Repositorio/","title":"Repositorio del proyecto","text":"<pre><code>https://github.com/jfinfosena/act_apirest_fastapi2.git\n</code></pre>"},{"location":"tutorial/api2/11-Repositorio/#proyectos-grupales","title":"Proyectos grupales","text":"<pre><code>https://github.com/jfinfosena/act_pi_pap_grupos.git\n</code></pre>"}]}